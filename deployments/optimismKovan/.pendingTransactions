{
  "0xa1c8c02dea805d11476df4b826af83566e1daee618066f257b223c5d95d87b69": {
    "name": "RubiconMarket",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "RubiconMarket",
      "sourceName": "contracts/RubiconMarket.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "pair",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "take_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "give_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeAmt",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "feeTo",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "name": "FeeTake",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "pair",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "pay_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "buy_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "name": "LogBump",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "name": "LogBuyEnabled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "LogDelete",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "LogInsert",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "lol",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "input",
              "type": "uint256"
            }
          ],
          "name": "LogInt",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "LogItemUpdate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "pair",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "pay_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "buy_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "name": "LogKill",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "pair",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "pay_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "buy_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "name": "LogMake",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "LogMatch",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "name": "LogMatchingEnabled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "min_amount",
              "type": "uint256"
            }
          ],
          "name": "LogMinSell",
          "type": "event"
        },
        {
          "anonymous": true,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes4",
              "name": "sig",
              "type": "bytes4"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "guy",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "foo",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "bar",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "wad",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "fax",
              "type": "bytes"
            }
          ],
          "name": "LogNote",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "authority",
              "type": "address"
            }
          ],
          "name": "LogSetAuthority",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "LogSetOwner",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "LogSortedOffer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "pair",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "take_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint128",
              "name": "give_amt",
              "type": "uint128"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "name": "LogTake",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "buy_gem",
              "type": "address"
            }
          ],
          "name": "LogTrade",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "LogUnsortedOffer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "OfferDeleted",
          "type": "event"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "AqueductAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "AqueductDistributionLive",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "_best",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "_dust",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "_near",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "_rank",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delb",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "_span",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "address",
              "name": "addition",
              "type": "address"
            }
          ],
          "name": "addToWhitelist",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id_",
              "type": "bytes32"
            }
          ],
          "name": "bump",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "buy",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "max_fill_amount",
              "type": "uint256"
            }
          ],
          "name": "buyAllAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fill_amt",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "buyEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "cancel",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "del_rank",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "dustId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "sell_gem",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            }
          ],
          "name": "getBestOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getBetterOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            }
          ],
          "name": "getBuyAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fill_amt",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "getFirstUnsortedOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            }
          ],
          "name": "getMinSell",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getNextUnsortedOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "sell_gem",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            }
          ],
          "name": "getOfferCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            }
          ],
          "name": "getPayAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fill_amt",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "getTime",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getWorseOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bool",
              "name": "RBCNDist",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_feeTo",
              "type": "address"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pos",
              "type": "uint256"
            }
          ],
          "name": "insert",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "isActive",
          "outputs": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "isClosed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "closed",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "isOfferSorted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "name": "kill",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "last_offer_id",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "pay_amt",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "buy_amt",
              "type": "uint128"
            }
          ],
          "name": "make",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "matchingEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pos",
              "type": "uint256"
            }
          ],
          "name": "offer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pos",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "matching",
              "type": "bool"
            }
          ],
          "name": "offer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            }
          ],
          "name": "offer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "offers",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "buy_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "address",
              "name": "remove",
              "type": "address"
            }
          ],
          "name": "removeFromWhitelist",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pay_amt",
              "type": "uint256"
            },
            {
              "internalType": "contract ERC20",
              "name": "buy_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "min_fill_amount",
              "type": "uint256"
            }
          ],
          "name": "sellAllAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fill_amt",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "address",
              "name": "_Aqueduct",
              "type": "address"
            }
          ],
          "name": "setAqueductAddress",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bool",
              "name": "live",
              "type": "bool"
            }
          ],
          "name": "setAqueductDistributionLive",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bool",
              "name": "buyEnabled_",
              "type": "bool"
            }
          ],
          "name": "setBuyEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newFeeBPS",
              "type": "uint256"
            }
          ],
          "name": "setFeeBPS",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "address",
              "name": "newFeeTo",
              "type": "address"
            }
          ],
          "name": "setFeeTo",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bool",
              "name": "matchingEnabled_",
              "type": "bool"
            }
          ],
          "name": "setMatchingEnabled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "contract ERC20",
              "name": "pay_gem",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dust",
              "type": "uint256"
            }
          ],
          "name": "setMinSell",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "address",
              "name": "owner_",
              "type": "address"
            }
          ],
          "name": "setOwner",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [],
          "name": "stop",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "stopped",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint128",
              "name": "maxTakeAmount",
              "type": "uint128"
            }
          ],
          "name": "take",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526006805460ff60b01b1960ff60a81b19909116600160a81b1716600160b01b17905534801561003257600080fd5b50613c12806100426000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80637ca9429a116101d3578063be71f5ce11610104578063d6febde8116100a2578063f09ea2a61161007c578063f09ea2a614610aab578063f46901ed14610ae7578063f582d29314610b0d578063ff1fd97414610b155761035d565b8063d6febde814610a1a578063e1a6f01414610a3d578063e43252d714610a855761035d565b8063c2d526aa116100de578063c2d526aa14610986578063c41a360a146109c1578063d2b420ce146109de578063d6f15469146109fb5761035d565b8063be71f5ce1461092c578063bf7c734e14610952578063c2b6b58c1461097e5761035d565b80638da5cb5b11610171578063943911bc1161014b578063943911bc146108b6578063a128171b146108d3578063a78d4316146108f2578063b4f9b6c81461090f5761035d565b80638da5cb5b1461086b578063911550f41461087357806391be90c8146108905761035d565b806385ee7ba6116101ad57806385ee7ba6146107a95780638a72ea6a146107d75780638ab1d6811461083d5780638af82a2e146108635761035d565b80637ca9429a146107245780638185402b1461075257806382afd23b1461078c5761035d565b806340e58ee5116102ad578063604b6a9c1161024b5780636b9d8c4b116102255780636b9d8c4b146106ad57806374c1d7d3146106d157806375f12b21146106ff578063779997c3146107075761035d565b8063604b6a9c1461064557806361f54a7914610662578063677170e11461067f5761035d565b8063496064551161028757806349606455146105c7578063511fa487146105f3578063557ed1ba1461061957806356ad87641461063d5761035d565b806340e58ee51461053f5780634579268a1461055c578063467f0b7b146105aa5761035d565b8063144a27521161031a5780631d834a1b116102f45780631d834a1b146104ed578063232cae0b146105105780632aed1905146105185780632f90a6fc146105375761035d565b8063144a27521461046f578063158ef93e146104a55780631b33d412146104ad5761035d565b806301492a0b146103625780630374fc6f1461037e5780630621b4f6146103be57806307da68f5146103f8578063093f51981461040257806313af403514610449575b600080fd5b61036a610b4b565b604080519115158252519081900360200190f35b6103ac6004803603604081101561039457600080fd5b506001600160a01b0381358116916020013516610b5b565b60408051918252519081900360200190f35b6103ac600480360360808110156103d457600080fd5b506001600160a01b0381358116916020810135916040820135169060600135610b88565b610400610d17565b005b6103ac6004803603608081101561041857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610d74565b6104006004803603602081101561045f57600080fd5b50356001600160a01b0316610d9d565b6103ac6004803603606081101561048557600080fd5b506001600160a01b03813581169160208101359091169060400135610e31565b61036a610ef9565b6103ac600480360360a08110156104c357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060800135610f09565b61036a6004803603604081101561050357600080fd5b5080359060200135610f36565b6103ac611003565b61036a6004803603602081101561052e57600080fd5b50351515611009565b61036a6110b7565b61036a6004803603602081101561055557600080fd5b50356110c7565b6105796004803603602081101561057257600080fd5b5035611227565b604080519485526001600160a01b039384166020860152848101929092529091166060830152519081900360800190f35b61036a600480360360208110156105c057600080fd5b50356112b4565b610400600480360360408110156105dd57600080fd5b50803590602001356001600160801b03166113b5565b6103ac6004803603602081101561060957600080fd5b50356001600160a01b03166113d5565b6106216113f0565b604080516001600160401b039092168252519081900360200190f35b6103ac6113f4565b61036a6004803603602081101561065b57600080fd5b50356113fa565b6103ac6004803603602081101561067857600080fd5b503561144d565b6103ac6004803603604081101561069557600080fd5b506001600160a01b038135811691602001351661145f565b6106b561147c565b604080516001600160a01b039092168252519081900360200190f35b6103ac600480360360408110156106e757600080fd5b506001600160a01b038135811691602001351661148b565b61036a6114a8565b6104006004803603602081101561071d57600080fd5b50356114b8565b6103ac6004803603604081101561073a57600080fd5b506001600160a01b03813581169160200135166115c5565b6103ac6004803603608081101561076857600080fd5b506001600160a01b03813581169160208101359160408201351690606001356115f0565b61036a600480360360208110156107a257600080fd5b5035611760565b610400600480360360408110156107bf57600080fd5b508035151590602001356001600160a01b0316611787565b6107f4600480360360208110156107ed57600080fd5b5035611869565b604080519687526001600160a01b03958616602088015286810194909452918416606086015290921660808401526001600160401b0390911660a0830152519081900360c00190f35b6104006004803603602081101561085357600080fd5b50356001600160a01b03166118bb565b6103ac611924565b6106b561192a565b6103ac6004803603602081101561088957600080fd5b5035611939565b6103ac600480360360208110156108a657600080fd5b50356001600160a01b031661194b565b6103ac600480360360208110156108cc57600080fd5b503561195d565b61036a600480360360208110156108e957600080fd5b50351515611972565b6103ac6004803603602081101561090857600080fd5b50356119dd565b6104006004803603602081101561092557600080fd5b50356119ef565b61036a6004803603602081101561094257600080fd5b50356001600160a01b0316611a04565b61036a6004803603604081101561096857600080fd5b506001600160a01b038135169060200135611a73565b61036a611b82565b6109a36004803603602081101561099c57600080fd5b5035611b87565b60408051938452602084019290925282820152519081900360600190f35b6106b5600480360360208110156109d757600080fd5b5035611ba8565b61036a600480360360208110156109f457600080fd5b5035611bc6565b61036a60048036036020811015610a1157600080fd5b50351515611c36565b61036a60048036036040811015610a3057600080fd5b5080359060200135611ce3565b6103ac600480360360c0811015610a5357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515611e2e565b61040060048036036020811015610a9b57600080fd5b50356001600160a01b0316611ef2565b6103ac60048036036080811015610ac157600080fd5b508035906001600160a01b03602082013581169160408101359160609091013516611f5e565b61036a60048036036020811015610afd57600080fd5b50356001600160a01b0316611fe1565b61036a612050565b6103ac60048036036060811015610b2b57600080fd5b506001600160a01b03813581169160208101359091169060400135612060565b600654600160b01b900460ff1681565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b60045460009060ff1615610bd8576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415610d0157610beb8487610b5b565b905080610bf757600080fd5b6000818152600260208190526040909120908101549054610c189190612119565b85670de0b6b3a7640000021015610c2e57610d01565b600081815260026020819052604090912001548510610ca557600081815260026020526040902054610c61908390612148565b9150610c83856002600084815260200190815260200160002060020154612197565b600082815260026020526040902054909550610ca09082906113b5565b610cfc565b600081815260026020819052604082208054910154633b9aca0091610cd69189840291610cd1916121e7565b612203565b81610cdd57fe5b049050610cea8382612148565b9250610cf682826113b5565b60009550505b610bdb565b82821015610d0e57600080fd5b50949350505050565b610d2033612233565b610d5f576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b179055565b6000610d94836001600160801b031686846001600160801b031687611f5e565b95945050505050565b610da633612233565b610de5576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a250565b600080610e3e8585610b5b565b90505b60008181526002602081905260409091200154831115610eb957600081815260026020526040902054610e75908390612148565b9150610e97836002600084815260200190815260200160002060020154612197565b92508215610eb457610ea88161195d565b905080610eb457600080fd5b610e41565b60008181526002602081905260409091208054910154610d94918491633b9aca0091610eec9188840291610cd1916121e7565b81610ef357fe5b04612148565b600e54600160a81b900460ff1681565b6000610f13611b82565b15610f1d57600080fd5b610f2c86868686866001611e2e565b9695505050505050565b60045460009060ff1615610f86576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b610f8f83611bc6565b15610f9957600080fd5b610fa283611760565b610fab57600080fd5b610fb483612274565b50610fbf838361231e565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60015481565b600061101433612233565b611053576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160b01b90810260ff60b01b199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a15060015b919050565b600e54600160a01b900460ff1681565b6000816110d381611760565b61110e5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b611116611b82565b8061113a575061112581611ba8565b6001600160a01b0316336001600160a01b0316145b806111465750600d5481145b6111815760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff16156111ce576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654600160b01b900460ff1615611217576111e983611bc6565b15611205576111f7836124bd565b61120057600080fd5b611217565b61120e83612274565b61121757600080fd5b61122083612678565b9392505050565b600080600080611235613a50565b5050506000928352505060026020818152604092839020835160c081018552815480825260018301546001600160a01b039081169483018590529483015495820186905260038301548516606083018190526004909301549485166080830152600160a01b9094046001600160401b031660a090910152919390929190565b60045460009060ff1615611304576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b61130d82611760565b15801561132a575060008281526007602052604090206002015415155b801561134a57506000828152600760205260409020600201546009194301115b61135357600080fd5b60008281526007602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b6113c8826001600160801b038316611ce3565b6113d157600080fd5b5050565b6001600160a01b03166000908152600a602052604090205490565b4290565b600d5481565b600061140533612233565b611444576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600555600190565b6000908152600b602052604090205490565b600960209081526000928352604080842090915290825290205481565b600e546001600160a01b031681565b600860209081526000928352604080842090915290825290205481565b600654600160a01b900460ff1681565b806114c281611760565b6114cb57600080fd5b6114d3611b82565b156114dd57600080fd5b600082815260026020818152604080842060048101546001820154600383015484516001600160601b0319606084811b8216838a015283901b1660348201528551602881830301815260488201808852815191890191909120998c905296889052845494909701546001600160a01b03928316909652811660688701526001600160801b0392831660888701529190931660a88501526001600160401b03600160a01b84041660c8850152905186949190921692909184917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360e80190a4505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b60045460009060ff1615611640576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415611753576116538685610b5b565b90508061165f57600080fd5b6000818152600260208190526040909120805491015461167f9190612119565b85670de0b6b3a764000002101561169557611753565b6000818152600260205260409020548510611709576116ca826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506116e7908690612197565b6000828152600260205260409020549095506117049082906113b5565b61174e565b600081815260026020819052604090912090810154905461173d918491633b9aca0091610eec918a840291610cd1916121e7565b915061174981866113b5565b600094505b611643565b82821115610d0e57600080fd5b600090815260026020526040902060040154600160a01b90046001600160401b0316151590565b600e54600160a81b900460ff16156117e6576040805162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600e805460ff60a01b1916600160a01b84151502179055600680546001600160a01b03199081166001600160a01b0384161790915560008054339216821781556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed949190a250506014600555600e805460ff60a81b1916600160a81b179055565b60026020819052600091825260409091208054600182015492820154600383015460049093015491936001600160a01b039081169391929181169190811690600160a01b90046001600160401b031686565b6118c433612233565b611903576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19169055565b600c5490565b6000546001600160a01b031681565b60009081526007602052604090205490565b600a6020526000908152604090205481565b60009081526007602052604090206001015490565b600061197d33612233565b6119bc576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e8054821515600160a01b0260ff60a01b199091161790556001919050565b600b6020526000908152604090205481565b6119f8816110c7565b611a0157600080fd5b50565b6000611a0f33612233565b611a4e576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0383166001600160a01b03199091161790556001919050565b6000611a7e33612233565b611abd576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a46001600160a01b0386166000818152600a60209081526040918290208890558151928352820187905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a150600195945050505050565b600090565b60076020526000908152604090208054600182015460029092015490919083565b6000908152600260205260409020600401546001600160a01b031690565b600081815260076020526040812054151580611bf2575060008281526007602052604090206001015415155b80610b82575050600081815260026020908152604080832060018101546001600160a01b039081168552600884528285206003909201541684529091529020541490565b6000611c4133612233565b611c80576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160a81b90810260ff60a81b199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b600082611cef81611760565b611cf857600080fd5b611d00611b82565b15611d0a57600080fd5b60045460ff1615611d57576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600e54600160a01b900460ff1615611dfd57600e546001600160a01b031663b30ed7b3611d8386611ba8565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301523360248301525160448083019260209291908290030181600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50505b600654613a8590600160b01b900460ff16611e1a57612a86611e1e565b6131cc5b9050610d9485858363ffffffff16565b6000611e38611b82565b15611e4257600080fd5b60045460ff1615611e8f576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902054871015611eb457600080fd5b600654600160b01b900460ff1615611edb57611ed4878787878787613297565b9050610f2c565b611ee78787878761343e565b979650505050505050565b611efb33612233565b611f3a576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b60045460009060ff1615611fae576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654613a8590600160b01b900460ff16611fcb5761343e611fcf565b6137775b9050610f2c868686868563ffffffff16565b6000611fec33612233565b61202b576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600680546001600160a01b0383166001600160a01b03199091161790556001919050565b600654600160a81b900460ff1681565b60008061206d8486610b5b565b90505b6000818152600260205260409020548311156120e5576120a6826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506120c3908490612197565b925082156120e0576120d48161195d565b9050806120e057600080fd5b612070565b6000818152600260208190526040909120908101549054610d94918491633b9aca0091610eec9188840291610cd1916121e7565b60008161213961213185670de0b6b3a7640000613801565b600285610ef3565b8161214057fe5b049392505050565b80820182811015610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b82576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b600081612139612131856b033b2e3c9fd0803ce8000000613801565b60006b033b2e3c9fd0803ce800000061213961221f8585613801565b60026b033b2e3c9fd0803ce8000000610ef3565b60006001600160a01b03821630141561224e575060016110b2565b6000546001600160a01b038381169116141561226c575060016110b2565b5060006110b2565b600c546000908061228484611bc6565b1561228e57600080fd5b83600c5414156122b6575050506000818152600b602052604081208054600c555560016110b2565b5b6000821180156122c75750838214155b156122e257506000818152600b6020526040902054906122b7565b8382146122f4576000925050506110b2565b6000848152600b602052604080822080549383529082209290925584815290555060019050919050565b61232782611760565b61233057600080fd5b600082815260026020526040812060038101546001909101546001600160a01b039182169291169083158061238257506000848152600260205260409020600101546001600160a01b03838116911614155b806123aa57506000848152600260205260409020600301546001600160a01b03848116911614155b806123bb57506123b984611bc6565b155b6123ce576123c98585613864565b6123d7565b6123d785613936565b9350831561240557506000838152600760205260408082206001018054908790558683529120849055612432565b506001600160a01b0381811660009081526008602090815260408083209386168352929052208054908590555b80156124565760008181526007602052604080822087905586825290206001018190555b6001600160a01b03808316600090815260096020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260026020908152604080832060038101546001909101546001600160a01b03908116808652600985528386209190921680865293529083205461250457600080fd5b600084815260076020526040902060020154158015612527575061252784611bc6565b61253057600080fd5b6001600160a01b0380821660009081526008602090815260408083209386168352929052205484146125a357600084815260076020526040808220548252902060010154841461257f57600080fd5b600084815260076020526040808220600180820154915484529190922001556125d9565b6000848152600760209081526040808320600101546001600160a01b038086168552600884528285209087168552909252909120555b6000848152600760205260409020600101541561263057600084815260076020526040808220600101548252902054841461261357600080fd5b600084815260076020526040808220805460019091015483529120555b6001600160a01b039081166000908152600960209081526040808320949093168252928352818120805460001901905593845260079091529091204360029091015550600190565b60008161268481611760565b6126bf5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b6126c7611b82565b806126eb57506126d681611ba8565b6001600160a01b0316336001600160a01b0316145b806126f75750600d5481145b6127325760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff161561274257600080fd5b6004805460ff19166001179055612757613a50565b600260008581526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a90046001600160401b03166001600160401b03166001600160401b0316815250509050600260008581526020019081526020016000206000808201600090556001820160006101000a8154906001600160a01b03021916905560028201600090556003820160006101000a8154906001600160a01b0302191690556004820160006101000a8154906001600160a01b0302191690556004820160146101000a8154906001600160401b030219169055505080602001516001600160a01b031663a9059cbb826080015183600001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505161297657600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808101516020808301805160608086018051604080516001600160601b031995851b8616818901529190931b9093166034840152815160288185030181526048840180845281519190960120935190518751838901516001600160a01b0393841690975290821660688501526001600160801b03908116608885015290941660a88301526001600160401b03421660c8830152519290931692909187917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b4819995919081900360e80190a450506004805460ff19169055506001919050565b600082612a9281611760565b612a9b57600080fd5b612aa3611b82565b15612aad57600080fd5b60045460ff1615612abd57600080fd5b6004805460ff19166001179055612ad2613a50565b506000848152600260208181526040808420815160c081018352815480825260018301546001600160a01b0390811695830195909552948201549281018390526003820154841660608201526004909101549283166080820152600160a01b9092046001600160401b031660a083015290929190612b51908790613801565b81612b5857fe5b04905080816001600160801b031614612bae576040805162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015290519081900360640190fd5b84856001600160801b031614612c04576040805162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015290519081900360640190fd5b841580612c0f575080155b80612c1a5750815185115b80612c285750816040015181115b15612c38576000935050506131bb565b6000612710612c4983600554613801565b81612c5057fe5b6060850151600654604080516323b872dd60e01b81523360048201526001600160a01b0392831660248201529490930460448501819052925192945016916323b872dd9160648083019260209291908290030181600087803b158015612cb557600080fd5b505af1158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051612d32576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015290519081900360640190fd5b8251612d3e9087612197565b6000888152600260205260409081902091909155830151612d5f9083612197565b6000888152600260208181526040808420909201939093556060860151608087015182516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810188905292519116936323b872dd936064808501949293928390030190829087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b5051612e3b5760405162461bcd60e51b8152600401808060200182810382526062815260200180613b5c6062913960800191505060405180910390fd5b6020808401516040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169263a9059cbb926044808401938290030181600087803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b505050506040513d6020811015612eb657600080fd5b5051612ef35760405162461bcd60e51b8152600401808060200182810382526033815260200180613a886033913960400191505060405180910390fd5b6040805188815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051948d90526001600160a01b03908116606884015293841660888301526001600160801b03808c1660a8840152871660c88301526001600160401b03421660e8830152513394909316927f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f918190036101080190a460808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051600654958e90526001600160a01b039182166068850152811660888401526001600160801b03808d1660a8850152881660c884015260e883018790529384166101088301526001600160401b034216610128830152513394909316927f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e2918190036101480190a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758885604051808381526020018281526020019250505060405180910390a36000878152600260205260409020546131b35760008781526002602081815260408084208481556001810180546001600160a01b031990811690915593810194909455600384018054909316909255600490920180546001600160e01b0319169055805189815290517f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def55676929181900390910190a15b600194505050505b506004805460ff1916905592915050565b600654600090600160a81b900460ff166131e557600080fd5b6000838152600260205260409020548214156132235761320483611bc6565b1561321857613212836124bd565b50613223565b61322183612274565b505b61322d8383612a86565b61323657600080fd5b61323f83611760565b80156132795750600083815260026020818152604080842060018101546001600160a01b03168552600a8352908420549387905291905254105b1561328e57600d83905561328c836110c7565b505b50600192915050565b60008060008060005b6001600160a01b038089166000908152600860209081526040808320938e1683529290522054156133df5750506001600160a01b038087166000908152600860209081526040808320938c16835292815282822054808352600291829052929091209081015490549193509085613318576000613320565b808b8a840101015b61332a8c83613801565b01613335838b613801565b1115613340576133df565b6133538461334e838c6139ba565b611ce3565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b985613380838c6139ba565b6040805192835260208301919091528051918290030190a18892506133ae896133a9838c6139ba565b612197565b9850826133bb8a8d613801565b816133c257fe5b049a508a15806133d0575088155b156133da576133df565b6132a0565b6000891180156133ef575060008b115b801561341357506001600160a01b038a166000908152600a60205260409020548b10155b15613430576134248b8b8b8b61343e565b9450613430858861231e565b505050509695505050505050565b6000613448611b82565b1561345257600080fd5b60045460ff161561346257600080fd5b6004805460ff19166001179055838261347a826139d1565b61348357600080fd5b61348c816139d1565b61349557600080fd5b86876001600160801b0316146134aa57600080fd5b84856001600160801b0316146134bf57600080fd5b600087116134cc57600080fd5b6001600160a01b0386166134df57600080fd5b600085116134ec57600080fd5b6001600160a01b0384166134ff57600080fd5b836001600160a01b0316866001600160a01b0316141561351e57600080fd5b613526613a50565b8781526001600160a01b03808816602083015260408201879052851660608201523360808201526001600160401b03421660a08201526135646139ef565b600081815260026020818152604080842086518155828701516001820180546001600160a01b039283166001600160a01b0319918216179091558389015195830195909555606088015160038301805491831691871691909117905560808801516004928301805460a08b01516001600160401b0316600160a01b0267ffffffffffffffff60a01b199385169190981617919091169590951790945581516323b872dd60e01b81523391810191909152306024820152604481018e90529051949850918b16936323b872dd936064808501948390030190829087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b505050506040513d602081101561367657600080fd5b505161368157600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516001600160601b031960608a811b82166020808501919091529089901b90911660348301528251602881840301815260488301808552815191909201206001600160a01b038b811690925290881660688301526001600160801b03808c166088840152891660a88301526001600160401b03421660c8830152915133929187917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360e80190a450506004805460ff1916905550949350505050565b6001600160a01b0383166000908152600a602052604081205485101561379c57600080fd5b6137a88585858561343e565b600c80546000838152600b60209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b600081158061381c5750508082028282828161381957fe5b04145b610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b600080831161387257600080fd5b8115801590613887575061388582611760565b155b156138a5576000918252600760205260409091206001015490613872565b816138ba576138b383613936565b9050610b82565b6138c483836139fc565b156138fe5760005b82158015906138e057506138e084846139fc565b156138b35750600082815260076020526040902060010154916138cc565b8115801590613914575061391283836139fc565b155b1561392f5760009182526007602052604090912054906138fe565b5080610b82565b600080821161394457600080fd5b600082815260026020908152604080832060038101546001909101546001600160a01b03908116808652600885528386209190921680865293529083205491929091905b811580159061399c575061399c86836139fc565b15610d94575060008181526007602052604090206001015490613988565b6000818311156139ca5781611220565b5090919050565b6001600160a01b031660009081526003602052604090205460ff1690565b6001805481019081905590565b60008181526002602081905260408083209091015484835290822054613a229190613801565b600084815260026020819052604080832090910154858352912054613a479190613801565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000a265627a7a723158207cc6f2603dc9d00f41b6466de743bd658e2563482ccb9f3cf861701ec4d595d664736f6c63430005100032",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061035d5760003560e01c80637ca9429a116101d3578063be71f5ce11610104578063d6febde8116100a2578063f09ea2a61161007c578063f09ea2a614610aab578063f46901ed14610ae7578063f582d29314610b0d578063ff1fd97414610b155761035d565b8063d6febde814610a1a578063e1a6f01414610a3d578063e43252d714610a855761035d565b8063c2d526aa116100de578063c2d526aa14610986578063c41a360a146109c1578063d2b420ce146109de578063d6f15469146109fb5761035d565b8063be71f5ce1461092c578063bf7c734e14610952578063c2b6b58c1461097e5761035d565b80638da5cb5b11610171578063943911bc1161014b578063943911bc146108b6578063a128171b146108d3578063a78d4316146108f2578063b4f9b6c81461090f5761035d565b80638da5cb5b1461086b578063911550f41461087357806391be90c8146108905761035d565b806385ee7ba6116101ad57806385ee7ba6146107a95780638a72ea6a146107d75780638ab1d6811461083d5780638af82a2e146108635761035d565b80637ca9429a146107245780638185402b1461075257806382afd23b1461078c5761035d565b806340e58ee5116102ad578063604b6a9c1161024b5780636b9d8c4b116102255780636b9d8c4b146106ad57806374c1d7d3146106d157806375f12b21146106ff578063779997c3146107075761035d565b8063604b6a9c1461064557806361f54a7914610662578063677170e11461067f5761035d565b8063496064551161028757806349606455146105c7578063511fa487146105f3578063557ed1ba1461061957806356ad87641461063d5761035d565b806340e58ee51461053f5780634579268a1461055c578063467f0b7b146105aa5761035d565b8063144a27521161031a5780631d834a1b116102f45780631d834a1b146104ed578063232cae0b146105105780632aed1905146105185780632f90a6fc146105375761035d565b8063144a27521461046f578063158ef93e146104a55780631b33d412146104ad5761035d565b806301492a0b146103625780630374fc6f1461037e5780630621b4f6146103be57806307da68f5146103f8578063093f51981461040257806313af403514610449575b600080fd5b61036a610b4b565b604080519115158252519081900360200190f35b6103ac6004803603604081101561039457600080fd5b506001600160a01b0381358116916020013516610b5b565b60408051918252519081900360200190f35b6103ac600480360360808110156103d457600080fd5b506001600160a01b0381358116916020810135916040820135169060600135610b88565b610400610d17565b005b6103ac6004803603608081101561041857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610d74565b6104006004803603602081101561045f57600080fd5b50356001600160a01b0316610d9d565b6103ac6004803603606081101561048557600080fd5b506001600160a01b03813581169160208101359091169060400135610e31565b61036a610ef9565b6103ac600480360360a08110156104c357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060800135610f09565b61036a6004803603604081101561050357600080fd5b5080359060200135610f36565b6103ac611003565b61036a6004803603602081101561052e57600080fd5b50351515611009565b61036a6110b7565b61036a6004803603602081101561055557600080fd5b50356110c7565b6105796004803603602081101561057257600080fd5b5035611227565b604080519485526001600160a01b039384166020860152848101929092529091166060830152519081900360800190f35b61036a600480360360208110156105c057600080fd5b50356112b4565b610400600480360360408110156105dd57600080fd5b50803590602001356001600160801b03166113b5565b6103ac6004803603602081101561060957600080fd5b50356001600160a01b03166113d5565b6106216113f0565b604080516001600160401b039092168252519081900360200190f35b6103ac6113f4565b61036a6004803603602081101561065b57600080fd5b50356113fa565b6103ac6004803603602081101561067857600080fd5b503561144d565b6103ac6004803603604081101561069557600080fd5b506001600160a01b038135811691602001351661145f565b6106b561147c565b604080516001600160a01b039092168252519081900360200190f35b6103ac600480360360408110156106e757600080fd5b506001600160a01b038135811691602001351661148b565b61036a6114a8565b6104006004803603602081101561071d57600080fd5b50356114b8565b6103ac6004803603604081101561073a57600080fd5b506001600160a01b03813581169160200135166115c5565b6103ac6004803603608081101561076857600080fd5b506001600160a01b03813581169160208101359160408201351690606001356115f0565b61036a600480360360208110156107a257600080fd5b5035611760565b610400600480360360408110156107bf57600080fd5b508035151590602001356001600160a01b0316611787565b6107f4600480360360208110156107ed57600080fd5b5035611869565b604080519687526001600160a01b03958616602088015286810194909452918416606086015290921660808401526001600160401b0390911660a0830152519081900360c00190f35b6104006004803603602081101561085357600080fd5b50356001600160a01b03166118bb565b6103ac611924565b6106b561192a565b6103ac6004803603602081101561088957600080fd5b5035611939565b6103ac600480360360208110156108a657600080fd5b50356001600160a01b031661194b565b6103ac600480360360208110156108cc57600080fd5b503561195d565b61036a600480360360208110156108e957600080fd5b50351515611972565b6103ac6004803603602081101561090857600080fd5b50356119dd565b6104006004803603602081101561092557600080fd5b50356119ef565b61036a6004803603602081101561094257600080fd5b50356001600160a01b0316611a04565b61036a6004803603604081101561096857600080fd5b506001600160a01b038135169060200135611a73565b61036a611b82565b6109a36004803603602081101561099c57600080fd5b5035611b87565b60408051938452602084019290925282820152519081900360600190f35b6106b5600480360360208110156109d757600080fd5b5035611ba8565b61036a600480360360208110156109f457600080fd5b5035611bc6565b61036a60048036036020811015610a1157600080fd5b50351515611c36565b61036a60048036036040811015610a3057600080fd5b5080359060200135611ce3565b6103ac600480360360c0811015610a5357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515611e2e565b61040060048036036020811015610a9b57600080fd5b50356001600160a01b0316611ef2565b6103ac60048036036080811015610ac157600080fd5b508035906001600160a01b03602082013581169160408101359160609091013516611f5e565b61036a60048036036020811015610afd57600080fd5b50356001600160a01b0316611fe1565b61036a612050565b6103ac60048036036060811015610b2b57600080fd5b506001600160a01b03813581169160208101359091169060400135612060565b600654600160b01b900460ff1681565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b60045460009060ff1615610bd8576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415610d0157610beb8487610b5b565b905080610bf757600080fd5b6000818152600260208190526040909120908101549054610c189190612119565b85670de0b6b3a7640000021015610c2e57610d01565b600081815260026020819052604090912001548510610ca557600081815260026020526040902054610c61908390612148565b9150610c83856002600084815260200190815260200160002060020154612197565b600082815260026020526040902054909550610ca09082906113b5565b610cfc565b600081815260026020819052604082208054910154633b9aca0091610cd69189840291610cd1916121e7565b612203565b81610cdd57fe5b049050610cea8382612148565b9250610cf682826113b5565b60009550505b610bdb565b82821015610d0e57600080fd5b50949350505050565b610d2033612233565b610d5f576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b179055565b6000610d94836001600160801b031686846001600160801b031687611f5e565b95945050505050565b610da633612233565b610de5576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a250565b600080610e3e8585610b5b565b90505b60008181526002602081905260409091200154831115610eb957600081815260026020526040902054610e75908390612148565b9150610e97836002600084815260200190815260200160002060020154612197565b92508215610eb457610ea88161195d565b905080610eb457600080fd5b610e41565b60008181526002602081905260409091208054910154610d94918491633b9aca0091610eec9188840291610cd1916121e7565b81610ef357fe5b04612148565b600e54600160a81b900460ff1681565b6000610f13611b82565b15610f1d57600080fd5b610f2c86868686866001611e2e565b9695505050505050565b60045460009060ff1615610f86576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b610f8f83611bc6565b15610f9957600080fd5b610fa283611760565b610fab57600080fd5b610fb483612274565b50610fbf838361231e565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60015481565b600061101433612233565b611053576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160b01b90810260ff60b01b199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a15060015b919050565b600e54600160a01b900460ff1681565b6000816110d381611760565b61110e5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b611116611b82565b8061113a575061112581611ba8565b6001600160a01b0316336001600160a01b0316145b806111465750600d5481145b6111815760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff16156111ce576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654600160b01b900460ff1615611217576111e983611bc6565b15611205576111f7836124bd565b61120057600080fd5b611217565b61120e83612274565b61121757600080fd5b61122083612678565b9392505050565b600080600080611235613a50565b5050506000928352505060026020818152604092839020835160c081018552815480825260018301546001600160a01b039081169483018590529483015495820186905260038301548516606083018190526004909301549485166080830152600160a01b9094046001600160401b031660a090910152919390929190565b60045460009060ff1615611304576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b61130d82611760565b15801561132a575060008281526007602052604090206002015415155b801561134a57506000828152600760205260409020600201546009194301115b61135357600080fd5b60008281526007602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b6113c8826001600160801b038316611ce3565b6113d157600080fd5b5050565b6001600160a01b03166000908152600a602052604090205490565b4290565b600d5481565b600061140533612233565b611444576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600555600190565b6000908152600b602052604090205490565b600960209081526000928352604080842090915290825290205481565b600e546001600160a01b031681565b600860209081526000928352604080842090915290825290205481565b600654600160a01b900460ff1681565b806114c281611760565b6114cb57600080fd5b6114d3611b82565b156114dd57600080fd5b600082815260026020818152604080842060048101546001820154600383015484516001600160601b0319606084811b8216838a015283901b1660348201528551602881830301815260488201808852815191890191909120998c905296889052845494909701546001600160a01b03928316909652811660688701526001600160801b0392831660888701529190931660a88501526001600160401b03600160a01b84041660c8850152905186949190921692909184917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360e80190a4505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b60045460009060ff1615611640576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415611753576116538685610b5b565b90508061165f57600080fd5b6000818152600260208190526040909120805491015461167f9190612119565b85670de0b6b3a764000002101561169557611753565b6000818152600260205260409020548510611709576116ca826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506116e7908690612197565b6000828152600260205260409020549095506117049082906113b5565b61174e565b600081815260026020819052604090912090810154905461173d918491633b9aca0091610eec918a840291610cd1916121e7565b915061174981866113b5565b600094505b611643565b82821115610d0e57600080fd5b600090815260026020526040902060040154600160a01b90046001600160401b0316151590565b600e54600160a81b900460ff16156117e6576040805162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600e805460ff60a01b1916600160a01b84151502179055600680546001600160a01b03199081166001600160a01b0384161790915560008054339216821781556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed949190a250506014600555600e805460ff60a81b1916600160a81b179055565b60026020819052600091825260409091208054600182015492820154600383015460049093015491936001600160a01b039081169391929181169190811690600160a01b90046001600160401b031686565b6118c433612233565b611903576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19169055565b600c5490565b6000546001600160a01b031681565b60009081526007602052604090205490565b600a6020526000908152604090205481565b60009081526007602052604090206001015490565b600061197d33612233565b6119bc576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e8054821515600160a01b0260ff60a01b199091161790556001919050565b600b6020526000908152604090205481565b6119f8816110c7565b611a0157600080fd5b50565b6000611a0f33612233565b611a4e576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0383166001600160a01b03199091161790556001919050565b6000611a7e33612233565b611abd576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a46001600160a01b0386166000818152600a60209081526040918290208890558151928352820187905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a150600195945050505050565b600090565b60076020526000908152604090208054600182015460029092015490919083565b6000908152600260205260409020600401546001600160a01b031690565b600081815260076020526040812054151580611bf2575060008281526007602052604090206001015415155b80610b82575050600081815260026020908152604080832060018101546001600160a01b039081168552600884528285206003909201541684529091529020541490565b6000611c4133612233565b611c80576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160a81b90810260ff60a81b199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b600082611cef81611760565b611cf857600080fd5b611d00611b82565b15611d0a57600080fd5b60045460ff1615611d57576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600e54600160a01b900460ff1615611dfd57600e546001600160a01b031663b30ed7b3611d8386611ba8565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301523360248301525160448083019260209291908290030181600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50505b600654613a8590600160b01b900460ff16611e1a57612a86611e1e565b6131cc5b9050610d9485858363ffffffff16565b6000611e38611b82565b15611e4257600080fd5b60045460ff1615611e8f576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902054871015611eb457600080fd5b600654600160b01b900460ff1615611edb57611ed4878787878787613297565b9050610f2c565b611ee78787878761343e565b979650505050505050565b611efb33612233565b611f3a576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b60045460009060ff1615611fae576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654613a8590600160b01b900460ff16611fcb5761343e611fcf565b6137775b9050610f2c868686868563ffffffff16565b6000611fec33612233565b61202b576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600680546001600160a01b0383166001600160a01b03199091161790556001919050565b600654600160a81b900460ff1681565b60008061206d8486610b5b565b90505b6000818152600260205260409020548311156120e5576120a6826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506120c3908490612197565b925082156120e0576120d48161195d565b9050806120e057600080fd5b612070565b6000818152600260208190526040909120908101549054610d94918491633b9aca0091610eec9188840291610cd1916121e7565b60008161213961213185670de0b6b3a7640000613801565b600285610ef3565b8161214057fe5b049392505050565b80820182811015610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b82576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b600081612139612131856b033b2e3c9fd0803ce8000000613801565b60006b033b2e3c9fd0803ce800000061213961221f8585613801565b60026b033b2e3c9fd0803ce8000000610ef3565b60006001600160a01b03821630141561224e575060016110b2565b6000546001600160a01b038381169116141561226c575060016110b2565b5060006110b2565b600c546000908061228484611bc6565b1561228e57600080fd5b83600c5414156122b6575050506000818152600b602052604081208054600c555560016110b2565b5b6000821180156122c75750838214155b156122e257506000818152600b6020526040902054906122b7565b8382146122f4576000925050506110b2565b6000848152600b602052604080822080549383529082209290925584815290555060019050919050565b61232782611760565b61233057600080fd5b600082815260026020526040812060038101546001909101546001600160a01b039182169291169083158061238257506000848152600260205260409020600101546001600160a01b03838116911614155b806123aa57506000848152600260205260409020600301546001600160a01b03848116911614155b806123bb57506123b984611bc6565b155b6123ce576123c98585613864565b6123d7565b6123d785613936565b9350831561240557506000838152600760205260408082206001018054908790558683529120849055612432565b506001600160a01b0381811660009081526008602090815260408083209386168352929052208054908590555b80156124565760008181526007602052604080822087905586825290206001018190555b6001600160a01b03808316600090815260096020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260026020908152604080832060038101546001909101546001600160a01b03908116808652600985528386209190921680865293529083205461250457600080fd5b600084815260076020526040902060020154158015612527575061252784611bc6565b61253057600080fd5b6001600160a01b0380821660009081526008602090815260408083209386168352929052205484146125a357600084815260076020526040808220548252902060010154841461257f57600080fd5b600084815260076020526040808220600180820154915484529190922001556125d9565b6000848152600760209081526040808320600101546001600160a01b038086168552600884528285209087168552909252909120555b6000848152600760205260409020600101541561263057600084815260076020526040808220600101548252902054841461261357600080fd5b600084815260076020526040808220805460019091015483529120555b6001600160a01b039081166000908152600960209081526040808320949093168252928352818120805460001901905593845260079091529091204360029091015550600190565b60008161268481611760565b6126bf5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b6126c7611b82565b806126eb57506126d681611ba8565b6001600160a01b0316336001600160a01b0316145b806126f75750600d5481145b6127325760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff161561274257600080fd5b6004805460ff19166001179055612757613a50565b600260008581526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a90046001600160401b03166001600160401b03166001600160401b0316815250509050600260008581526020019081526020016000206000808201600090556001820160006101000a8154906001600160a01b03021916905560028201600090556003820160006101000a8154906001600160a01b0302191690556004820160006101000a8154906001600160a01b0302191690556004820160146101000a8154906001600160401b030219169055505080602001516001600160a01b031663a9059cbb826080015183600001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505161297657600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808101516020808301805160608086018051604080516001600160601b031995851b8616818901529190931b9093166034840152815160288185030181526048840180845281519190960120935190518751838901516001600160a01b0393841690975290821660688501526001600160801b03908116608885015290941660a88301526001600160401b03421660c8830152519290931692909187917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b4819995919081900360e80190a450506004805460ff19169055506001919050565b600082612a9281611760565b612a9b57600080fd5b612aa3611b82565b15612aad57600080fd5b60045460ff1615612abd57600080fd5b6004805460ff19166001179055612ad2613a50565b506000848152600260208181526040808420815160c081018352815480825260018301546001600160a01b0390811695830195909552948201549281018390526003820154841660608201526004909101549283166080820152600160a01b9092046001600160401b031660a083015290929190612b51908790613801565b81612b5857fe5b04905080816001600160801b031614612bae576040805162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015290519081900360640190fd5b84856001600160801b031614612c04576040805162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015290519081900360640190fd5b841580612c0f575080155b80612c1a5750815185115b80612c285750816040015181115b15612c38576000935050506131bb565b6000612710612c4983600554613801565b81612c5057fe5b6060850151600654604080516323b872dd60e01b81523360048201526001600160a01b0392831660248201529490930460448501819052925192945016916323b872dd9160648083019260209291908290030181600087803b158015612cb557600080fd5b505af1158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051612d32576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015290519081900360640190fd5b8251612d3e9087612197565b6000888152600260205260409081902091909155830151612d5f9083612197565b6000888152600260208181526040808420909201939093556060860151608087015182516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810188905292519116936323b872dd936064808501949293928390030190829087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b5051612e3b5760405162461bcd60e51b8152600401808060200182810382526062815260200180613b5c6062913960800191505060405180910390fd5b6020808401516040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169263a9059cbb926044808401938290030181600087803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b505050506040513d6020811015612eb657600080fd5b5051612ef35760405162461bcd60e51b8152600401808060200182810382526033815260200180613a886033913960400191505060405180910390fd5b6040805188815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051948d90526001600160a01b03908116606884015293841660888301526001600160801b03808c1660a8840152871660c88301526001600160401b03421660e8830152513394909316927f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f918190036101080190a460808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051600654958e90526001600160a01b039182166068850152811660888401526001600160801b03808d1660a8850152881660c884015260e883018790529384166101088301526001600160401b034216610128830152513394909316927f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e2918190036101480190a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758885604051808381526020018281526020019250505060405180910390a36000878152600260205260409020546131b35760008781526002602081815260408084208481556001810180546001600160a01b031990811690915593810194909455600384018054909316909255600490920180546001600160e01b0319169055805189815290517f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def55676929181900390910190a15b600194505050505b506004805460ff1916905592915050565b600654600090600160a81b900460ff166131e557600080fd5b6000838152600260205260409020548214156132235761320483611bc6565b1561321857613212836124bd565b50613223565b61322183612274565b505b61322d8383612a86565b61323657600080fd5b61323f83611760565b80156132795750600083815260026020818152604080842060018101546001600160a01b03168552600a8352908420549387905291905254105b1561328e57600d83905561328c836110c7565b505b50600192915050565b60008060008060005b6001600160a01b038089166000908152600860209081526040808320938e1683529290522054156133df5750506001600160a01b038087166000908152600860209081526040808320938c16835292815282822054808352600291829052929091209081015490549193509085613318576000613320565b808b8a840101015b61332a8c83613801565b01613335838b613801565b1115613340576133df565b6133538461334e838c6139ba565b611ce3565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b985613380838c6139ba565b6040805192835260208301919091528051918290030190a18892506133ae896133a9838c6139ba565b612197565b9850826133bb8a8d613801565b816133c257fe5b049a508a15806133d0575088155b156133da576133df565b6132a0565b6000891180156133ef575060008b115b801561341357506001600160a01b038a166000908152600a60205260409020548b10155b15613430576134248b8b8b8b61343e565b9450613430858861231e565b505050509695505050505050565b6000613448611b82565b1561345257600080fd5b60045460ff161561346257600080fd5b6004805460ff19166001179055838261347a826139d1565b61348357600080fd5b61348c816139d1565b61349557600080fd5b86876001600160801b0316146134aa57600080fd5b84856001600160801b0316146134bf57600080fd5b600087116134cc57600080fd5b6001600160a01b0386166134df57600080fd5b600085116134ec57600080fd5b6001600160a01b0384166134ff57600080fd5b836001600160a01b0316866001600160a01b0316141561351e57600080fd5b613526613a50565b8781526001600160a01b03808816602083015260408201879052851660608201523360808201526001600160401b03421660a08201526135646139ef565b600081815260026020818152604080842086518155828701516001820180546001600160a01b039283166001600160a01b0319918216179091558389015195830195909555606088015160038301805491831691871691909117905560808801516004928301805460a08b01516001600160401b0316600160a01b0267ffffffffffffffff60a01b199385169190981617919091169590951790945581516323b872dd60e01b81523391810191909152306024820152604481018e90529051949850918b16936323b872dd936064808501948390030190829087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b505050506040513d602081101561367657600080fd5b505161368157600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516001600160601b031960608a811b82166020808501919091529089901b90911660348301528251602881840301815260488301808552815191909201206001600160a01b038b811690925290881660688301526001600160801b03808c166088840152891660a88301526001600160401b03421660c8830152915133929187917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360e80190a450506004805460ff1916905550949350505050565b6001600160a01b0383166000908152600a602052604081205485101561379c57600080fd5b6137a88585858561343e565b600c80546000838152600b60209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b600081158061381c5750508082028282828161381957fe5b04145b610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b600080831161387257600080fd5b8115801590613887575061388582611760565b155b156138a5576000918252600760205260409091206001015490613872565b816138ba576138b383613936565b9050610b82565b6138c483836139fc565b156138fe5760005b82158015906138e057506138e084846139fc565b156138b35750600082815260076020526040902060010154916138cc565b8115801590613914575061391283836139fc565b155b1561392f5760009182526007602052604090912054906138fe565b5080610b82565b600080821161394457600080fd5b600082815260026020908152604080832060038101546001909101546001600160a01b03908116808652600885528386209190921680865293529083205491929091905b811580159061399c575061399c86836139fc565b15610d94575060008181526007602052604090206001015490613988565b6000818311156139ca5781611220565b5090919050565b6001600160a01b031660009081526003602052604090205460ff1690565b6001805481019081905590565b60008181526002602081905260408083209091015484835290822054613a229190613801565b600084815260026020819052604080832090910154858352912054613a479190613801565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000a265627a7a723158207cc6f2603dc9d00f41b6466de743bd658e2563482ccb9f3cf861701ec4d595d664736f6c63430005100032",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "details": "This contract inherits the key trading functionality from SimpleMarket",
        "methods": {}
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "60806040526006805460ff60b01b1960ff60a81b19909116600160a81b1716600160b01b17905534801561003257600080fd5b50613c12806100426000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80637ca9429a116101d3578063be71f5ce11610104578063d6febde8116100a2578063f09ea2a61161007c578063f09ea2a614610aab578063f46901ed14610ae7578063f582d29314610b0d578063ff1fd97414610b155761035d565b8063d6febde814610a1a578063e1a6f01414610a3d578063e43252d714610a855761035d565b8063c2d526aa116100de578063c2d526aa14610986578063c41a360a146109c1578063d2b420ce146109de578063d6f15469146109fb5761035d565b8063be71f5ce1461092c578063bf7c734e14610952578063c2b6b58c1461097e5761035d565b80638da5cb5b11610171578063943911bc1161014b578063943911bc146108b6578063a128171b146108d3578063a78d4316146108f2578063b4f9b6c81461090f5761035d565b80638da5cb5b1461086b578063911550f41461087357806391be90c8146108905761035d565b806385ee7ba6116101ad57806385ee7ba6146107a95780638a72ea6a146107d75780638ab1d6811461083d5780638af82a2e146108635761035d565b80637ca9429a146107245780638185402b1461075257806382afd23b1461078c5761035d565b806340e58ee5116102ad578063604b6a9c1161024b5780636b9d8c4b116102255780636b9d8c4b146106ad57806374c1d7d3146106d157806375f12b21146106ff578063779997c3146107075761035d565b8063604b6a9c1461064557806361f54a7914610662578063677170e11461067f5761035d565b8063496064551161028757806349606455146105c7578063511fa487146105f3578063557ed1ba1461061957806356ad87641461063d5761035d565b806340e58ee51461053f5780634579268a1461055c578063467f0b7b146105aa5761035d565b8063144a27521161031a5780631d834a1b116102f45780631d834a1b146104ed578063232cae0b146105105780632aed1905146105185780632f90a6fc146105375761035d565b8063144a27521461046f578063158ef93e146104a55780631b33d412146104ad5761035d565b806301492a0b146103625780630374fc6f1461037e5780630621b4f6146103be57806307da68f5146103f8578063093f51981461040257806313af403514610449575b600080fd5b61036a610b4b565b604080519115158252519081900360200190f35b6103ac6004803603604081101561039457600080fd5b506001600160a01b0381358116916020013516610b5b565b60408051918252519081900360200190f35b6103ac600480360360808110156103d457600080fd5b506001600160a01b0381358116916020810135916040820135169060600135610b88565b610400610d17565b005b6103ac6004803603608081101561041857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610d74565b6104006004803603602081101561045f57600080fd5b50356001600160a01b0316610d9d565b6103ac6004803603606081101561048557600080fd5b506001600160a01b03813581169160208101359091169060400135610e31565b61036a610ef9565b6103ac600480360360a08110156104c357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060800135610f09565b61036a6004803603604081101561050357600080fd5b5080359060200135610f36565b6103ac611003565b61036a6004803603602081101561052e57600080fd5b50351515611009565b61036a6110b7565b61036a6004803603602081101561055557600080fd5b50356110c7565b6105796004803603602081101561057257600080fd5b5035611227565b604080519485526001600160a01b039384166020860152848101929092529091166060830152519081900360800190f35b61036a600480360360208110156105c057600080fd5b50356112b4565b610400600480360360408110156105dd57600080fd5b50803590602001356001600160801b03166113b5565b6103ac6004803603602081101561060957600080fd5b50356001600160a01b03166113d5565b6106216113f0565b604080516001600160401b039092168252519081900360200190f35b6103ac6113f4565b61036a6004803603602081101561065b57600080fd5b50356113fa565b6103ac6004803603602081101561067857600080fd5b503561144d565b6103ac6004803603604081101561069557600080fd5b506001600160a01b038135811691602001351661145f565b6106b561147c565b604080516001600160a01b039092168252519081900360200190f35b6103ac600480360360408110156106e757600080fd5b506001600160a01b038135811691602001351661148b565b61036a6114a8565b6104006004803603602081101561071d57600080fd5b50356114b8565b6103ac6004803603604081101561073a57600080fd5b506001600160a01b03813581169160200135166115c5565b6103ac6004803603608081101561076857600080fd5b506001600160a01b03813581169160208101359160408201351690606001356115f0565b61036a600480360360208110156107a257600080fd5b5035611760565b610400600480360360408110156107bf57600080fd5b508035151590602001356001600160a01b0316611787565b6107f4600480360360208110156107ed57600080fd5b5035611869565b604080519687526001600160a01b03958616602088015286810194909452918416606086015290921660808401526001600160401b0390911660a0830152519081900360c00190f35b6104006004803603602081101561085357600080fd5b50356001600160a01b03166118bb565b6103ac611924565b6106b561192a565b6103ac6004803603602081101561088957600080fd5b5035611939565b6103ac600480360360208110156108a657600080fd5b50356001600160a01b031661194b565b6103ac600480360360208110156108cc57600080fd5b503561195d565b61036a600480360360208110156108e957600080fd5b50351515611972565b6103ac6004803603602081101561090857600080fd5b50356119dd565b6104006004803603602081101561092557600080fd5b50356119ef565b61036a6004803603602081101561094257600080fd5b50356001600160a01b0316611a04565b61036a6004803603604081101561096857600080fd5b506001600160a01b038135169060200135611a73565b61036a611b82565b6109a36004803603602081101561099c57600080fd5b5035611b87565b60408051938452602084019290925282820152519081900360600190f35b6106b5600480360360208110156109d757600080fd5b5035611ba8565b61036a600480360360208110156109f457600080fd5b5035611bc6565b61036a60048036036020811015610a1157600080fd5b50351515611c36565b61036a60048036036040811015610a3057600080fd5b5080359060200135611ce3565b6103ac600480360360c0811015610a5357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515611e2e565b61040060048036036020811015610a9b57600080fd5b50356001600160a01b0316611ef2565b6103ac60048036036080811015610ac157600080fd5b508035906001600160a01b03602082013581169160408101359160609091013516611f5e565b61036a60048036036020811015610afd57600080fd5b50356001600160a01b0316611fe1565b61036a612050565b6103ac60048036036060811015610b2b57600080fd5b506001600160a01b03813581169160208101359091169060400135612060565b600654600160b01b900460ff1681565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b60045460009060ff1615610bd8576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415610d0157610beb8487610b5b565b905080610bf757600080fd5b6000818152600260208190526040909120908101549054610c189190612119565b85670de0b6b3a7640000021015610c2e57610d01565b600081815260026020819052604090912001548510610ca557600081815260026020526040902054610c61908390612148565b9150610c83856002600084815260200190815260200160002060020154612197565b600082815260026020526040902054909550610ca09082906113b5565b610cfc565b600081815260026020819052604082208054910154633b9aca0091610cd69189840291610cd1916121e7565b612203565b81610cdd57fe5b049050610cea8382612148565b9250610cf682826113b5565b60009550505b610bdb565b82821015610d0e57600080fd5b50949350505050565b610d2033612233565b610d5f576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b179055565b6000610d94836001600160801b031686846001600160801b031687611f5e565b95945050505050565b610da633612233565b610de5576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a250565b600080610e3e8585610b5b565b90505b60008181526002602081905260409091200154831115610eb957600081815260026020526040902054610e75908390612148565b9150610e97836002600084815260200190815260200160002060020154612197565b92508215610eb457610ea88161195d565b905080610eb457600080fd5b610e41565b60008181526002602081905260409091208054910154610d94918491633b9aca0091610eec9188840291610cd1916121e7565b81610ef357fe5b04612148565b600e54600160a81b900460ff1681565b6000610f13611b82565b15610f1d57600080fd5b610f2c86868686866001611e2e565b9695505050505050565b60045460009060ff1615610f86576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b610f8f83611bc6565b15610f9957600080fd5b610fa283611760565b610fab57600080fd5b610fb483612274565b50610fbf838361231e565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60015481565b600061101433612233565b611053576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160b01b90810260ff60b01b199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a15060015b919050565b600e54600160a01b900460ff1681565b6000816110d381611760565b61110e5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b611116611b82565b8061113a575061112581611ba8565b6001600160a01b0316336001600160a01b0316145b806111465750600d5481145b6111815760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff16156111ce576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654600160b01b900460ff1615611217576111e983611bc6565b15611205576111f7836124bd565b61120057600080fd5b611217565b61120e83612274565b61121757600080fd5b61122083612678565b9392505050565b600080600080611235613a50565b5050506000928352505060026020818152604092839020835160c081018552815480825260018301546001600160a01b039081169483018590529483015495820186905260038301548516606083018190526004909301549485166080830152600160a01b9094046001600160401b031660a090910152919390929190565b60045460009060ff1615611304576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b61130d82611760565b15801561132a575060008281526007602052604090206002015415155b801561134a57506000828152600760205260409020600201546009194301115b61135357600080fd5b60008281526007602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b6113c8826001600160801b038316611ce3565b6113d157600080fd5b5050565b6001600160a01b03166000908152600a602052604090205490565b4290565b600d5481565b600061140533612233565b611444576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600555600190565b6000908152600b602052604090205490565b600960209081526000928352604080842090915290825290205481565b600e546001600160a01b031681565b600860209081526000928352604080842090915290825290205481565b600654600160a01b900460ff1681565b806114c281611760565b6114cb57600080fd5b6114d3611b82565b156114dd57600080fd5b600082815260026020818152604080842060048101546001820154600383015484516001600160601b0319606084811b8216838a015283901b1660348201528551602881830301815260488201808852815191890191909120998c905296889052845494909701546001600160a01b03928316909652811660688701526001600160801b0392831660888701529190931660a88501526001600160401b03600160a01b84041660c8850152905186949190921692909184917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360e80190a4505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b60045460009060ff1615611640576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415611753576116538685610b5b565b90508061165f57600080fd5b6000818152600260208190526040909120805491015461167f9190612119565b85670de0b6b3a764000002101561169557611753565b6000818152600260205260409020548510611709576116ca826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506116e7908690612197565b6000828152600260205260409020549095506117049082906113b5565b61174e565b600081815260026020819052604090912090810154905461173d918491633b9aca0091610eec918a840291610cd1916121e7565b915061174981866113b5565b600094505b611643565b82821115610d0e57600080fd5b600090815260026020526040902060040154600160a01b90046001600160401b0316151590565b600e54600160a81b900460ff16156117e6576040805162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600e805460ff60a01b1916600160a01b84151502179055600680546001600160a01b03199081166001600160a01b0384161790915560008054339216821781556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed949190a250506014600555600e805460ff60a81b1916600160a81b179055565b60026020819052600091825260409091208054600182015492820154600383015460049093015491936001600160a01b039081169391929181169190811690600160a01b90046001600160401b031686565b6118c433612233565b611903576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19169055565b600c5490565b6000546001600160a01b031681565b60009081526007602052604090205490565b600a6020526000908152604090205481565b60009081526007602052604090206001015490565b600061197d33612233565b6119bc576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e8054821515600160a01b0260ff60a01b199091161790556001919050565b600b6020526000908152604090205481565b6119f8816110c7565b611a0157600080fd5b50565b6000611a0f33612233565b611a4e576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0383166001600160a01b03199091161790556001919050565b6000611a7e33612233565b611abd576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a46001600160a01b0386166000818152600a60209081526040918290208890558151928352820187905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a150600195945050505050565b600090565b60076020526000908152604090208054600182015460029092015490919083565b6000908152600260205260409020600401546001600160a01b031690565b600081815260076020526040812054151580611bf2575060008281526007602052604090206001015415155b80610b82575050600081815260026020908152604080832060018101546001600160a01b039081168552600884528285206003909201541684529091529020541490565b6000611c4133612233565b611c80576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160a81b90810260ff60a81b199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b600082611cef81611760565b611cf857600080fd5b611d00611b82565b15611d0a57600080fd5b60045460ff1615611d57576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600e54600160a01b900460ff1615611dfd57600e546001600160a01b031663b30ed7b3611d8386611ba8565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301523360248301525160448083019260209291908290030181600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50505b600654613a8590600160b01b900460ff16611e1a57612a86611e1e565b6131cc5b9050610d9485858363ffffffff16565b6000611e38611b82565b15611e4257600080fd5b60045460ff1615611e8f576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902054871015611eb457600080fd5b600654600160b01b900460ff1615611edb57611ed4878787878787613297565b9050610f2c565b611ee78787878761343e565b979650505050505050565b611efb33612233565b611f3a576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b60045460009060ff1615611fae576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654613a8590600160b01b900460ff16611fcb5761343e611fcf565b6137775b9050610f2c868686868563ffffffff16565b6000611fec33612233565b61202b576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600680546001600160a01b0383166001600160a01b03199091161790556001919050565b600654600160a81b900460ff1681565b60008061206d8486610b5b565b90505b6000818152600260205260409020548311156120e5576120a6826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506120c3908490612197565b925082156120e0576120d48161195d565b9050806120e057600080fd5b612070565b6000818152600260208190526040909120908101549054610d94918491633b9aca0091610eec9188840291610cd1916121e7565b60008161213961213185670de0b6b3a7640000613801565b600285610ef3565b8161214057fe5b049392505050565b80820182811015610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b82576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b600081612139612131856b033b2e3c9fd0803ce8000000613801565b60006b033b2e3c9fd0803ce800000061213961221f8585613801565b60026b033b2e3c9fd0803ce8000000610ef3565b60006001600160a01b03821630141561224e575060016110b2565b6000546001600160a01b038381169116141561226c575060016110b2565b5060006110b2565b600c546000908061228484611bc6565b1561228e57600080fd5b83600c5414156122b6575050506000818152600b602052604081208054600c555560016110b2565b5b6000821180156122c75750838214155b156122e257506000818152600b6020526040902054906122b7565b8382146122f4576000925050506110b2565b6000848152600b602052604080822080549383529082209290925584815290555060019050919050565b61232782611760565b61233057600080fd5b600082815260026020526040812060038101546001909101546001600160a01b039182169291169083158061238257506000848152600260205260409020600101546001600160a01b03838116911614155b806123aa57506000848152600260205260409020600301546001600160a01b03848116911614155b806123bb57506123b984611bc6565b155b6123ce576123c98585613864565b6123d7565b6123d785613936565b9350831561240557506000838152600760205260408082206001018054908790558683529120849055612432565b506001600160a01b0381811660009081526008602090815260408083209386168352929052208054908590555b80156124565760008181526007602052604080822087905586825290206001018190555b6001600160a01b03808316600090815260096020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260026020908152604080832060038101546001909101546001600160a01b03908116808652600985528386209190921680865293529083205461250457600080fd5b600084815260076020526040902060020154158015612527575061252784611bc6565b61253057600080fd5b6001600160a01b0380821660009081526008602090815260408083209386168352929052205484146125a357600084815260076020526040808220548252902060010154841461257f57600080fd5b600084815260076020526040808220600180820154915484529190922001556125d9565b6000848152600760209081526040808320600101546001600160a01b038086168552600884528285209087168552909252909120555b6000848152600760205260409020600101541561263057600084815260076020526040808220600101548252902054841461261357600080fd5b600084815260076020526040808220805460019091015483529120555b6001600160a01b039081166000908152600960209081526040808320949093168252928352818120805460001901905593845260079091529091204360029091015550600190565b60008161268481611760565b6126bf5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b6126c7611b82565b806126eb57506126d681611ba8565b6001600160a01b0316336001600160a01b0316145b806126f75750600d5481145b6127325760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff161561274257600080fd5b6004805460ff19166001179055612757613a50565b600260008581526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a90046001600160401b03166001600160401b03166001600160401b0316815250509050600260008581526020019081526020016000206000808201600090556001820160006101000a8154906001600160a01b03021916905560028201600090556003820160006101000a8154906001600160a01b0302191690556004820160006101000a8154906001600160a01b0302191690556004820160146101000a8154906001600160401b030219169055505080602001516001600160a01b031663a9059cbb826080015183600001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505161297657600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808101516020808301805160608086018051604080516001600160601b031995851b8616818901529190931b9093166034840152815160288185030181526048840180845281519190960120935190518751838901516001600160a01b0393841690975290821660688501526001600160801b03908116608885015290941660a88301526001600160401b03421660c8830152519290931692909187917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b4819995919081900360e80190a450506004805460ff19169055506001919050565b600082612a9281611760565b612a9b57600080fd5b612aa3611b82565b15612aad57600080fd5b60045460ff1615612abd57600080fd5b6004805460ff19166001179055612ad2613a50565b506000848152600260208181526040808420815160c081018352815480825260018301546001600160a01b0390811695830195909552948201549281018390526003820154841660608201526004909101549283166080820152600160a01b9092046001600160401b031660a083015290929190612b51908790613801565b81612b5857fe5b04905080816001600160801b031614612bae576040805162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015290519081900360640190fd5b84856001600160801b031614612c04576040805162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015290519081900360640190fd5b841580612c0f575080155b80612c1a5750815185115b80612c285750816040015181115b15612c38576000935050506131bb565b6000612710612c4983600554613801565b81612c5057fe5b6060850151600654604080516323b872dd60e01b81523360048201526001600160a01b0392831660248201529490930460448501819052925192945016916323b872dd9160648083019260209291908290030181600087803b158015612cb557600080fd5b505af1158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051612d32576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015290519081900360640190fd5b8251612d3e9087612197565b6000888152600260205260409081902091909155830151612d5f9083612197565b6000888152600260208181526040808420909201939093556060860151608087015182516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810188905292519116936323b872dd936064808501949293928390030190829087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b5051612e3b5760405162461bcd60e51b8152600401808060200182810382526062815260200180613b5c6062913960800191505060405180910390fd5b6020808401516040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169263a9059cbb926044808401938290030181600087803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b505050506040513d6020811015612eb657600080fd5b5051612ef35760405162461bcd60e51b8152600401808060200182810382526033815260200180613a886033913960400191505060405180910390fd5b6040805188815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051948d90526001600160a01b03908116606884015293841660888301526001600160801b03808c1660a8840152871660c88301526001600160401b03421660e8830152513394909316927f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f918190036101080190a460808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051600654958e90526001600160a01b039182166068850152811660888401526001600160801b03808d1660a8850152881660c884015260e883018790529384166101088301526001600160401b034216610128830152513394909316927f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e2918190036101480190a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758885604051808381526020018281526020019250505060405180910390a36000878152600260205260409020546131b35760008781526002602081815260408084208481556001810180546001600160a01b031990811690915593810194909455600384018054909316909255600490920180546001600160e01b0319169055805189815290517f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def55676929181900390910190a15b600194505050505b506004805460ff1916905592915050565b600654600090600160a81b900460ff166131e557600080fd5b6000838152600260205260409020548214156132235761320483611bc6565b1561321857613212836124bd565b50613223565b61322183612274565b505b61322d8383612a86565b61323657600080fd5b61323f83611760565b80156132795750600083815260026020818152604080842060018101546001600160a01b03168552600a8352908420549387905291905254105b1561328e57600d83905561328c836110c7565b505b50600192915050565b60008060008060005b6001600160a01b038089166000908152600860209081526040808320938e1683529290522054156133df5750506001600160a01b038087166000908152600860209081526040808320938c16835292815282822054808352600291829052929091209081015490549193509085613318576000613320565b808b8a840101015b61332a8c83613801565b01613335838b613801565b1115613340576133df565b6133538461334e838c6139ba565b611ce3565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b985613380838c6139ba565b6040805192835260208301919091528051918290030190a18892506133ae896133a9838c6139ba565b612197565b9850826133bb8a8d613801565b816133c257fe5b049a508a15806133d0575088155b156133da576133df565b6132a0565b6000891180156133ef575060008b115b801561341357506001600160a01b038a166000908152600a60205260409020548b10155b15613430576134248b8b8b8b61343e565b9450613430858861231e565b505050509695505050505050565b6000613448611b82565b1561345257600080fd5b60045460ff161561346257600080fd5b6004805460ff19166001179055838261347a826139d1565b61348357600080fd5b61348c816139d1565b61349557600080fd5b86876001600160801b0316146134aa57600080fd5b84856001600160801b0316146134bf57600080fd5b600087116134cc57600080fd5b6001600160a01b0386166134df57600080fd5b600085116134ec57600080fd5b6001600160a01b0384166134ff57600080fd5b836001600160a01b0316866001600160a01b0316141561351e57600080fd5b613526613a50565b8781526001600160a01b03808816602083015260408201879052851660608201523360808201526001600160401b03421660a08201526135646139ef565b600081815260026020818152604080842086518155828701516001820180546001600160a01b039283166001600160a01b0319918216179091558389015195830195909555606088015160038301805491831691871691909117905560808801516004928301805460a08b01516001600160401b0316600160a01b0267ffffffffffffffff60a01b199385169190981617919091169590951790945581516323b872dd60e01b81523391810191909152306024820152604481018e90529051949850918b16936323b872dd936064808501948390030190829087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b505050506040513d602081101561367657600080fd5b505161368157600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516001600160601b031960608a811b82166020808501919091529089901b90911660348301528251602881840301815260488301808552815191909201206001600160a01b038b811690925290881660688301526001600160801b03808c166088840152891660a88301526001600160401b03421660c8830152915133929187917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360e80190a450506004805460ff1916905550949350505050565b6001600160a01b0383166000908152600a602052604081205485101561379c57600080fd5b6137a88585858561343e565b600c80546000838152600b60209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b600081158061381c5750508082028282828161381957fe5b04145b610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b600080831161387257600080fd5b8115801590613887575061388582611760565b155b156138a5576000918252600760205260409091206001015490613872565b816138ba576138b383613936565b9050610b82565b6138c483836139fc565b156138fe5760005b82158015906138e057506138e084846139fc565b156138b35750600082815260076020526040902060010154916138cc565b8115801590613914575061391283836139fc565b155b1561392f5760009182526007602052604090912054906138fe565b5080610b82565b600080821161394457600080fd5b600082815260026020908152604080832060038101546001909101546001600160a01b03908116808652600885528386209190921680865293529083205491929091905b811580159061399c575061399c86836139fc565b15610d94575060008181526007602052604090206001015490613988565b6000818311156139ca5781611220565b5090919050565b6001600160a01b031660009081526003602052604090205460ff1690565b6001805481019081905590565b60008181526002602081905260408083209091015484835290822054613a229190613801565b600084815260026020819052604080832090910154858352912054613a479190613801565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000a265627a7a723158207cc6f2603dc9d00f41b6466de743bd658e2563482ccb9f3cf861701ec4d595d664736f6c63430005100032",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF PUSH1 0xB0 SHL NOT PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA8 SHL OR AND PUSH1 0x1 PUSH1 0xB0 SHL OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C12 DUP1 PUSH2 0x42 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CA9429A GT PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xBE71F5CE GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xD6FEBDE8 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF09EA2A6 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF09EA2A6 EQ PUSH2 0xAAB JUMPI DUP1 PUSH4 0xF46901ED EQ PUSH2 0xAE7 JUMPI DUP1 PUSH4 0xF582D293 EQ PUSH2 0xB0D JUMPI DUP1 PUSH4 0xFF1FD974 EQ PUSH2 0xB15 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xD6FEBDE8 EQ PUSH2 0xA1A JUMPI DUP1 PUSH4 0xE1A6F014 EQ PUSH2 0xA3D JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0xA85 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xC2D526AA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xC2D526AA EQ PUSH2 0x986 JUMPI DUP1 PUSH4 0xC41A360A EQ PUSH2 0x9C1 JUMPI DUP1 PUSH4 0xD2B420CE EQ PUSH2 0x9DE JUMPI DUP1 PUSH4 0xD6F15469 EQ PUSH2 0x9FB JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xBE71F5CE EQ PUSH2 0x92C JUMPI DUP1 PUSH4 0xBF7C734E EQ PUSH2 0x952 JUMPI DUP1 PUSH4 0xC2B6B58C EQ PUSH2 0x97E JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x943911BC GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x943911BC EQ PUSH2 0x8B6 JUMPI DUP1 PUSH4 0xA128171B EQ PUSH2 0x8D3 JUMPI DUP1 PUSH4 0xA78D4316 EQ PUSH2 0x8F2 JUMPI DUP1 PUSH4 0xB4F9B6C8 EQ PUSH2 0x90F JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x86B JUMPI DUP1 PUSH4 0x911550F4 EQ PUSH2 0x873 JUMPI DUP1 PUSH4 0x91BE90C8 EQ PUSH2 0x890 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x85EE7BA6 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x85EE7BA6 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0x8A72EA6A EQ PUSH2 0x7D7 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x83D JUMPI DUP1 PUSH4 0x8AF82A2E EQ PUSH2 0x863 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x7CA9429A EQ PUSH2 0x724 JUMPI DUP1 PUSH4 0x8185402B EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x78C JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x40E58EE5 GT PUSH2 0x2AD JUMPI DUP1 PUSH4 0x604B6A9C GT PUSH2 0x24B JUMPI DUP1 PUSH4 0x6B9D8C4B GT PUSH2 0x225 JUMPI DUP1 PUSH4 0x6B9D8C4B EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0x74C1D7D3 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0x75F12B21 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0x779997C3 EQ PUSH2 0x707 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x604B6A9C EQ PUSH2 0x645 JUMPI DUP1 PUSH4 0x61F54A79 EQ PUSH2 0x662 JUMPI DUP1 PUSH4 0x677170E1 EQ PUSH2 0x67F JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x49606455 GT PUSH2 0x287 JUMPI DUP1 PUSH4 0x49606455 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x511FA487 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x557ED1BA EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0x56AD8764 EQ PUSH2 0x63D JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x40E58EE5 EQ PUSH2 0x53F JUMPI DUP1 PUSH4 0x4579268A EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0x467F0B7B EQ PUSH2 0x5AA JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x144A2752 GT PUSH2 0x31A JUMPI DUP1 PUSH4 0x1D834A1B GT PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x1D834A1B EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x232CAE0B EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0x2AED1905 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x2F90A6FC EQ PUSH2 0x537 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x144A2752 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0x1B33D412 EQ PUSH2 0x4AD JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x1492A0B EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x374FC6F EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x621B4F6 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x7DA68F5 EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x93F5198 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x449 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36A PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0xB5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0xB88 JUMP JUMPDEST PUSH2 0x400 PUSH2 0xD17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD9D JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xE31 JUMP JUMPDEST PUSH2 0x36A PUSH2 0xEF9 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF36 JUMP JUMPDEST PUSH2 0x3AC PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1009 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12B4 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13D5 JUMP JUMPDEST PUSH2 0x621 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x144D JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x145F JUMP JUMPDEST PUSH2 0x6B5 PUSH2 0x147C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x148B JUMP JUMPDEST PUSH2 0x36A PUSH2 0x14A8 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x15F0 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x7F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1869 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP9 ADD MSTORE DUP7 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xC0 ADD SWAP1 RETURN JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18BB JUMP JUMPDEST PUSH2 0x3AC PUSH2 0x1924 JUMP JUMPDEST PUSH2 0x6B5 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x194B JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x195D JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1972 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x908 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x19DD JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A04 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1A73 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x1B82 JUMP JUMPDEST PUSH2 0x9A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x99C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1BA8 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1C36 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1E2E JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x1F5E JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x2050 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xBD8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 ISZERO PUSH2 0xD01 JUMPI PUSH2 0xBEB DUP5 DUP8 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xBF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0xC18 SWAP2 SWAP1 PUSH2 0x2119 JUMP JUMPDEST DUP6 PUSH8 0xDE0B6B3A7640000 MUL LT ISZERO PUSH2 0xC2E JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP6 LT PUSH2 0xCA5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC61 SWAP1 DUP4 SWAP1 PUSH2 0x2148 JUMP JUMPDEST SWAP2 POP PUSH2 0xC83 DUP6 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP PUSH2 0xCA0 SWAP1 DUP3 SWAP1 PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0xCFC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xCD6 SWAP2 DUP10 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x2203 JUMP JUMPDEST DUP2 PUSH2 0xCDD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xCEA DUP4 DUP3 PUSH2 0x2148 JUMP JUMPDEST SWAP3 POP PUSH2 0xCF6 DUP3 DUP3 PUSH2 0x13B5 JUMP JUMPDEST PUSH1 0x0 SWAP6 POP POP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD20 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0xD5F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD94 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 PUSH2 0x1F5E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDA6 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0xDE5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP1 DUP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0xCE241D7CA1F669FEE44B6FC00B8EBA2DF3BB514EED0F6F668F8F89096E81ED94 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE3E DUP6 DUP6 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP4 GT ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xE75 SWAP1 DUP4 SWAP1 PUSH2 0x2148 JUMP JUMPDEST SWAP2 POP PUSH2 0xE97 DUP4 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2197 JUMP JUMPDEST SWAP3 POP DUP3 ISZERO PUSH2 0xEB4 JUMPI PUSH2 0xEA8 DUP2 PUSH2 0x195D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xEB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH2 0xD94 SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP9 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST DUP2 PUSH2 0xEF3 JUMPI INVALID JUMPDEST DIV PUSH2 0x2148 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0xF1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF2C DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x1 PUSH2 0x1E2E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xF86 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF8F DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0xF99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA2 DUP4 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0xFAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB4 DUP4 PUSH2 0x2274 JUMP JUMPDEST POP PUSH2 0xFBF DUP4 DUP4 PUSH2 0x231E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x6D5C16212BDEA16850DCE4D9FA2314C446BD30CE84700D9C36C7677C6D283940 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1014 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DUP2 MUL PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH32 0xEA11E00EC1642BE9B494019B756440E2C57DBE9E59242C4F9C64CE33FB4F41D9 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x10D3 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x110E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3ABB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1116 PUSH2 0x1B82 JUMP JUMPDEST DUP1 PUSH2 0x113A JUMPI POP PUSH2 0x1125 DUP2 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x1146 JUMPI POP PUSH1 0xD SLOAD DUP2 EQ JUMPDEST PUSH2 0x1181 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x74 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AE8 PUSH1 0x74 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11CE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1217 JUMPI PUSH2 0x11E9 DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x1205 JUMPI PUSH2 0x11F7 DUP4 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x120E DUP4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x1217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1220 DUP4 PUSH2 0x2678 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1235 PUSH2 0x3A50 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP3 DUP4 MSTORE POP POP PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP4 ADD DUP6 SWAP1 MSTORE SWAP5 DUP4 ADD SLOAD SWAP6 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x3 DUP4 ADD SLOAD DUP6 AND PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP5 DUP6 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1304 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x130D DUP3 PUSH2 0x1760 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x132A JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x134A JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x9 NOT NUMBER ADD GT JUMPDEST PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP2 MLOAD CALLER DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xCB9D6176C6AAC6478EBB9A2754CDCE22A944DE29ED1F2642F8613884EBA4B40C SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13C8 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP4 AND PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1405 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1444 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x5 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST DUP1 PUSH2 0x14C2 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D3 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x14DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND DUP4 DUP11 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE DUP6 MLOAD PUSH1 0x28 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP3 ADD DUP1 DUP9 MSTORE DUP2 MLOAD SWAP2 DUP10 ADD SWAP2 SWAP1 SWAP2 KECCAK256 SWAP10 DUP13 SWAP1 MSTORE SWAP7 DUP9 SWAP1 MSTORE DUP5 SLOAD SWAP5 SWAP1 SWAP8 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 SWAP7 MSTORE DUP2 AND PUSH1 0x68 DUP8 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 DUP4 AND PUSH1 0x88 DUP8 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0xA8 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP5 DIV AND PUSH1 0xC8 DUP6 ADD MSTORE SWAP1 MLOAD DUP7 SWAP5 SWAP2 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x70A14C213064359EDE031FD2A1645A11CE2EC825FFE6AB5CFB5B160C3EF4D0A2 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1640 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 ISZERO PUSH2 0x1753 JUMPI PUSH2 0x1653 DUP7 DUP6 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x167F SWAP2 SWAP1 PUSH2 0x2119 JUMP JUMPDEST DUP6 PUSH8 0xDE0B6B3A7640000 MUL LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP6 LT PUSH2 0x1709 JUMPI PUSH2 0x16CA DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x16E7 SWAP1 DUP7 SWAP1 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP PUSH2 0x1704 SWAP1 DUP3 SWAP1 PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0x174E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x173D SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP11 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1749 DUP2 DUP7 PUSH2 0x13B5 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP JUMPDEST PUSH2 0x1643 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x17E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E747261637420697320616C726561647920696E697469616C697A656400 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD CALLER SWAP3 AND DUP3 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xCE241D7CA1F669FEE44B6FC00B8EBA2DF3BB514EED0F6F668F8F89096E81ED94 SWAP2 SWAP1 LOG2 POP POP PUSH1 0x14 PUSH1 0x5 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 SWAP3 SWAP2 DUP2 AND SWAP2 SWAP1 DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP7 JUMP JUMPDEST PUSH2 0x18C4 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1903 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197D CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x19BC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0xE DUP1 SLOAD DUP3 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x19F8 DUP2 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x1A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0F CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1A4E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0xE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7E CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1ABD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 DUP2 MSTORE CALLDATASIZE SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x4 CALLDATALOAD SWAP4 PUSH1 0x24 CALLDATALOAD SWAP4 DUP5 SWAP3 DUP7 SWAP3 CALLER SWAP3 PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 DUP9 SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x60 DUP3 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP9 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD PUSH32 0xC28D56449B0BB31E64EE7487E061F57A2E72AEA8019D810832F26DDA099823D0 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO DUP1 PUSH2 0x1BF2 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO ISZERO JUMPDEST DUP1 PUSH2 0xB82 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x8 DUP5 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1C80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DUP2 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH32 0x7089E4F0BCC948F9F723A361590C32D9C2284DA7AB1981B1249AD2EDB9F953C1 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CEF DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x1CF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D00 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x1D0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1D57 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1DFD JUMPI PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB30ED7B3 PUSH2 0x1D83 DUP7 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE MLOAD PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1DE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3A85 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E1A JUMPI PUSH2 0x2A86 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0x31CC JUMPDEST SWAP1 POP PUSH2 0xD94 DUP6 DUP6 DUP4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E38 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E8F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 LT ISZERO PUSH2 0x1EB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1EDB JUMPI PUSH2 0x1ED4 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x3297 JUMP JUMPDEST SWAP1 POP PUSH2 0xF2C JUMP JUMPDEST PUSH2 0x1EE7 DUP8 DUP8 DUP8 DUP8 PUSH2 0x343E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EFB CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1F3A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1FAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3A85 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FCB JUMPI PUSH2 0x343E PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x3777 JUMPDEST SWAP1 POP PUSH2 0xF2C DUP7 DUP7 DUP7 DUP7 DUP6 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FEC CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x202B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x206D DUP5 DUP7 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0x20E5 JUMPI PUSH2 0x20A6 DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x20C3 SWAP1 DUP5 SWAP1 PUSH2 0x2197 JUMP JUMPDEST SWAP3 POP DUP3 ISZERO PUSH2 0x20E0 JUMPI PUSH2 0x20D4 DUP2 PUSH2 0x195D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2070 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0xD94 SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP9 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2139 PUSH2 0x2131 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH2 0xEF3 JUMP JUMPDEST DUP2 PUSH2 0x2140 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2139 PUSH2 0x2131 DUP6 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x0 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x2139 PUSH2 0x221F DUP6 DUP6 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xEF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO PUSH2 0x224E JUMPI POP PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x226C JUMPI POP PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0x2284 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x228E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0xC SLOAD EQ ISZERO PUSH2 0x22B6 JUMPI POP POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xC SSTORE SSTORE PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x22C7 JUMPI POP DUP4 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x22E2 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x22B7 JUMP JUMPDEST DUP4 DUP3 EQ PUSH2 0x22F4 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP4 DUP4 MSTORE SWAP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP5 DUP2 MSTORE SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2327 DUP3 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x2330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 DUP4 ISZERO DUP1 PUSH2 0x2382 JUMPI POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x23AA JUMPI POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x23BB JUMPI POP PUSH2 0x23B9 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x23CE JUMPI PUSH2 0x23C9 DUP6 DUP6 PUSH2 0x3864 JUMP JUMPDEST PUSH2 0x23D7 JUMP JUMPDEST PUSH2 0x23D7 DUP6 PUSH2 0x3936 JUMP JUMPDEST SWAP4 POP DUP4 ISZERO PUSH2 0x2405 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP8 SWAP1 SSTORE DUP7 DUP4 MSTORE SWAP2 KECCAK256 DUP5 SWAP1 SSTORE PUSH2 0x2432 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP1 DUP6 SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x2456 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE DUP7 DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x20FB9BAD86C18F7E22E8065258790D9416A7D2DF8FF05F80F82C46D38B925ACD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x9 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP2 SWAP1 SWAP3 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 SLOAD PUSH2 0x2504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO DUP1 ISZERO PUSH2 0x2527 JUMPI POP PUSH2 0x2527 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP5 EQ PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP5 EQ PUSH2 0x257F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SLOAD SWAP2 SLOAD DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP6 MSTORE PUSH1 0x8 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP1 DUP8 AND DUP6 MSTORE SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x2630 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP5 EQ PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP4 MSTORE SWAP2 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP4 DUP5 MSTORE PUSH1 0x7 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2684 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x26BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3ABB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26C7 PUSH2 0x1B82 JUMP JUMPDEST DUP1 PUSH2 0x26EB JUMPI POP PUSH2 0x26D6 DUP2 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x26F7 JUMPI POP PUSH1 0xD SLOAD DUP2 EQ JUMPDEST PUSH2 0x2732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x74 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AE8 PUSH1 0x74 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2757 PUSH2 0x3A50 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP3 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2955 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x296B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP7 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD DUP8 MLOAD DUP4 DUP10 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP1 SWAP8 MSTORE SWAP1 DUP3 AND PUSH1 0x68 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND PUSH1 0x88 DUP6 ADD MSTORE SWAP1 SWAP5 AND PUSH1 0xA8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xC8 DUP4 ADD MSTORE MLOAD SWAP3 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP2 DUP8 SWAP2 PUSH32 0x9577941D28FFF863BFBEE4694A6A4A56FB09E169619189D2EAA750B5B4819995 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2A92 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x2A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AA3 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x2AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2AD2 PUSH2 0x3A50 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP5 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP4 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH2 0x2B51 SWAP1 DUP8 SWAP1 PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x2B58 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x2BAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1CDC195B99081A5CC81B9BDD08185B881A5B9D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x2C04 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1C5D585B9D1A5D1E481A5CC81B9BDD08185B881A5B9D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x2C0F JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2C1A JUMPI POP DUP2 MLOAD DUP6 GT JUMPDEST DUP1 PUSH2 0x2C28 JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x2C38 JUMPI PUSH1 0x0 SWAP4 POP POP POP PUSH2 0x31BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0x2C49 DUP4 PUSH1 0x5 SLOAD PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x2C50 JUMPI INVALID JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 DIV PUSH1 0x44 DUP6 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD SWAP3 SWAP5 POP AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2CC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2D32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F20636F7665722066656500 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x2D3E SWAP1 DUP8 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE DUP4 ADD MLOAD PUSH2 0x2D5F SWAP1 DUP4 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP3 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD DUP3 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE SWAP3 MLOAD SWAP2 AND SWAP4 PUSH4 0x23B872DD SWAP4 PUSH1 0x64 DUP1 DUP6 ADD SWAP5 SWAP3 SWAP4 SWAP3 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2DE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2E3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x62 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B5C PUSH1 0x62 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH1 0x44 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2EA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2EB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2EF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A88 PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP9 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD SWAP5 DUP14 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x68 DUP5 ADD MSTORE SWAP4 DUP5 AND PUSH1 0x88 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP13 AND PUSH1 0xA8 DUP5 ADD MSTORE DUP8 AND PUSH1 0xC8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xE8 DUP4 ADD MSTORE MLOAD CALLER SWAP5 SWAP1 SWAP4 AND SWAP3 PUSH32 0x3383E3357C77FD2E3A4B30DEEA81179BC70A795D053D14D5B7F2F01D0FD4596F SWAP2 DUP2 SWAP1 SUB PUSH2 0x108 ADD SWAP1 LOG4 PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP9 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD PUSH1 0x6 SLOAD SWAP6 DUP15 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x68 DUP6 ADD MSTORE DUP2 AND PUSH1 0x88 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP14 AND PUSH1 0xA8 DUP6 ADD MSTORE DUP9 AND PUSH1 0xC8 DUP5 ADD MSTORE PUSH1 0xE8 DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 DUP5 AND PUSH2 0x108 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH2 0x128 DUP4 ADD MSTORE MLOAD CALLER SWAP5 SWAP1 SWAP4 AND SWAP3 PUSH32 0xAE463BEEED705BDBA735CC0F80A21BC43E39FA85611FBCEB6E509CA190CC6E2 SWAP2 DUP2 SWAP1 SUB PUSH2 0x148 ADD SWAP1 LOG4 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x819E390338FEFFE95E2DE57172D6FAF337853DFD15C7A09A32D76F7FD2443875 DUP9 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x31B3 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE SWAP4 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP1 SWAP3 SSTORE PUSH1 0x4 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SSTORE DUP1 MLOAD DUP10 DUP2 MSTORE SWAP1 MLOAD PUSH32 0x88686B85D6F2C3AB9A04E4F15A22FCFA025FFD97226DCF0A67CDF682DEF55676 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x31E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 EQ ISZERO PUSH2 0x3223 JUMPI PUSH2 0x3204 DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x3218 JUMPI PUSH2 0x3212 DUP4 PUSH2 0x24BD JUMP JUMPDEST POP PUSH2 0x3223 JUMP JUMPDEST PUSH2 0x3221 DUP4 PUSH2 0x2274 JUMP JUMPDEST POP JUMPDEST PUSH2 0x322D DUP4 DUP4 PUSH2 0x2A86 JUMP JUMPDEST PUSH2 0x3236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x323F DUP4 PUSH2 0x1760 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3279 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0xA DUP4 MSTORE SWAP1 DUP5 KECCAK256 SLOAD SWAP4 DUP8 SWAP1 MSTORE SWAP2 SWAP1 MSTORE SLOAD LT JUMPDEST ISZERO PUSH2 0x328E JUMPI PUSH1 0xD DUP4 SWAP1 SSTORE PUSH2 0x328C DUP4 PUSH2 0x10C7 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP15 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO PUSH2 0x33DF JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 DUP2 MSTORE DUP3 DUP3 KECCAK256 SLOAD DUP1 DUP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD SWAP2 SWAP4 POP SWAP1 DUP6 PUSH2 0x3318 JUMPI PUSH1 0x0 PUSH2 0x3320 JUMP JUMPDEST DUP1 DUP12 DUP11 DUP5 ADD ADD ADD JUMPDEST PUSH2 0x332A DUP13 DUP4 PUSH2 0x3801 JUMP JUMPDEST ADD PUSH2 0x3335 DUP4 DUP12 PUSH2 0x3801 JUMP JUMPDEST GT ISZERO PUSH2 0x3340 JUMPI PUSH2 0x33DF JUMP JUMPDEST PUSH2 0x3353 DUP5 PUSH2 0x334E DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH2 0x1CE3 JUMP JUMPDEST POP PUSH32 0x3156F1FACEDD2C8392E4DE7BABF62E19484C1AC8F306F3A857C46A1BF39013B9 DUP6 PUSH2 0x3380 DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 DUP9 SWAP3 POP PUSH2 0x33AE DUP10 PUSH2 0x33A9 DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH2 0x2197 JUMP JUMPDEST SWAP9 POP DUP3 PUSH2 0x33BB DUP11 DUP14 PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x33C2 JUMPI INVALID JUMPDEST DIV SWAP11 POP DUP11 ISZERO DUP1 PUSH2 0x33D0 JUMPI POP DUP9 ISZERO JUMPDEST ISZERO PUSH2 0x33DA JUMPI PUSH2 0x33DF JUMP JUMPDEST PUSH2 0x32A0 JUMP JUMPDEST PUSH1 0x0 DUP10 GT DUP1 ISZERO PUSH2 0x33EF JUMPI POP PUSH1 0x0 DUP12 GT JUMPDEST DUP1 ISZERO PUSH2 0x3413 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP12 LT ISZERO JUMPDEST ISZERO PUSH2 0x3430 JUMPI PUSH2 0x3424 DUP12 DUP12 DUP12 DUP12 PUSH2 0x343E JUMP JUMPDEST SWAP5 POP PUSH2 0x3430 DUP6 DUP9 PUSH2 0x231E JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3448 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x3452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 DUP3 PUSH2 0x347A DUP3 PUSH2 0x39D1 JUMP JUMPDEST PUSH2 0x3483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x348C DUP2 PUSH2 0x39D1 JUMP JUMPDEST PUSH2 0x3495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x34AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x34BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP8 GT PUSH2 0x34CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x34DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x34EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x34FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x351E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3526 PUSH2 0x3A50 JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP8 SWAP1 MSTORE DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x3564 PUSH2 0x39EF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP7 MLOAD DUP2 SSTORE DUP3 DUP8 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE DUP4 DUP10 ADD MLOAD SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x3 DUP4 ADD DUP1 SLOAD SWAP2 DUP4 AND SWAP2 DUP8 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0x4 SWAP3 DUP4 ADD DUP1 SLOAD PUSH1 0xA0 DUP12 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP4 DUP6 AND SWAP2 SWAP1 SWAP9 AND OR SWAP2 SWAP1 SWAP2 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP15 SWAP1 MSTORE SWAP1 MLOAD SWAP5 SWAP9 POP SWAP2 DUP12 AND SWAP4 PUSH4 0x23B872DD SWAP4 PUSH1 0x64 DUP1 DUP6 ADD SWAP5 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x364C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3660 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x3681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP11 DUP2 SHL DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP10 SWAP1 SHL SWAP1 SWAP2 AND PUSH1 0x34 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x28 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP4 ADD DUP1 DUP6 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP1 SWAP3 MSTORE SWAP1 DUP9 AND PUSH1 0x68 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP13 AND PUSH1 0x88 DUP5 ADD MSTORE DUP10 AND PUSH1 0xA8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xC8 DUP4 ADD MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP8 SWAP2 PUSH32 0x773FF502687307ABFA024AC9F62F9752A0D210DAC2FFD9A29E38E12E2EA82C82 SWAP2 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP6 LT ISZERO PUSH2 0x379C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x37A8 DUP6 DUP6 DUP6 DUP6 PUSH2 0x343E JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH32 0x8173832A493E0A3989E521458E55BFE9FEAC9F9B675A94E100B9D5A85F814862 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x381C JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0x3819 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3887 JUMPI POP PUSH2 0x3885 DUP3 PUSH2 0x1760 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x38A5 JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 PUSH2 0x3872 JUMP JUMPDEST DUP2 PUSH2 0x38BA JUMPI PUSH2 0x38B3 DUP4 PUSH2 0x3936 JUMP JUMPDEST SWAP1 POP PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x38C4 DUP4 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0x38FE JUMPI PUSH1 0x0 JUMPDEST DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x38E0 JUMPI POP PUSH2 0x38E0 DUP5 DUP5 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0x38B3 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 PUSH2 0x38CC JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3914 JUMPI POP PUSH2 0x3912 DUP4 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x392F JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 PUSH2 0x38FE JUMP JUMPDEST POP DUP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x8 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP2 SWAP1 SWAP3 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x399C JUMPI POP PUSH2 0x399C DUP7 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0xD94 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 PUSH2 0x3988 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x39CA JUMPI DUP2 PUSH2 0x1220 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP2 ADD SWAP1 DUP2 SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP5 DUP4 MSTORE SWAP1 DUP3 KECCAK256 SLOAD PUSH2 0x3A22 SWAP2 SWAP1 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP6 DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x3A47 SWAP2 SWAP1 PUSH2 0x3801 JUMP JUMPDEST LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST INVALID INVALID PUSH16 0x666665722E7061795F67656D2E747261 PUSH15 0x73666572286D73672E73656E646572 0x2C KECCAK256 PUSH18 0x75616E7469747929206661696C65644F6666 PUSH6 0x722077617320 PUSH5 0x656C657465 PUSH5 0x206F722074 PUSH2 0x6B65 PUSH15 0x2C206F72206E657665722065786973 PUSH21 0x65642E4F666665722063616E206E6F742062652063 PUSH2 0x6E63 PUSH6 0x6C6C65642062 PUSH6 0x636175736520 PUSH22 0x736572206973206E6F74206F776E65722C20616E6420 PUSH14 0x61726B6574206973206F70656E2C KECCAK256 PUSH2 0x6E64 KECCAK256 PUSH16 0x666665722073656C6C73207265717569 PUSH19 0x656420616D6F756E74206F6620746F6B656E73 0x2E PUSH16 0x666665722E6275795F67656D2E747261 PUSH15 0x7366657246726F6D286D73672E7365 PUSH15 0x6465722C206F666665722E6F776E65 PUSH19 0x2C207370656E6429206661696C6564202D2063 PUSH9 0x65636B207468617420 PUSH26 0x6F752063616E20706179207468652066656564732D617574682D PUSH22 0x6E617574686F72697A65640000000000000000000000 STOP LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0xC6F2603DC9D00F41B6466DE743BD658E2563482CCB9F3CF861701EC4D5 SWAP6 0xD6 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
          "sourceMap": "16170:27189:0:-;;;16241:29;;;-1:-1:-1;;;;;;;;16241:29:0;;;-1:-1:-1;;;16241:29:0;16290:34;-1:-1:-1;;;16290:34:0;;;16170:27189;5:2:-1;;;;30:1;27;20:12;5:2;16170:27189:0;;;;;;;"
        },
        "deployedBytecode": {
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061035d5760003560e01c80637ca9429a116101d3578063be71f5ce11610104578063d6febde8116100a2578063f09ea2a61161007c578063f09ea2a614610aab578063f46901ed14610ae7578063f582d29314610b0d578063ff1fd97414610b155761035d565b8063d6febde814610a1a578063e1a6f01414610a3d578063e43252d714610a855761035d565b8063c2d526aa116100de578063c2d526aa14610986578063c41a360a146109c1578063d2b420ce146109de578063d6f15469146109fb5761035d565b8063be71f5ce1461092c578063bf7c734e14610952578063c2b6b58c1461097e5761035d565b80638da5cb5b11610171578063943911bc1161014b578063943911bc146108b6578063a128171b146108d3578063a78d4316146108f2578063b4f9b6c81461090f5761035d565b80638da5cb5b1461086b578063911550f41461087357806391be90c8146108905761035d565b806385ee7ba6116101ad57806385ee7ba6146107a95780638a72ea6a146107d75780638ab1d6811461083d5780638af82a2e146108635761035d565b80637ca9429a146107245780638185402b1461075257806382afd23b1461078c5761035d565b806340e58ee5116102ad578063604b6a9c1161024b5780636b9d8c4b116102255780636b9d8c4b146106ad57806374c1d7d3146106d157806375f12b21146106ff578063779997c3146107075761035d565b8063604b6a9c1461064557806361f54a7914610662578063677170e11461067f5761035d565b8063496064551161028757806349606455146105c7578063511fa487146105f3578063557ed1ba1461061957806356ad87641461063d5761035d565b806340e58ee51461053f5780634579268a1461055c578063467f0b7b146105aa5761035d565b8063144a27521161031a5780631d834a1b116102f45780631d834a1b146104ed578063232cae0b146105105780632aed1905146105185780632f90a6fc146105375761035d565b8063144a27521461046f578063158ef93e146104a55780631b33d412146104ad5761035d565b806301492a0b146103625780630374fc6f1461037e5780630621b4f6146103be57806307da68f5146103f8578063093f51981461040257806313af403514610449575b600080fd5b61036a610b4b565b604080519115158252519081900360200190f35b6103ac6004803603604081101561039457600080fd5b506001600160a01b0381358116916020013516610b5b565b60408051918252519081900360200190f35b6103ac600480360360808110156103d457600080fd5b506001600160a01b0381358116916020810135916040820135169060600135610b88565b610400610d17565b005b6103ac6004803603608081101561041857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610d74565b6104006004803603602081101561045f57600080fd5b50356001600160a01b0316610d9d565b6103ac6004803603606081101561048557600080fd5b506001600160a01b03813581169160208101359091169060400135610e31565b61036a610ef9565b6103ac600480360360a08110156104c357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060800135610f09565b61036a6004803603604081101561050357600080fd5b5080359060200135610f36565b6103ac611003565b61036a6004803603602081101561052e57600080fd5b50351515611009565b61036a6110b7565b61036a6004803603602081101561055557600080fd5b50356110c7565b6105796004803603602081101561057257600080fd5b5035611227565b604080519485526001600160a01b039384166020860152848101929092529091166060830152519081900360800190f35b61036a600480360360208110156105c057600080fd5b50356112b4565b610400600480360360408110156105dd57600080fd5b50803590602001356001600160801b03166113b5565b6103ac6004803603602081101561060957600080fd5b50356001600160a01b03166113d5565b6106216113f0565b604080516001600160401b039092168252519081900360200190f35b6103ac6113f4565b61036a6004803603602081101561065b57600080fd5b50356113fa565b6103ac6004803603602081101561067857600080fd5b503561144d565b6103ac6004803603604081101561069557600080fd5b506001600160a01b038135811691602001351661145f565b6106b561147c565b604080516001600160a01b039092168252519081900360200190f35b6103ac600480360360408110156106e757600080fd5b506001600160a01b038135811691602001351661148b565b61036a6114a8565b6104006004803603602081101561071d57600080fd5b50356114b8565b6103ac6004803603604081101561073a57600080fd5b506001600160a01b03813581169160200135166115c5565b6103ac6004803603608081101561076857600080fd5b506001600160a01b03813581169160208101359160408201351690606001356115f0565b61036a600480360360208110156107a257600080fd5b5035611760565b610400600480360360408110156107bf57600080fd5b508035151590602001356001600160a01b0316611787565b6107f4600480360360208110156107ed57600080fd5b5035611869565b604080519687526001600160a01b03958616602088015286810194909452918416606086015290921660808401526001600160401b0390911660a0830152519081900360c00190f35b6104006004803603602081101561085357600080fd5b50356001600160a01b03166118bb565b6103ac611924565b6106b561192a565b6103ac6004803603602081101561088957600080fd5b5035611939565b6103ac600480360360208110156108a657600080fd5b50356001600160a01b031661194b565b6103ac600480360360208110156108cc57600080fd5b503561195d565b61036a600480360360208110156108e957600080fd5b50351515611972565b6103ac6004803603602081101561090857600080fd5b50356119dd565b6104006004803603602081101561092557600080fd5b50356119ef565b61036a6004803603602081101561094257600080fd5b50356001600160a01b0316611a04565b61036a6004803603604081101561096857600080fd5b506001600160a01b038135169060200135611a73565b61036a611b82565b6109a36004803603602081101561099c57600080fd5b5035611b87565b60408051938452602084019290925282820152519081900360600190f35b6106b5600480360360208110156109d757600080fd5b5035611ba8565b61036a600480360360208110156109f457600080fd5b5035611bc6565b61036a60048036036020811015610a1157600080fd5b50351515611c36565b61036a60048036036040811015610a3057600080fd5b5080359060200135611ce3565b6103ac600480360360c0811015610a5357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515611e2e565b61040060048036036020811015610a9b57600080fd5b50356001600160a01b0316611ef2565b6103ac60048036036080811015610ac157600080fd5b508035906001600160a01b03602082013581169160408101359160609091013516611f5e565b61036a60048036036020811015610afd57600080fd5b50356001600160a01b0316611fe1565b61036a612050565b6103ac60048036036060811015610b2b57600080fd5b506001600160a01b03813581169160208101359091169060400135612060565b600654600160b01b900460ff1681565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b60045460009060ff1615610bd8576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415610d0157610beb8487610b5b565b905080610bf757600080fd5b6000818152600260208190526040909120908101549054610c189190612119565b85670de0b6b3a7640000021015610c2e57610d01565b600081815260026020819052604090912001548510610ca557600081815260026020526040902054610c61908390612148565b9150610c83856002600084815260200190815260200160002060020154612197565b600082815260026020526040902054909550610ca09082906113b5565b610cfc565b600081815260026020819052604082208054910154633b9aca0091610cd69189840291610cd1916121e7565b612203565b81610cdd57fe5b049050610cea8382612148565b9250610cf682826113b5565b60009550505b610bdb565b82821015610d0e57600080fd5b50949350505050565b610d2033612233565b610d5f576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b179055565b6000610d94836001600160801b031686846001600160801b031687611f5e565b95945050505050565b610da633612233565b610de5576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a250565b600080610e3e8585610b5b565b90505b60008181526002602081905260409091200154831115610eb957600081815260026020526040902054610e75908390612148565b9150610e97836002600084815260200190815260200160002060020154612197565b92508215610eb457610ea88161195d565b905080610eb457600080fd5b610e41565b60008181526002602081905260409091208054910154610d94918491633b9aca0091610eec9188840291610cd1916121e7565b81610ef357fe5b04612148565b600e54600160a81b900460ff1681565b6000610f13611b82565b15610f1d57600080fd5b610f2c86868686866001611e2e565b9695505050505050565b60045460009060ff1615610f86576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b610f8f83611bc6565b15610f9957600080fd5b610fa283611760565b610fab57600080fd5b610fb483612274565b50610fbf838361231e565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60015481565b600061101433612233565b611053576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160b01b90810260ff60b01b199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a15060015b919050565b600e54600160a01b900460ff1681565b6000816110d381611760565b61110e5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b611116611b82565b8061113a575061112581611ba8565b6001600160a01b0316336001600160a01b0316145b806111465750600d5481145b6111815760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff16156111ce576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654600160b01b900460ff1615611217576111e983611bc6565b15611205576111f7836124bd565b61120057600080fd5b611217565b61120e83612274565b61121757600080fd5b61122083612678565b9392505050565b600080600080611235613a50565b5050506000928352505060026020818152604092839020835160c081018552815480825260018301546001600160a01b039081169483018590529483015495820186905260038301548516606083018190526004909301549485166080830152600160a01b9094046001600160401b031660a090910152919390929190565b60045460009060ff1615611304576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b61130d82611760565b15801561132a575060008281526007602052604090206002015415155b801561134a57506000828152600760205260409020600201546009194301115b61135357600080fd5b60008281526007602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b6113c8826001600160801b038316611ce3565b6113d157600080fd5b5050565b6001600160a01b03166000908152600a602052604090205490565b4290565b600d5481565b600061140533612233565b611444576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600555600190565b6000908152600b602052604090205490565b600960209081526000928352604080842090915290825290205481565b600e546001600160a01b031681565b600860209081526000928352604080842090915290825290205481565b600654600160a01b900460ff1681565b806114c281611760565b6114cb57600080fd5b6114d3611b82565b156114dd57600080fd5b600082815260026020818152604080842060048101546001820154600383015484516001600160601b0319606084811b8216838a015283901b1660348201528551602881830301815260488201808852815191890191909120998c905296889052845494909701546001600160a01b03928316909652811660688701526001600160801b0392831660888701529190931660a88501526001600160401b03600160a01b84041660c8850152905186949190921692909184917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360e80190a4505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b60045460009060ff1615611640576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415611753576116538685610b5b565b90508061165f57600080fd5b6000818152600260208190526040909120805491015461167f9190612119565b85670de0b6b3a764000002101561169557611753565b6000818152600260205260409020548510611709576116ca826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506116e7908690612197565b6000828152600260205260409020549095506117049082906113b5565b61174e565b600081815260026020819052604090912090810154905461173d918491633b9aca0091610eec918a840291610cd1916121e7565b915061174981866113b5565b600094505b611643565b82821115610d0e57600080fd5b600090815260026020526040902060040154600160a01b90046001600160401b0316151590565b600e54600160a81b900460ff16156117e6576040805162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600e805460ff60a01b1916600160a01b84151502179055600680546001600160a01b03199081166001600160a01b0384161790915560008054339216821781556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed949190a250506014600555600e805460ff60a81b1916600160a81b179055565b60026020819052600091825260409091208054600182015492820154600383015460049093015491936001600160a01b039081169391929181169190811690600160a01b90046001600160401b031686565b6118c433612233565b611903576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19169055565b600c5490565b6000546001600160a01b031681565b60009081526007602052604090205490565b600a6020526000908152604090205481565b60009081526007602052604090206001015490565b600061197d33612233565b6119bc576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e8054821515600160a01b0260ff60a01b199091161790556001919050565b600b6020526000908152604090205481565b6119f8816110c7565b611a0157600080fd5b50565b6000611a0f33612233565b611a4e576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0383166001600160a01b03199091161790556001919050565b6000611a7e33612233565b611abd576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a46001600160a01b0386166000818152600a60209081526040918290208890558151928352820187905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a150600195945050505050565b600090565b60076020526000908152604090208054600182015460029092015490919083565b6000908152600260205260409020600401546001600160a01b031690565b600081815260076020526040812054151580611bf2575060008281526007602052604090206001015415155b80610b82575050600081815260026020908152604080832060018101546001600160a01b039081168552600884528285206003909201541684529091529020541490565b6000611c4133612233565b611c80576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160a81b90810260ff60a81b199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b600082611cef81611760565b611cf857600080fd5b611d00611b82565b15611d0a57600080fd5b60045460ff1615611d57576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600e54600160a01b900460ff1615611dfd57600e546001600160a01b031663b30ed7b3611d8386611ba8565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301523360248301525160448083019260209291908290030181600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50505b600654613a8590600160b01b900460ff16611e1a57612a86611e1e565b6131cc5b9050610d9485858363ffffffff16565b6000611e38611b82565b15611e4257600080fd5b60045460ff1615611e8f576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902054871015611eb457600080fd5b600654600160b01b900460ff1615611edb57611ed4878787878787613297565b9050610f2c565b611ee78787878761343e565b979650505050505050565b611efb33612233565b611f3a576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b60045460009060ff1615611fae576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654613a8590600160b01b900460ff16611fcb5761343e611fcf565b6137775b9050610f2c868686868563ffffffff16565b6000611fec33612233565b61202b576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600680546001600160a01b0383166001600160a01b03199091161790556001919050565b600654600160a81b900460ff1681565b60008061206d8486610b5b565b90505b6000818152600260205260409020548311156120e5576120a6826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506120c3908490612197565b925082156120e0576120d48161195d565b9050806120e057600080fd5b612070565b6000818152600260208190526040909120908101549054610d94918491633b9aca0091610eec9188840291610cd1916121e7565b60008161213961213185670de0b6b3a7640000613801565b600285610ef3565b8161214057fe5b049392505050565b80820182811015610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b82576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b600081612139612131856b033b2e3c9fd0803ce8000000613801565b60006b033b2e3c9fd0803ce800000061213961221f8585613801565b60026b033b2e3c9fd0803ce8000000610ef3565b60006001600160a01b03821630141561224e575060016110b2565b6000546001600160a01b038381169116141561226c575060016110b2565b5060006110b2565b600c546000908061228484611bc6565b1561228e57600080fd5b83600c5414156122b6575050506000818152600b602052604081208054600c555560016110b2565b5b6000821180156122c75750838214155b156122e257506000818152600b6020526040902054906122b7565b8382146122f4576000925050506110b2565b6000848152600b602052604080822080549383529082209290925584815290555060019050919050565b61232782611760565b61233057600080fd5b600082815260026020526040812060038101546001909101546001600160a01b039182169291169083158061238257506000848152600260205260409020600101546001600160a01b03838116911614155b806123aa57506000848152600260205260409020600301546001600160a01b03848116911614155b806123bb57506123b984611bc6565b155b6123ce576123c98585613864565b6123d7565b6123d785613936565b9350831561240557506000838152600760205260408082206001018054908790558683529120849055612432565b506001600160a01b0381811660009081526008602090815260408083209386168352929052208054908590555b80156124565760008181526007602052604080822087905586825290206001018190555b6001600160a01b03808316600090815260096020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260026020908152604080832060038101546001909101546001600160a01b03908116808652600985528386209190921680865293529083205461250457600080fd5b600084815260076020526040902060020154158015612527575061252784611bc6565b61253057600080fd5b6001600160a01b0380821660009081526008602090815260408083209386168352929052205484146125a357600084815260076020526040808220548252902060010154841461257f57600080fd5b600084815260076020526040808220600180820154915484529190922001556125d9565b6000848152600760209081526040808320600101546001600160a01b038086168552600884528285209087168552909252909120555b6000848152600760205260409020600101541561263057600084815260076020526040808220600101548252902054841461261357600080fd5b600084815260076020526040808220805460019091015483529120555b6001600160a01b039081166000908152600960209081526040808320949093168252928352818120805460001901905593845260079091529091204360029091015550600190565b60008161268481611760565b6126bf5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b6126c7611b82565b806126eb57506126d681611ba8565b6001600160a01b0316336001600160a01b0316145b806126f75750600d5481145b6127325760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff161561274257600080fd5b6004805460ff19166001179055612757613a50565b600260008581526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a90046001600160401b03166001600160401b03166001600160401b0316815250509050600260008581526020019081526020016000206000808201600090556001820160006101000a8154906001600160a01b03021916905560028201600090556003820160006101000a8154906001600160a01b0302191690556004820160006101000a8154906001600160a01b0302191690556004820160146101000a8154906001600160401b030219169055505080602001516001600160a01b031663a9059cbb826080015183600001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505161297657600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808101516020808301805160608086018051604080516001600160601b031995851b8616818901529190931b9093166034840152815160288185030181526048840180845281519190960120935190518751838901516001600160a01b0393841690975290821660688501526001600160801b03908116608885015290941660a88301526001600160401b03421660c8830152519290931692909187917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b4819995919081900360e80190a450506004805460ff19169055506001919050565b600082612a9281611760565b612a9b57600080fd5b612aa3611b82565b15612aad57600080fd5b60045460ff1615612abd57600080fd5b6004805460ff19166001179055612ad2613a50565b506000848152600260208181526040808420815160c081018352815480825260018301546001600160a01b0390811695830195909552948201549281018390526003820154841660608201526004909101549283166080820152600160a01b9092046001600160401b031660a083015290929190612b51908790613801565b81612b5857fe5b04905080816001600160801b031614612bae576040805162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015290519081900360640190fd5b84856001600160801b031614612c04576040805162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015290519081900360640190fd5b841580612c0f575080155b80612c1a5750815185115b80612c285750816040015181115b15612c38576000935050506131bb565b6000612710612c4983600554613801565b81612c5057fe5b6060850151600654604080516323b872dd60e01b81523360048201526001600160a01b0392831660248201529490930460448501819052925192945016916323b872dd9160648083019260209291908290030181600087803b158015612cb557600080fd5b505af1158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051612d32576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015290519081900360640190fd5b8251612d3e9087612197565b6000888152600260205260409081902091909155830151612d5f9083612197565b6000888152600260208181526040808420909201939093556060860151608087015182516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810188905292519116936323b872dd936064808501949293928390030190829087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b5051612e3b5760405162461bcd60e51b8152600401808060200182810382526062815260200180613b5c6062913960800191505060405180910390fd5b6020808401516040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169263a9059cbb926044808401938290030181600087803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b505050506040513d6020811015612eb657600080fd5b5051612ef35760405162461bcd60e51b8152600401808060200182810382526033815260200180613a886033913960400191505060405180910390fd5b6040805188815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051948d90526001600160a01b03908116606884015293841660888301526001600160801b03808c1660a8840152871660c88301526001600160401b03421660e8830152513394909316927f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f918190036101080190a460808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051600654958e90526001600160a01b039182166068850152811660888401526001600160801b03808d1660a8850152881660c884015260e883018790529384166101088301526001600160401b034216610128830152513394909316927f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e2918190036101480190a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758885604051808381526020018281526020019250505060405180910390a36000878152600260205260409020546131b35760008781526002602081815260408084208481556001810180546001600160a01b031990811690915593810194909455600384018054909316909255600490920180546001600160e01b0319169055805189815290517f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def55676929181900390910190a15b600194505050505b506004805460ff1916905592915050565b600654600090600160a81b900460ff166131e557600080fd5b6000838152600260205260409020548214156132235761320483611bc6565b1561321857613212836124bd565b50613223565b61322183612274565b505b61322d8383612a86565b61323657600080fd5b61323f83611760565b80156132795750600083815260026020818152604080842060018101546001600160a01b03168552600a8352908420549387905291905254105b1561328e57600d83905561328c836110c7565b505b50600192915050565b60008060008060005b6001600160a01b038089166000908152600860209081526040808320938e1683529290522054156133df5750506001600160a01b038087166000908152600860209081526040808320938c16835292815282822054808352600291829052929091209081015490549193509085613318576000613320565b808b8a840101015b61332a8c83613801565b01613335838b613801565b1115613340576133df565b6133538461334e838c6139ba565b611ce3565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b985613380838c6139ba565b6040805192835260208301919091528051918290030190a18892506133ae896133a9838c6139ba565b612197565b9850826133bb8a8d613801565b816133c257fe5b049a508a15806133d0575088155b156133da576133df565b6132a0565b6000891180156133ef575060008b115b801561341357506001600160a01b038a166000908152600a60205260409020548b10155b15613430576134248b8b8b8b61343e565b9450613430858861231e565b505050509695505050505050565b6000613448611b82565b1561345257600080fd5b60045460ff161561346257600080fd5b6004805460ff19166001179055838261347a826139d1565b61348357600080fd5b61348c816139d1565b61349557600080fd5b86876001600160801b0316146134aa57600080fd5b84856001600160801b0316146134bf57600080fd5b600087116134cc57600080fd5b6001600160a01b0386166134df57600080fd5b600085116134ec57600080fd5b6001600160a01b0384166134ff57600080fd5b836001600160a01b0316866001600160a01b0316141561351e57600080fd5b613526613a50565b8781526001600160a01b03808816602083015260408201879052851660608201523360808201526001600160401b03421660a08201526135646139ef565b600081815260026020818152604080842086518155828701516001820180546001600160a01b039283166001600160a01b0319918216179091558389015195830195909555606088015160038301805491831691871691909117905560808801516004928301805460a08b01516001600160401b0316600160a01b0267ffffffffffffffff60a01b199385169190981617919091169590951790945581516323b872dd60e01b81523391810191909152306024820152604481018e90529051949850918b16936323b872dd936064808501948390030190829087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b505050506040513d602081101561367657600080fd5b505161368157600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516001600160601b031960608a811b82166020808501919091529089901b90911660348301528251602881840301815260488301808552815191909201206001600160a01b038b811690925290881660688301526001600160801b03808c166088840152891660a88301526001600160401b03421660c8830152915133929187917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360e80190a450506004805460ff1916905550949350505050565b6001600160a01b0383166000908152600a602052604081205485101561379c57600080fd5b6137a88585858561343e565b600c80546000838152600b60209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b600081158061381c5750508082028282828161381957fe5b04145b610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b600080831161387257600080fd5b8115801590613887575061388582611760565b155b156138a5576000918252600760205260409091206001015490613872565b816138ba576138b383613936565b9050610b82565b6138c483836139fc565b156138fe5760005b82158015906138e057506138e084846139fc565b156138b35750600082815260076020526040902060010154916138cc565b8115801590613914575061391283836139fc565b155b1561392f5760009182526007602052604090912054906138fe565b5080610b82565b600080821161394457600080fd5b600082815260026020908152604080832060038101546001909101546001600160a01b03908116808652600885528386209190921680865293529083205491929091905b811580159061399c575061399c86836139fc565b15610d94575060008181526007602052604090206001015490613988565b6000818311156139ca5781611220565b5090919050565b6001600160a01b031660009081526003602052604090205460ff1690565b6001805481019081905590565b60008181526002602081905260408083209091015484835290822054613a229190613801565b600084815260026020819052604080832090910154858352912054613a479190613801565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000a265627a7a723158207cc6f2603dc9d00f41b6466de743bd658e2563482ccb9f3cf861701ec4d595d664736f6c63430005100032",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CA9429A GT PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xBE71F5CE GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xD6FEBDE8 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xF09EA2A6 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF09EA2A6 EQ PUSH2 0xAAB JUMPI DUP1 PUSH4 0xF46901ED EQ PUSH2 0xAE7 JUMPI DUP1 PUSH4 0xF582D293 EQ PUSH2 0xB0D JUMPI DUP1 PUSH4 0xFF1FD974 EQ PUSH2 0xB15 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xD6FEBDE8 EQ PUSH2 0xA1A JUMPI DUP1 PUSH4 0xE1A6F014 EQ PUSH2 0xA3D JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0xA85 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xC2D526AA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xC2D526AA EQ PUSH2 0x986 JUMPI DUP1 PUSH4 0xC41A360A EQ PUSH2 0x9C1 JUMPI DUP1 PUSH4 0xD2B420CE EQ PUSH2 0x9DE JUMPI DUP1 PUSH4 0xD6F15469 EQ PUSH2 0x9FB JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0xBE71F5CE EQ PUSH2 0x92C JUMPI DUP1 PUSH4 0xBF7C734E EQ PUSH2 0x952 JUMPI DUP1 PUSH4 0xC2B6B58C EQ PUSH2 0x97E JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x943911BC GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x943911BC EQ PUSH2 0x8B6 JUMPI DUP1 PUSH4 0xA128171B EQ PUSH2 0x8D3 JUMPI DUP1 PUSH4 0xA78D4316 EQ PUSH2 0x8F2 JUMPI DUP1 PUSH4 0xB4F9B6C8 EQ PUSH2 0x90F JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x86B JUMPI DUP1 PUSH4 0x911550F4 EQ PUSH2 0x873 JUMPI DUP1 PUSH4 0x91BE90C8 EQ PUSH2 0x890 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x85EE7BA6 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x85EE7BA6 EQ PUSH2 0x7A9 JUMPI DUP1 PUSH4 0x8A72EA6A EQ PUSH2 0x7D7 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x83D JUMPI DUP1 PUSH4 0x8AF82A2E EQ PUSH2 0x863 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x7CA9429A EQ PUSH2 0x724 JUMPI DUP1 PUSH4 0x8185402B EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x78C JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x40E58EE5 GT PUSH2 0x2AD JUMPI DUP1 PUSH4 0x604B6A9C GT PUSH2 0x24B JUMPI DUP1 PUSH4 0x6B9D8C4B GT PUSH2 0x225 JUMPI DUP1 PUSH4 0x6B9D8C4B EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0x74C1D7D3 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0x75F12B21 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0x779997C3 EQ PUSH2 0x707 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x604B6A9C EQ PUSH2 0x645 JUMPI DUP1 PUSH4 0x61F54A79 EQ PUSH2 0x662 JUMPI DUP1 PUSH4 0x677170E1 EQ PUSH2 0x67F JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x49606455 GT PUSH2 0x287 JUMPI DUP1 PUSH4 0x49606455 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0x511FA487 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x557ED1BA EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0x56AD8764 EQ PUSH2 0x63D JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x40E58EE5 EQ PUSH2 0x53F JUMPI DUP1 PUSH4 0x4579268A EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0x467F0B7B EQ PUSH2 0x5AA JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x144A2752 GT PUSH2 0x31A JUMPI DUP1 PUSH4 0x1D834A1B GT PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x1D834A1B EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0x232CAE0B EQ PUSH2 0x510 JUMPI DUP1 PUSH4 0x2AED1905 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x2F90A6FC EQ PUSH2 0x537 JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x144A2752 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0x1B33D412 EQ PUSH2 0x4AD JUMPI PUSH2 0x35D JUMP JUMPDEST DUP1 PUSH4 0x1492A0B EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x374FC6F EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x621B4F6 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x7DA68F5 EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x93F5198 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x449 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36A PUSH2 0xB4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0xB5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0xB88 JUMP JUMPDEST PUSH2 0x400 PUSH2 0xD17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x60 ADD CALLDATALOAD AND PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD9D JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x485 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xE31 JUMP JUMPDEST PUSH2 0x36A PUSH2 0xEF9 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF36 JUMP JUMPDEST PUSH2 0x3AC PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1009 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1227 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 RETURN JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x12B4 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x5DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13D5 JUMP JUMPDEST PUSH2 0x621 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x65B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13FA JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x678 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x144D JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x145F JUMP JUMPDEST PUSH2 0x6B5 PUSH2 0x147C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x148B JUMP JUMPDEST PUSH2 0x36A PUSH2 0x14A8 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x15F0 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x7F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1869 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP9 ADD MSTORE DUP7 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND PUSH1 0xA0 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xC0 ADD SWAP1 RETURN JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18BB JUMP JUMPDEST PUSH2 0x3AC PUSH2 0x1924 JUMP JUMPDEST PUSH2 0x6B5 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1939 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x194B JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x195D JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1972 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x908 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x19DD JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x19EF JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x942 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A04 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x968 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1A73 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x1B82 JUMP JUMPDEST PUSH2 0x9A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x99C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1BA8 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x1C36 JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x1E2E JUMP JUMPDEST PUSH2 0x400 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1EF2 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x1F5E JUMP JUMPDEST PUSH2 0x36A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0x36A PUSH2 0x2050 JUMP JUMPDEST PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x2060 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xBD8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 ISZERO PUSH2 0xD01 JUMPI PUSH2 0xBEB DUP5 DUP8 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xBF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0xC18 SWAP2 SWAP1 PUSH2 0x2119 JUMP JUMPDEST DUP6 PUSH8 0xDE0B6B3A7640000 MUL LT ISZERO PUSH2 0xC2E JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP6 LT PUSH2 0xCA5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC61 SWAP1 DUP4 SWAP1 PUSH2 0x2148 JUMP JUMPDEST SWAP2 POP PUSH2 0xC83 DUP6 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP PUSH2 0xCA0 SWAP1 DUP3 SWAP1 PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0xCFC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xCD6 SWAP2 DUP10 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST PUSH2 0x2203 JUMP JUMPDEST DUP2 PUSH2 0xCDD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xCEA DUP4 DUP3 PUSH2 0x2148 JUMP JUMPDEST SWAP3 POP PUSH2 0xCF6 DUP3 DUP3 PUSH2 0x13B5 JUMP JUMPDEST PUSH1 0x0 SWAP6 POP POP JUMPDEST PUSH2 0xBDB JUMP JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xD20 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0xD5F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD94 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 PUSH2 0x1F5E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDA6 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0xDE5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP1 DUP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0xCE241D7CA1F669FEE44B6FC00B8EBA2DF3BB514EED0F6F668F8F89096E81ED94 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE3E DUP6 DUP6 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP4 GT ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xE75 SWAP1 DUP4 SWAP1 PUSH2 0x2148 JUMP JUMPDEST SWAP2 POP PUSH2 0xE97 DUP4 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2197 JUMP JUMPDEST SWAP3 POP DUP3 ISZERO PUSH2 0xEB4 JUMPI PUSH2 0xEA8 DUP2 PUSH2 0x195D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xEB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH2 0xD94 SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP9 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST DUP2 PUSH2 0xEF3 JUMPI INVALID JUMPDEST DIV PUSH2 0x2148 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0xF1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF2C DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x1 PUSH2 0x1E2E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xF86 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF8F DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0xF99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA2 DUP4 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0xFAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB4 DUP4 PUSH2 0x2274 JUMP JUMPDEST POP PUSH2 0xFBF DUP4 DUP4 PUSH2 0x231E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH32 0x6D5C16212BDEA16850DCE4D9FA2314C446BD30CE84700D9C36C7677C6D283940 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1014 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DUP2 MUL PUSH1 0xFF PUSH1 0xB0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH32 0xEA11E00EC1642BE9B494019B756440E2C57DBE9E59242C4F9C64CE33FB4F41D9 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x10D3 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x110E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3ABB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1116 PUSH2 0x1B82 JUMP JUMPDEST DUP1 PUSH2 0x113A JUMPI POP PUSH2 0x1125 DUP2 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x1146 JUMPI POP PUSH1 0xD SLOAD DUP2 EQ JUMPDEST PUSH2 0x1181 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x74 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AE8 PUSH1 0x74 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11CE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1217 JUMPI PUSH2 0x11E9 DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x1205 JUMPI PUSH2 0x11F7 DUP4 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x120E DUP4 PUSH2 0x2274 JUMP JUMPDEST PUSH2 0x1217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1220 DUP4 PUSH2 0x2678 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1235 PUSH2 0x3A50 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP3 DUP4 MSTORE POP POP PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP5 DUP4 ADD DUP6 SWAP1 MSTORE SWAP5 DUP4 ADD SLOAD SWAP6 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x3 DUP4 ADD SLOAD DUP6 AND PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP5 DUP6 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1304 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x130D DUP3 PUSH2 0x1760 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x132A JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x134A JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x9 NOT NUMBER ADD GT JUMPDEST PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP2 MLOAD CALLER DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xCB9D6176C6AAC6478EBB9A2754CDCE22A944DE29ED1F2642F8613884EBA4B40C SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13C8 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP4 AND PUSH2 0x1CE3 JUMP JUMPDEST PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1405 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1444 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x5 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST DUP1 PUSH2 0x14C2 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x14CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D3 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x14DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND DUP4 DUP11 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE DUP6 MLOAD PUSH1 0x28 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP3 ADD DUP1 DUP9 MSTORE DUP2 MLOAD SWAP2 DUP10 ADD SWAP2 SWAP1 SWAP2 KECCAK256 SWAP10 DUP13 SWAP1 MSTORE SWAP7 DUP9 SWAP1 MSTORE DUP5 SLOAD SWAP5 SWAP1 SWAP8 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 SWAP7 MSTORE DUP2 AND PUSH1 0x68 DUP8 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 DUP4 AND PUSH1 0x88 DUP8 ADD MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0xA8 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP5 DIV AND PUSH1 0xC8 DUP6 ADD MSTORE SWAP1 MLOAD DUP7 SWAP5 SWAP2 SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x70A14C213064359EDE031FD2A1645A11CE2EC825FFE6AB5CFB5B160C3EF4D0A2 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1640 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 ISZERO PUSH2 0x1753 JUMPI PUSH2 0x1653 DUP7 DUP6 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH2 0x167F SWAP2 SWAP1 PUSH2 0x2119 JUMP JUMPDEST DUP6 PUSH8 0xDE0B6B3A7640000 MUL LT ISZERO PUSH2 0x1695 JUMPI PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP6 LT PUSH2 0x1709 JUMPI PUSH2 0x16CA DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x16E7 SWAP1 DUP7 SWAP1 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP6 POP PUSH2 0x1704 SWAP1 DUP3 SWAP1 PUSH2 0x13B5 JUMP JUMPDEST PUSH2 0x174E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x173D SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP11 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST SWAP2 POP PUSH2 0x1749 DUP2 DUP7 PUSH2 0x13B5 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP JUMPDEST PUSH2 0x1643 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x17E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E747261637420697320616C726561647920696E697469616C697A656400 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP1 SLOAD CALLER SWAP3 AND DUP3 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xCE241D7CA1F669FEE44B6FC00B8EBA2DF3BB514EED0F6F668F8F89096E81ED94 SWAP2 SWAP1 LOG2 POP POP PUSH1 0x14 PUSH1 0x5 SSTORE PUSH1 0xE DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP2 SWAP3 SWAP2 DUP2 AND SWAP2 SWAP1 DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP7 JUMP JUMPDEST PUSH2 0x18C4 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1903 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197D CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x19BC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0xE DUP1 SLOAD DUP3 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x19F8 DUP2 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x1A01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0F CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1A4E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0xE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A7E CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1ABD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 DUP2 MSTORE CALLDATASIZE SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x4 CALLDATALOAD SWAP4 PUSH1 0x24 CALLDATALOAD SWAP4 DUP5 SWAP3 DUP7 SWAP3 CALLER SWAP3 PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 DUP9 SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x60 DUP3 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP9 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD DUP8 SWAP1 MSTORE DUP1 MLOAD PUSH32 0xC28D56449B0BB31E64EE7487E061F57A2E72AEA8019D810832F26DDA099823D0 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO DUP1 PUSH2 0x1BF2 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO ISZERO JUMPDEST DUP1 PUSH2 0xB82 JUMPI POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x8 DUP5 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C41 CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1C80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP4 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DUP2 MUL PUSH1 0xFF PUSH1 0xA8 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO DUP2 MSTORE SWAP1 MLOAD PUSH32 0x7089E4F0BCC948F9F723A361590C32D9C2284DA7AB1981B1249AD2EDB9F953C1 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CEF DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x1CF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D00 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x1D0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1D57 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1DFD JUMPI PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB30ED7B3 PUSH2 0x1D83 DUP7 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE MLOAD PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1DE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3A85 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1E1A JUMPI PUSH2 0x2A86 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0x31CC JUMPDEST SWAP1 POP PUSH2 0xD94 DUP6 DUP6 DUP4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E38 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1E8F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 LT ISZERO PUSH2 0x1EB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1EDB JUMPI PUSH2 0x1ED4 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x3297 JUMP JUMPDEST SWAP1 POP PUSH2 0xF2C JUMP JUMPDEST PUSH2 0x1EE7 DUP8 DUP8 DUP8 DUP8 PUSH2 0x343E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EFB CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x1F3A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1FAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x1499595B9D1C985B98DE48185D1D195B5C1D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x3A85 SWAP1 PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FCB JUMPI PUSH2 0x343E PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x3777 JUMPDEST SWAP1 POP PUSH2 0xF2C DUP7 DUP7 DUP7 DUP7 DUP6 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FEC CALLER PUSH2 0x2233 JUMP JUMPDEST PUSH2 0x202B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x206D DUP5 DUP7 PUSH2 0xB5B JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0x20E5 JUMPI PUSH2 0x20A6 DUP3 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH2 0x20C3 SWAP1 DUP5 SWAP1 PUSH2 0x2197 JUMP JUMPDEST SWAP3 POP DUP3 ISZERO PUSH2 0x20E0 JUMPI PUSH2 0x20D4 DUP2 PUSH2 0x195D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2070 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0xD94 SWAP2 DUP5 SWAP2 PUSH4 0x3B9ACA00 SWAP2 PUSH2 0xEEC SWAP2 DUP9 DUP5 MUL SWAP2 PUSH2 0xCD1 SWAP2 PUSH2 0x21E7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2139 PUSH2 0x2131 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH2 0xEF3 JUMP JUMPDEST DUP2 PUSH2 0x2140 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 LT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2139 PUSH2 0x2131 DUP6 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x0 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x2139 PUSH2 0x221F DUP6 DUP6 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0xEF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ ISZERO PUSH2 0x224E JUMPI POP PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x226C JUMPI POP PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0x2284 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x228E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0xC SLOAD EQ ISZERO PUSH2 0x22B6 JUMPI POP POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xC SSTORE SSTORE PUSH1 0x1 PUSH2 0x10B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x22C7 JUMPI POP DUP4 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x22E2 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x22B7 JUMP JUMPDEST DUP4 DUP3 EQ PUSH2 0x22F4 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP4 DUP4 MSTORE SWAP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP5 DUP2 MSTORE SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2327 DUP3 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x2330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 DUP4 ISZERO DUP1 PUSH2 0x2382 JUMPI POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x23AA JUMPI POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x23BB JUMPI POP PUSH2 0x23B9 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x23CE JUMPI PUSH2 0x23C9 DUP6 DUP6 PUSH2 0x3864 JUMP JUMPDEST PUSH2 0x23D7 JUMP JUMPDEST PUSH2 0x23D7 DUP6 PUSH2 0x3936 JUMP JUMPDEST SWAP4 POP DUP4 ISZERO PUSH2 0x2405 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP8 SWAP1 SSTORE DUP7 DUP4 MSTORE SWAP2 KECCAK256 DUP5 SWAP1 SSTORE PUSH2 0x2432 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP1 DUP6 SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x2456 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 SWAP1 SSTORE DUP7 DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 DUP2 MSTORE SWAP1 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x20FB9BAD86C18F7E22E8065258790D9416A7D2DF8FF05F80F82C46D38B925ACD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x9 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP2 SWAP1 SWAP3 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 SLOAD PUSH2 0x2504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD ISZERO DUP1 ISZERO PUSH2 0x2527 JUMPI POP PUSH2 0x2527 DUP5 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x2530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD DUP5 EQ PUSH2 0x25A3 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD DUP3 MSTORE SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP5 EQ PUSH2 0x257F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SLOAD SWAP2 SLOAD DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD SSTORE PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP6 MSTORE PUSH1 0x8 DUP5 MSTORE DUP3 DUP6 KECCAK256 SWAP1 DUP8 AND DUP6 MSTORE SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x2630 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP5 EQ PUSH2 0x2613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP4 MSTORE SWAP2 KECCAK256 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP4 DUP5 MSTORE PUSH1 0x7 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 KECCAK256 NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2684 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x26BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3ABB PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26C7 PUSH2 0x1B82 JUMP JUMPDEST DUP1 PUSH2 0x26EB JUMPI POP PUSH2 0x26D6 DUP2 PUSH2 0x1BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x26F7 JUMPI POP PUSH1 0xD SLOAD DUP2 EQ JUMPDEST PUSH2 0x2732 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x74 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3AE8 PUSH1 0x74 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2757 PUSH2 0x3A50 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB MUL NOT AND SWAP1 SSTORE POP POP DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP3 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2955 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x296B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP7 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD DUP8 MLOAD DUP4 DUP10 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP1 SWAP8 MSTORE SWAP1 DUP3 AND PUSH1 0x68 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND PUSH1 0x88 DUP6 ADD MSTORE SWAP1 SWAP5 AND PUSH1 0xA8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xC8 DUP4 ADD MSTORE MLOAD SWAP3 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP2 DUP8 SWAP2 PUSH32 0x9577941D28FFF863BFBEE4694A6A4A56FB09E169619189D2EAA750B5B4819995 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2A92 DUP2 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x2A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AA3 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x2AAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2ABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2AD2 PUSH2 0x3A50 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP5 DUP3 ADD SLOAD SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x3 DUP3 ADD SLOAD DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD SWAP3 DUP4 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH2 0x2B51 SWAP1 DUP8 SWAP1 PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x2B58 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x2BAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1CDC195B99081A5CC81B9BDD08185B881A5B9D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x2C04 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x1C5D585B9D1A5D1E481A5CC81B9BDD08185B881A5B9D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP5 ISZERO DUP1 PUSH2 0x2C0F JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2C1A JUMPI POP DUP2 MLOAD DUP6 GT JUMPDEST DUP1 PUSH2 0x2C28 JUMPI POP DUP2 PUSH1 0x40 ADD MLOAD DUP2 GT JUMPDEST ISZERO PUSH2 0x2C38 JUMPI PUSH1 0x0 SWAP4 POP POP POP PUSH2 0x31BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH2 0x2C49 DUP4 PUSH1 0x5 SLOAD PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x2C50 JUMPI INVALID JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 DIV PUSH1 0x44 DUP6 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD SWAP3 SWAP5 POP AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2CC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2D32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E647320746F20636F7665722066656500 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x2D3E SWAP1 DUP8 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE DUP4 ADD MLOAD PUSH2 0x2D5F SWAP1 DUP4 PUSH2 0x2197 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP3 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x80 DUP8 ADD MLOAD DUP3 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE SWAP3 MLOAD SWAP2 AND SWAP4 PUSH4 0x23B872DD SWAP4 PUSH1 0x64 DUP1 DUP6 ADD SWAP5 SWAP3 SWAP4 SWAP3 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2DD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2DE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2E3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x62 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3B5C PUSH1 0x62 SWAP2 CODECOPY PUSH1 0x80 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH1 0x44 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2EA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2EB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x2EF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x33 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x3A88 PUSH1 0x33 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP9 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD SWAP5 DUP14 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x68 DUP5 ADD MSTORE SWAP4 DUP5 AND PUSH1 0x88 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP13 AND PUSH1 0xA8 DUP5 ADD MSTORE DUP8 AND PUSH1 0xC8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xE8 DUP4 ADD MSTORE MLOAD CALLER SWAP5 SWAP1 SWAP4 AND SWAP3 PUSH32 0x3383E3357C77FD2E3A4B30DEEA81179BC70A795D053D14D5B7F2F01D0FD4596F SWAP2 DUP2 SWAP1 SUB PUSH2 0x108 ADD SWAP1 LOG4 PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH1 0x60 DUP1 DUP9 ADD DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP6 DUP6 SHL DUP7 AND DUP2 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP4 SHL SWAP1 SWAP4 AND PUSH1 0x34 DUP5 ADD MSTORE DUP2 MLOAD PUSH1 0x28 DUP2 DUP6 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP5 ADD DUP1 DUP5 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP7 ADD KECCAK256 SWAP4 MLOAD SWAP1 MLOAD PUSH1 0x6 SLOAD SWAP6 DUP15 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x68 DUP6 ADD MSTORE DUP2 AND PUSH1 0x88 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP14 AND PUSH1 0xA8 DUP6 ADD MSTORE DUP9 AND PUSH1 0xC8 DUP5 ADD MSTORE PUSH1 0xE8 DUP4 ADD DUP8 SWAP1 MSTORE SWAP4 DUP5 AND PUSH2 0x108 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH2 0x128 DUP4 ADD MSTORE MLOAD CALLER SWAP5 SWAP1 SWAP4 AND SWAP3 PUSH32 0xAE463BEEED705BDBA735CC0F80A21BC43E39FA85611FBCEB6E509CA190CC6E2 SWAP2 DUP2 SWAP1 SUB PUSH2 0x148 ADD SWAP1 LOG4 DUP3 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x819E390338FEFFE95E2DE57172D6FAF337853DFD15C7A09A32D76F7FD2443875 DUP9 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x31B3 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE SWAP4 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP1 SWAP3 SSTORE PUSH1 0x4 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 SSTORE DUP1 MLOAD DUP10 DUP2 MSTORE SWAP1 MLOAD PUSH32 0x88686B85D6F2C3AB9A04E4F15A22FCFA025FFD97226DCF0A67CDF682DEF55676 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST PUSH1 0x1 SWAP5 POP POP POP POP JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x31E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 EQ ISZERO PUSH2 0x3223 JUMPI PUSH2 0x3204 DUP4 PUSH2 0x1BC6 JUMP JUMPDEST ISZERO PUSH2 0x3218 JUMPI PUSH2 0x3212 DUP4 PUSH2 0x24BD JUMP JUMPDEST POP PUSH2 0x3223 JUMP JUMPDEST PUSH2 0x3221 DUP4 PUSH2 0x2274 JUMP JUMPDEST POP JUMPDEST PUSH2 0x322D DUP4 DUP4 PUSH2 0x2A86 JUMP JUMPDEST PUSH2 0x3236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x323F DUP4 PUSH2 0x1760 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3279 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0xA DUP4 MSTORE SWAP1 DUP5 KECCAK256 SLOAD SWAP4 DUP8 SWAP1 MSTORE SWAP2 SWAP1 MSTORE SLOAD LT JUMPDEST ISZERO PUSH2 0x328E JUMPI PUSH1 0xD DUP4 SWAP1 SSTORE PUSH2 0x328C DUP4 PUSH2 0x10C7 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP15 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO PUSH2 0x33DF JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP13 AND DUP4 MSTORE SWAP3 DUP2 MSTORE DUP3 DUP3 KECCAK256 SLOAD DUP1 DUP4 MSTORE PUSH1 0x2 SWAP2 DUP3 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SLOAD SWAP2 SWAP4 POP SWAP1 DUP6 PUSH2 0x3318 JUMPI PUSH1 0x0 PUSH2 0x3320 JUMP JUMPDEST DUP1 DUP12 DUP11 DUP5 ADD ADD ADD JUMPDEST PUSH2 0x332A DUP13 DUP4 PUSH2 0x3801 JUMP JUMPDEST ADD PUSH2 0x3335 DUP4 DUP12 PUSH2 0x3801 JUMP JUMPDEST GT ISZERO PUSH2 0x3340 JUMPI PUSH2 0x33DF JUMP JUMPDEST PUSH2 0x3353 DUP5 PUSH2 0x334E DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH2 0x1CE3 JUMP JUMPDEST POP PUSH32 0x3156F1FACEDD2C8392E4DE7BABF62E19484C1AC8F306F3A857C46A1BF39013B9 DUP6 PUSH2 0x3380 DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 DUP9 SWAP3 POP PUSH2 0x33AE DUP10 PUSH2 0x33A9 DUP4 DUP13 PUSH2 0x39BA JUMP JUMPDEST PUSH2 0x2197 JUMP JUMPDEST SWAP9 POP DUP3 PUSH2 0x33BB DUP11 DUP14 PUSH2 0x3801 JUMP JUMPDEST DUP2 PUSH2 0x33C2 JUMPI INVALID JUMPDEST DIV SWAP11 POP DUP11 ISZERO DUP1 PUSH2 0x33D0 JUMPI POP DUP9 ISZERO JUMPDEST ISZERO PUSH2 0x33DA JUMPI PUSH2 0x33DF JUMP JUMPDEST PUSH2 0x32A0 JUMP JUMPDEST PUSH1 0x0 DUP10 GT DUP1 ISZERO PUSH2 0x33EF JUMPI POP PUSH1 0x0 DUP12 GT JUMPDEST DUP1 ISZERO PUSH2 0x3413 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP12 LT ISZERO JUMPDEST ISZERO PUSH2 0x3430 JUMPI PUSH2 0x3424 DUP12 DUP12 DUP12 DUP12 PUSH2 0x343E JUMP JUMPDEST SWAP5 POP PUSH2 0x3430 DUP6 DUP9 PUSH2 0x231E JUMP JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3448 PUSH2 0x1B82 JUMP JUMPDEST ISZERO PUSH2 0x3452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 DUP3 PUSH2 0x347A DUP3 PUSH2 0x39D1 JUMP JUMPDEST PUSH2 0x3483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x348C DUP2 PUSH2 0x39D1 JUMP JUMPDEST PUSH2 0x3495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x34AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x34BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP8 GT PUSH2 0x34CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x34DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x34EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x34FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x351E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3526 PUSH2 0x3A50 JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP8 SWAP1 MSTORE DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x3564 PUSH2 0x39EF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP7 MLOAD DUP2 SSTORE DUP3 DUP8 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE DUP4 DUP10 ADD MLOAD SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 SSTORE PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x3 DUP4 ADD DUP1 SLOAD SWAP2 DUP4 AND SWAP2 DUP8 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP9 ADD MLOAD PUSH1 0x4 SWAP3 DUP4 ADD DUP1 SLOAD PUSH1 0xA0 DUP12 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP4 DUP6 AND SWAP2 SWAP1 SWAP9 AND OR SWAP2 SWAP1 SWAP2 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP15 SWAP1 MSTORE SWAP1 MLOAD SWAP5 SWAP9 POP SWAP2 DUP12 AND SWAP4 PUSH4 0x23B872DD SWAP4 PUSH1 0x64 DUP1 DUP6 ADD SWAP5 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x364C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3660 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x3681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH32 0xA2C251311B1A7A475913900A2A73DC9789A21B04BC737E050BBC506DD4EB3488 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP11 DUP2 SHL DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP10 SWAP1 SHL SWAP1 SWAP2 AND PUSH1 0x34 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x28 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x48 DUP4 ADD DUP1 DUP6 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 DUP2 AND SWAP1 SWAP3 MSTORE SWAP1 DUP9 AND PUSH1 0x68 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP13 AND PUSH1 0x88 DUP5 ADD MSTORE DUP10 AND PUSH1 0xA8 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB TIMESTAMP AND PUSH1 0xC8 DUP4 ADD MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP8 SWAP2 PUSH32 0x773FF502687307ABFA024AC9F62F9752A0D210DAC2FFD9A29E38E12E2EA82C82 SWAP2 DUP2 SWAP1 SUB PUSH1 0xE8 ADD SWAP1 LOG4 POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP6 LT ISZERO PUSH2 0x379C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x37A8 DUP6 DUP6 DUP6 DUP6 PUSH2 0x343E JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH32 0x8173832A493E0A3989E521458E55BFE9FEAC9F9B675A94E100B9D5A85F814862 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x381C JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0x3819 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xB82 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3887 JUMPI POP PUSH2 0x3885 DUP3 PUSH2 0x1760 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x38A5 JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 PUSH2 0x3872 JUMP JUMPDEST DUP2 PUSH2 0x38BA JUMPI PUSH2 0x38B3 DUP4 PUSH2 0x3936 JUMP JUMPDEST SWAP1 POP PUSH2 0xB82 JUMP JUMPDEST PUSH2 0x38C4 DUP4 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0x38FE JUMPI PUSH1 0x0 JUMPDEST DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x38E0 JUMPI POP PUSH2 0x38E0 DUP5 DUP5 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0x38B3 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 PUSH2 0x38CC JUMP JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3914 JUMPI POP PUSH2 0x3912 DUP4 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x392F JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 PUSH2 0x38FE JUMP JUMPDEST POP DUP1 PUSH2 0xB82 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x8 DUP6 MSTORE DUP4 DUP7 KECCAK256 SWAP2 SWAP1 SWAP3 AND DUP1 DUP7 MSTORE SWAP4 MSTORE SWAP1 DUP4 KECCAK256 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x399C JUMPI POP PUSH2 0x399C DUP7 DUP4 PUSH2 0x39FC JUMP JUMPDEST ISZERO PUSH2 0xD94 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 PUSH2 0x3988 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x39CA JUMPI DUP2 PUSH2 0x1220 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP2 ADD SWAP1 DUP2 SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP5 DUP4 MSTORE SWAP1 DUP3 KECCAK256 SLOAD PUSH2 0x3A22 SWAP2 SWAP1 PUSH2 0x3801 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP6 DUP4 MSTORE SWAP2 KECCAK256 SLOAD PUSH2 0x3A47 SWAP2 SWAP1 PUSH2 0x3801 JUMP JUMPDEST LT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST INVALID INVALID PUSH16 0x666665722E7061795F67656D2E747261 PUSH15 0x73666572286D73672E73656E646572 0x2C KECCAK256 PUSH18 0x75616E7469747929206661696C65644F6666 PUSH6 0x722077617320 PUSH5 0x656C657465 PUSH5 0x206F722074 PUSH2 0x6B65 PUSH15 0x2C206F72206E657665722065786973 PUSH21 0x65642E4F666665722063616E206E6F742062652063 PUSH2 0x6E63 PUSH6 0x6C6C65642062 PUSH6 0x636175736520 PUSH22 0x736572206973206E6F74206F776E65722C20616E6420 PUSH14 0x61726B6574206973206F70656E2C KECCAK256 PUSH2 0x6E64 KECCAK256 PUSH16 0x666665722073656C6C73207265717569 PUSH19 0x656420616D6F756E74206F6620746F6B656E73 0x2E PUSH16 0x666665722E6275795F67656D2E747261 PUSH15 0x7366657246726F6D286D73672E7365 PUSH15 0x6465722C206F666665722E6F776E65 PUSH19 0x2C207370656E6429206661696C6564202D2063 PUSH9 0x65636B207468617420 PUSH26 0x6F752063616E20706179207468652066656564732D617574682D PUSH22 0x6E617574686F72697A65640000000000000000000000 STOP LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH29 0xC6F2603DC9D00F41B6466DE743BD658E2563482CCB9F3CF861701EC4D5 SWAP6 0xD6 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
          "sourceMap": "16170:27189:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16170:27189:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16290:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;24821:177;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;24821:177:0;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;26974:1788;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;26974:1788:0;;;;;;;;;;;;;;;;;;;;:::i;14949:61::-;;;:::i;:::-;;18307:215;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;18307:215:0;;;;;;;;;;;;;-1:-1:-1;;;;;18307:215:0;;;;;;;;;;;;:::i;532:112::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;532:112:0;-1:-1:-1;;;;;532:112:0;;:::i;30527:1010::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;30527:1010:0;;;;;;;;;;;;;;;;;:::i;17382:23::-;;;:::i;19829:423::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;19829:423:0;;;-1:-1:-1;;;;;19829:423:0;;;;;;;;;;;;;;;;;;;;;;:::i;22034:511::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22034:511:0;;;;;;;:::i;5912:28::-;;;:::i;24431:230::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;24431:230:0;;;;:::i;17266:36::-;;;:::i;21580:368::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21580:368:0;;:::i;7581:298::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7581:298:0;;:::i;:::-;;;;;;;-1:-1:-1;;;;;7581:298:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22622:343;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22622:343:0;;:::i;18528:113::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18528:113:0;;;;;;-1:-1:-1;;;;;18528:113:0;;:::i;23581:177::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23581:177:0;-1:-1:-1;;;;;23581:177:0;;:::i;14860:83::-;;;:::i;:::-;;;;-1:-1:-1;;;;;14860:83:0;;;;;;;;;;;;;;17162:21;;;:::i;42496:125::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;42496:125:0;;:::i;26608:105::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;26608:105:0;;:::i;16818:60::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;16818:60:0;;;;;;;;;;:::i;17230:30::-;;;:::i;:::-;;;;-1:-1:-1;;;;;17230:30:0;;;;;;;;;;;;;;16709:60;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;16709:60:0;;;;;;;;;;:::i;14230:19::-;;;:::i;7940:440::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7940:440:0;;:::i;25748:178::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;25748:178:0;;;;;;;;;;:::i;28768:1753::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;28768:1753:0;;;;;;;;;;;;;;;;;;;;:::i;7351:112::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7351:112:0;;:::i;17412:437::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;17412:437:0;;;;;;;;-1:-1:-1;;;;;17412:437:0;;:::i;6021:43::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6021:43:0;;:::i;:::-;;;;;;;-1:-1:-1;;;;;6021:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6021:43:0;;;;;;;;;;;;;;;;42776:101;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;42776:101:0;-1:-1:-1;;;;;42776:101:0;;:::i;26410:92::-;;;:::i;505:20::-;;;:::i;25578:106::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;25578:106:0;;:::i;16945:40::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16945:40:0;-1:-1:-1;;;;;16945:40:0;;:::i;25224:103::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;25224:103:0;;:::i;42883:174::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;42883:174:0;;;;:::i;17046:40::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;17046:40:0;;:::i;18647:80::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18647:80:0;;:::i;43063:169::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;43063:169:0;-1:-1:-1;;;;;43063:169:0;;:::i;23227:297::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;23227:297:0;;;;;;;;:::i;14771:83::-;;;:::i;16620:41::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16620:41:0;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;7469:106;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7469:106:0;;:::i;26719:249::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;26719:249:0;;:::i;23809:172::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23809:172:0;;;;:::i;21033:496::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21033:496:0;;;;;;;:::i;20258:692::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;20258:692:0;;;-1:-1:-1;;;;;20258:692:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;42671:99::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;42671:99:0;-1:-1:-1;;;;;42671:99:0;;:::i;19257:493::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;19257:493:0;;;-1:-1:-1;;;;;19257:493:0;;;;;;;;;;;;;;;;;;;:::i;43238:119::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;43238:119:0;-1:-1:-1;;;;;43238:119:0;;:::i;16241:29::-;;;:::i;31543:1010::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;31543:1010:0;;;;;;;;;;;;;;;;;:::i;16290:34::-;;;-1:-1:-1;;;16290:34:0;;;;;:::o;24821:177::-;-1:-1:-1;;;;;24949:24:0;;;24919:7;24949:24;;;:5;:24;;;;;;;;:42;;;;;;;;;;24821:177;;;;;:::o;26974:1788::-;27162:6;;27125:16;;27162:6;;27161:7;27153:38;;;;;-1:-1:-1;;;27153:38:0;;;;;;;;;;;;-1:-1:-1;;;27153:38:0;;;;;;;;;;;;;;;27201:15;27226:1484;27233:11;;27226:1484;;27314:30;27327:7;27336;27314:12;:30::i;:::-;27304:40;-1:-1:-1;27406:12:0;27398:21;;;;;;27620:15;;;;:6;:15;;;;;;;;:23;;;;27645;;27615:54;;27620:23;27615:4;:54::i;:::-;27579:7;27589;27579:17;:90;27558:202;;;27702:5;;27558:202;27788:15;;;;:6;:15;;;;;;;;:23;;27777:34;;27773:927;;27944:15;;;;:6;:15;;;;;:23;27930:38;;27934:8;;27930:3;:38::i;:::-;27919:49;;28030:37;28034:7;28043:6;:15;28050:7;28043:15;;;;;;;;;;;:23;;;28030:3;:37::i;:::-;28116:16;28142:15;;;:6;:15;;;;;:23;28020:47;;-1:-1:-1;28111:56:0;;28124:7;;28111:4;:56::i;:::-;27773:927;;;28260:12;28371:15;;;:6;:15;;;;;;;:23;;28396;;;28445:5;;28295:147;;28325:15;;;;28366:54;;:4;:54::i;:::-;28295:4;:147::i;:::-;:155;;;;;;28260:190;;28479:19;28483:8;28493:4;28479:3;:19::i;:::-;28468:30;-1:-1:-1;28550:37:0;28563:7;28581:4;28550;:37::i;:::-;28663:1;28653:11;;27773:927;;27226:1484;;;28739:15;28727:8;:27;;28719:36;;;;;;26974:1788;;;;;;;:::o;14949:61::-;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;14989:7;:14;;-1:-1:-1;;;;14989:14:0;-1:-1:-1;;;14989:14:0;;;14949:61::o;18307:215::-;18439:7;18473:41;18479:7;-1:-1:-1;;;;;18473:41:0;18488:7;18497;-1:-1:-1;;;;;18473:41:0;18506:7;18473:5;:41::i;:::-;18465:50;18307:215;-1:-1:-1;;;;;18307:215:0:o;532:112::-;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;590:5;:14;;-1:-1:-1;;;;;;590:14:0;-1:-1:-1;;;;;590:14:0;;;;;;;;;;619:18;;631:5;;;619:18;;;532:112;:::o;30527:1010::-;30649:16;30677:15;30695:30;30708:7;30717;30695:12;:30::i;:::-;30677:48;;30771:500;30788:15;;;;:6;:15;;;;;;;;:23;;30778:33;;30771:500;;;30852:15;;;;:6;:15;;;;;:23;30838:38;;30842:8;;30838:3;:38::i;:::-;30827:49;;30932:37;30936:7;30945:6;:15;30952:7;30945:15;;;;;;;;;;;:23;;;30932:3;:37::i;:::-;30922:47;-1:-1:-1;31012:11:0;;31008:253;;31100:22;31114:7;31100:13;:22::i;:::-;31090:32;-1:-1:-1;31182:12:0;31174:21;;;;;;30771:500;;;31390:15;;;;:6;:15;;;;;;;;:23;;31415;;;31291:180;;31308:8;;31456:5;;31330:123;;31352:15;;;;31385:54;;:4;:54::i;31330:123::-;:131;;;;;;31291:3;:180::i;17382:23::-;;;-1:-1:-1;;;17382:23:0;;;;;:::o;19829:423::-;20167:7;14369:10;:8;:10::i;:::-;14368:11;14360:20;;;;;;20193:52;20199:7;20208;20217;20226;20235:3;20240:4;20193:5;:52::i;:::-;20186:59;19829:423;-1:-1:-1;;;;;;19829:423:0:o;22034:511::-;22181:6;;22156:4;;22181:6;;22180:7;22172:38;;;;;-1:-1:-1;;;22172:38:0;;;;;;;;;;;;-1:-1:-1;;;22172:38:0;;;;;;;;;;;;;;;22229:17;22243:2;22229:13;:17::i;:::-;22228:18;22220:27;;;;;;22306:12;22315:2;22306:8;:12::i;:::-;22298:21;;;;;;22363:9;22369:2;22363:5;:9::i;:::-;;22423:14;22429:2;22433:3;22423:5;:14::i;:::-;22492:25;;;22502:10;22492:25;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22534:4:0;22034:511;;;;:::o;5912:28::-;;;;:::o;24431:230::-;24529:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;24549:15;:34;;;;;-1:-1:-1;;;24549:34:0;;;-1:-1:-1;;;;24549:34:0;;;;;;;;;;;24598:35;;;24617:15;;;;24549:34;24617:15;24598:35;;;;;;;;;;;;;;;-1:-1:-1;24650:4:0;741:1;24431:230;;;:::o;17266:36::-;;;-1:-1:-1;;;17266:36:0;;;;;:::o;21580:368::-;21639:12;21626:2;17952:12;17961:2;17952:8;:12::i;:::-;17944:70;;;;-1:-1:-1;;;17944:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18045:10;:8;:10::i;:::-;:40;;;;18073:12;18082:2;18073:8;:12::i;:::-;-1:-1:-1;;;;;18059:26:0;:10;-1:-1:-1;;;;;18059:26:0;;18045:40;:56;;;;18095:6;;18089:2;:12;18045:56;18024:219;;;;-1:-1:-1;;;18024:219:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21672:6;;;;21671:7;21663:38;;;;;-1:-1:-1;;;21663:38:0;;;;;;;;;;;;-1:-1:-1;;;21663:38:0;;;;;;;;;;;;;;;21715:15;;-1:-1:-1;;;21715:15:0;;;;21711:178;;;21750:17;21764:2;21750:13;:17::i;:::-;21746:133;;;21795:11;21803:2;21795:7;:11::i;:::-;21787:20;;;;;;21746:133;;;21854:9;21860:2;21854:5;:9::i;:::-;21846:18;;;;;;21905:16;21918:2;21905:12;:16::i;:::-;21898:23;21580:368;-1:-1:-1;;;21580:368:0:o;7581:298::-;7669:7;7690:5;7709:7;7730:5;7760:22;;:::i;:::-;-1:-1:-1;;;7785:10:0;;;;-1:-1:-1;;7785:6:0;:10;;;;;;;;;7760:35;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7760:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7760:35:0;;;-1:-1:-1;;;;;7760:35:0;;;;;;;;;;;;7581:298::o;22622:343::-;22695:6;;22670:4;;22695:6;;22694:7;22686:38;;;;;-1:-1:-1;;;22686:38:0;;;;;;;;;;;;-1:-1:-1;;;22686:38:0;;;;;;;;;;;;;;;22756:12;22765:2;22756:8;:12::i;:::-;22755:13;:52;;;;-1:-1:-1;22788:9:0;;;;:5;:9;;;;;:14;;;:19;;22755:52;:106;;;;-1:-1:-1;22827:9:0;;;;:5;:9;;;;;:14;;;-1:-1:-1;;22844:12:0;:17;-1:-1:-1;22755:106:0;22734:137;;;;;;22888:9;;;;:5;:9;;;;;;;;22881:16;;;;;;;;;;;;;;;22912:25;;22922:10;22912:25;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22954:4:0;22622:343;;;:::o;18528:113::-;18602:31;18614:2;-1:-1:-1;;;;;18602:31:0;;:3;:31::i;:::-;18594:40;;;;;;18528:113;;:::o;23581:177::-;-1:-1:-1;;;;;23728:23:0;23702:7;23728:23;;;:5;:23;;;;;;;23581:177::o;14860:83::-;14932:3;14860:83;:::o;17162:21::-;;;;:::o;42496:125::-;42558:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;42574:6:0;:19;42610:4;;42496:125::o;26608:105::-;26671:7;26697:9;;;:5;:9;;;;;;;26608:105::o;16818:60::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;17230:30::-;;;-1:-1:-1;;;;;17230:30:0;;:::o;16709:60::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14230:19::-;;;-1:-1:-1;;;14230:19:0;;;;;:::o;7940:440::-;7992:3;14502:12;7992:3;14502:8;:12::i;:::-;14494:21;;;;;;14534:10;:8;:10::i;:::-;14533:11;14525:20;;;;;;8008:10;8167;;;:6;:10;;;;;;;;:16;;;;;8113:18;;;8133;;;;8096:56;;-1:-1:-1;;;;;;8096:56:0;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;8096:56:0;;;;;;8086:67;;;;;;;;;8197:10;;;;;;;;8269:18;;8310;;;;;-1:-1:-1;;;;;8113:18:0;;;8048:325;;;8133:18;;8048:325;;;;-1:-1:-1;;;;;8048:325:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;8343:20:0;;;8048:325;;;;;;8029:3;;8167:16;;;;;8086:67;;8029:3;;8048:325;;;;;;;;;;14555:1;7940:440;;:::o;25748:178::-;-1:-1:-1;;;;;25877:24:0;;;25847:7;25877:24;;;:5;:24;;;;;;;;:42;;;;;;;;;;;;;25748:178::o;28768:1753::-;28955:6;;28918:16;;28955:6;;28954:7;28946:38;;;;;-1:-1:-1;;;28946:38:0;;;;;;;;;;;;-1:-1:-1;;;28946:38:0;;;;;;;;;;;;;;;28994:15;29019:1450;29026:11;;29019:1450;;29110:30;29123:7;29132;29110:12;:30::i;:::-;29100:40;-1:-1:-1;29202:12:0;29194:21;;;;;;29379:15;;;;:6;:15;;;;;;;;:23;;29404;;;29374:54;;29379:23;29374:4;:54::i;:::-;29338:7;29348;29338:17;:90;29317:202;;;29461:5;;29317:202;29547:15;;;;:6;:15;;;;;:23;29536:34;;29532:927;;29689:38;29693:8;29703:6;:15;29710:7;29703:15;;;;;;;;;;;:23;;;29689:3;:38::i;:::-;29800:15;;;;:6;:15;;;;;:23;29678:49;;-1:-1:-1;29787:37:0;;29791:7;;29787:3;:37::i;:::-;29872:16;29898:15;;;:6;:15;;;;;:23;29777:47;;-1:-1:-1;29867:56:0;;29880:7;;29867:4;:56::i;:::-;29532:927;;;30157:15;;;;:6;:15;;;;;;;;:23;;;;30182;;30026:228;;30051:8;;30231:5;;30081:147;;30111:15;;;;30152:54;;:4;:54::i;30026:228::-;30015:239;-1:-1:-1;30304:40:0;30317:7;30335;30304:4;:40::i;:::-;30420:1;30410:11;;29532:927;29019:1450;;;30498:15;30486:8;:27;;30478:36;;;;;7351:112;7402:11;7432:10;;;:6;:10;;;;;:20;;;-1:-1:-1;;;7432:20:0;;-1:-1:-1;;;;;7432:20:0;:24;;;7351:112::o;17412:437::-;17540:11;;-1:-1:-1;;;17540:11:0;;;;17539:12;17531:56;;;;;-1:-1:-1;;;17531:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;17597:24;:35;;-1:-1:-1;;;;17597:35:0;-1:-1:-1;;;17597:35:0;;;;;;;17642:5;:14;;-1:-1:-1;;;;;;17642:14:0;;;-1:-1:-1;;;;;17642:14:0;;;;;;-1:-1:-1;17667:18:0;;17675:10;17667:18;;;;;;17700:23;;;;-1:-1:-1;17700:23:0;-1:-1:-1;;17812:2:0;17803:6;:11;17824;:18;;-1:-1:-1;;;;17824:18:0;-1:-1:-1;;;17824:18:0;;;17412:437::o;6021:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6021:43:0;;;;;;;;;;;;;;-1:-1:-1;;;6021:43:0;;-1:-1:-1;;;;;6021:43:0;;:::o;42776:101::-;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;42845:17:0;42865:5;42845:17;;;:9;:17;;;;;:25;;-1:-1:-1;;42845:25:0;;;42776:101::o;26410:92::-;26490:5;;26410:92;:::o;505:20::-;;;-1:-1:-1;;;;;505:20:0;;:::o;25578:106::-;25637:7;25663:9;;;:5;:9;;;;;:14;;25578:106::o;16945:40::-;;;;;;;;;;;;;:::o;25224:103::-;25280:7;25306:9;;;:5;:9;;;;;:14;;;;25224:103::o;42883:174::-;42978:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;42998:24:0;:31;;;;;-1:-1:-1;;;42998:31:0;-1:-1:-1;;;;42998:31:0;;;;;;-1:-1:-1;42883:174:0;;;:::o;17046:40::-;;;;;;;;;;;;;:::o;18647:80::-;18700:19;18715:2;18700:6;:19::i;:::-;18692:28;;;;;;18647:80;:::o;43063:169::-;43157:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;43177:15:0;:27;;-1:-1:-1;;;;;43177:27:0;;-1:-1:-1;;;;;;43177:27:0;;;;;;;43063:169;;;:::o;23227:297::-;23401:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;15450:53;;;15416:9;15450:53;;;;;;;;;15494:8;15450:53;;;;;;15358:1;15345:15;;15393:2;15380:16;;;;15345:15;;15467:10;;-1:-1:-1;15458:7:0;;-1:-1:-1;;;;;;15458:7:0;;15416:9;;-1:-1:-1;;15450:53:0;;;;-1:-1:-1;15494:8:0;;-1:-1:-1;15450:53:0;1:33:-1;99:1;81:16;;;74:27;15450:53:0;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;15450:53:0;;;;-1:-1:-1;15450:53:0;;-1:-1:-1;;;;;15450:53:0;-1:-1:-1;;;;;23417:23:0;;;;;;:5;:23;;;;;;;;;:30;;;23462:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;23513:4:0;;23227:297;-1:-1:-1;;;;;23227:297:0:o;14771:83::-;14812:11;14771:83;:::o;16620:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7469:106::-;7520:13;7552:10;;;:6;:10;;;;;:16;;;-1:-1:-1;;;;;7552:16:0;;7469:106::o;26719:249::-;26775:4;26810:9;;;:5;:9;;;;;:14;:19;;;:54;;-1:-1:-1;26845:9:0;;;;:5;:9;;;;;:14;;;:19;;26810:54;:151;;;-1:-1:-1;;26880:34:0;26894:10;;;:6;:10;;;;;;;;:18;;;;-1:-1:-1;;;;;26894:18:0;;;26880:34;;:5;:34;;;;;26923:18;;;;;;26880:63;;;;;;;;:81;;26719:249::o;23809:172::-;23873:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;23889:10;:24;;;;;-1:-1:-1;;;23889:24:0;;;-1:-1:-1;;;;23889:24:0;;;;;;;;;;;23928:25;;;23942:10;;;;23889:24;23942:10;23928:25;;;;;;;;;;;;;;;-1:-1:-1;23970:4:0;23809:172;;;:::o;21033:496::-;21102:4;21089:2;14502:12;14511:2;14502:8;:12::i;:::-;14494:21;;;;;;14534:10;:8;:10::i;:::-;14533:11;14525:20;;;;;;21127:6;;;;21126:7;21118:38;;;;;-1:-1:-1;;;21118:38:0;;;;;;;;;;;;-1:-1:-1;;;21118:38:0;;;;;;;;;;;;;;;21212:24;;-1:-1:-1;;;21212:24:0;;;;21208:179;;;21262:15;;-1:-1:-1;;;;;21262:15:0;21252:52;21322:12;21331:2;21322:8;:12::i;:::-;21252:124;;;-1:-1:-1;;;;;;21252:124:0;;;;;;;-1:-1:-1;;;;;21252:124:0;;;;;;;21352:10;21252:124;;;;;;;;;;;;;;;;;;;-1:-1:-1;21252:124:0;;;;5:2:-1;;;;30:1;27;20:12;5:2;21252:124:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21252:124:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;21208:179:0;21455:15;;21396:44;;-1:-1:-1;;;21455:15:0;;;;:35;;21481:9;21455:35;;;21473:5;21455:35;21396:94;;21508:14;21511:2;21515:6;21508:2;:14;;:::i;20258:692::-;20648:7;14369:10;:8;:10::i;:::-;14368:11;14360:20;;;;;;20676:6;;;;20675:7;20667:38;;;;;-1:-1:-1;;;20667:38:0;;;;;;;;;;;;-1:-1:-1;;;20667:38:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;20723:23:0;;;;;;:5;:23;;;;;;:34;-1:-1:-1;20723:34:0;20715:43;;;;;;20773:15;;-1:-1:-1;;;20773:15:0;;;;20769:111;;;20811:58;20819:7;20828;20837;20846;20855:3;20860:8;20811:7;:58::i;:::-;20804:65;;;;20769:111;20896:47;20908:7;20917;20926;20935;20896:11;:47::i;:::-;20889:54;20258:692;-1:-1:-1;;;;;;;20258:692:0:o;42671:99::-;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;42737:19:0;;;;;:9;:19;;;;;:26;;-1:-1:-1;;42737:26:0;42759:4;42737:26;;;42671:99::o;19257:493::-;19534:6;;19506:7;;19534:6;;19533:7;19525:38;;;;;-1:-1:-1;;;19525:38:0;;;;;;;;;;;;-1:-1:-1;;;19525:38:0;;;;;;;;;;;;;;;19649:15;;19573:61;;-1:-1:-1;;;19649:15:0;;;;:39;;19677:11;19649:39;;;19667:7;19649:39;19573:115;;19705:38;19708:7;19717;19726;19735;19705:2;:38;;:::i;43238:119::-;43297:4;682:24;695:10;682:12;:24::i;:::-;674:57;;;;;-1:-1:-1;;;674:57:0;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;674:57:0;;;;;;;;;;;;;;;-1:-1:-1;43313:5:0;:16;;-1:-1:-1;;;;;43313:16:0;;-1:-1:-1;;;;;;43313:16:0;;;;;;;43238:119;;;:::o;16241:29::-;;;-1:-1:-1;;;16241:29:0;;;;;:::o;31543:1010::-;31665:16;31693:15;31711:30;31724:7;31733;31711:12;:30::i;:::-;31693:48;;31787:500;31804:15;;;;:6;:15;;;;;:23;31794:33;;31787:500;;;31854:38;31858:8;31868:6;:15;31875:7;31868:15;;;;;;;;;;;:23;;;31854:3;:38::i;:::-;31961:15;;;;:6;:15;;;;;:23;31843:49;;-1:-1:-1;31948:37:0;;31952:7;;31948:3;:37::i;:::-;31938:47;-1:-1:-1;32028:11:0;;32024:253;;32116:22;32130:7;32116:13;:22::i;:::-;32106:32;-1:-1:-1;32198:12:0;32190:21;;;;;;31787:500;;;32406:15;;;;:6;:15;;;;;;;;:23;;;;32431;;32307:180;;32324:8;;32472:5;;32346:123;;32368:15;;;;32401:54;;:4;:54::i;2311:118::-;2370:9;2421:1;2395:23;2399:11;2403:1;2011:6;2399:3;:11::i;:::-;2416:1;2412;:5;;2395:23;:27;;;;;;;2311:118;-1:-1:-1;;;2311:118:0:o;1102:135::-;1194:5;;;1189:16;;;;1181:49;;;;;-1:-1:-1;;;1181:49:0;;;;;;;;;;;;-1:-1:-1;;;1181:49:0;;;;;;;;;;;;;;1243:136;1335:5;;;1330:16;;;;1322:50;;;;;-1:-1:-1;;;1322:50:0;;;;;;;;;;;;-1:-1:-1;;;1322:50:0;;;;;;;;;;;;;;2435:118;2494:9;2545:1;2519:23;2523:11;2527:1;2046:6;2523:3;:11::i;2185:120::-;2244:9;2046:6;2269:23;2273:9;2277:1;2280;2273:3;:9::i;:::-;2290:1;2046:6;2284:7;;755:245;813:4;-1:-1:-1;;;;;833:20:0;;848:4;833:20;829:165;;;-1:-1:-1;876:4:0;869:11;;829:165;908:5;;-1:-1:-1;;;;;901:12:0;;;908:5;;901:12;897:97;;;-1:-1:-1;936:4:0;929:11;;897:97;-1:-1:-1;978:5:0;971:12;;41419:1071;41557:5;;41527:4;;41557:5;41697:17;41711:2;41697:13;:17::i;:::-;41696:18;41688:27;;;;;;41789:2;41780:5;;:11;41776:258;;;-1:-1:-1;;;41883:9:0;;;;:5;:9;;;;;;;41875:5;:17;41945:13;-1:-1:-1;42012:11:0;;41776:258;42043:141;42056:1;42050:3;:7;:20;;;;;42068:2;42061:3;:9;;42050:20;42043:141;;;-1:-1:-1;42163:10:0;;;;:5;:10;;;;;;;42043:141;;;42204:2;42197:3;:9;42193:112;;42289:5;42282:12;;;;;;42193:112;42327:9;;;;:5;:9;;;;;;;;42314:10;;;;;;:22;;;;42409:9;;;:13;;-1:-1:-1;;;;41419:1071:0;;;:::o;38842:1346::-;38974:12;38983:2;38974:8;:12::i;:::-;38966:21;;;;;;38998:13;39014:10;;;:6;:10;;;;;:18;;;;;39058;;;;-1:-1:-1;;;;;39014:18:0;;;;39058;;;39135:8;;;:54;;-1:-1:-1;39159:11:0;;;;:6;:11;;;;;:19;;;-1:-1:-1;;;;;39159:30:0;;;:19;;:30;;39135:54;:100;;;-1:-1:-1;39205:11:0;;;;:6;:11;;;;;:19;;;-1:-1:-1;;;;;39205:30:0;;;:19;;:30;;39135:100;:135;;;;39252:18;39266:3;39252:13;:18::i;:::-;39251:19;39135:135;:191;;39309:17;39318:2;39322:3;39309:8;:17::i;:::-;39135:191;;;39285:9;39291:2;39285:5;:9::i;:::-;39129:197;-1:-1:-1;39341:8:0;;39337:484;;-1:-1:-1;39539:10:0;;;;:5;:10;;;;;;:15;;;;39568:20;;;;39602:9;;;;;:20;;;39337:484;;;-1:-1:-1;;;;;;39709:23:0;;;;;;;:5;:23;;;;;;;;:41;;;;;;;;;;;39764:46;;;;39337:484;39835:12;;39831:264;;40022:14;;;;:5;:14;;;;;;:24;;;40060:9;;;;;:14;;:24;;;39831:264;-1:-1:-1;;;;;40105:23:0;;;;;;;:5;:23;;;;;;;;:41;;;;;;;;;;;;:43;;;;;;40163:18;;;;;;;;;;;;;;;;;38842:1346;;;;;:::o;40259:1084::-;40373:4;40415:10;;;:6;:10;;;;;;;;:18;;;;;40470;;;;-1:-1:-1;;;;;40470:18:0;;;40507:14;;;:5;:14;;;;;40415:18;;;;40507:23;;;;;;;;;40499:36;;;;;;40567:9;;;;:5;:9;;;;;:14;;;:19;:90;;;;;40640:17;40654:2;40640:13;:17::i;:::-;40546:121;;;;;;-1:-1:-1;;;;;40688:14:0;;;;;;;:5;:14;;;;;;;;:23;;;;;;;;;;40682:29;;40678:326;;40786:21;40792:9;;;40786:5;40792:9;;;;;;:14;40786:21;;;;:26;;;:32;;40778:41;;;;;;40862:9;;;;:5;:9;;;;;;:14;;;;;40839;;40833:21;;;;;;:26;:43;40678:326;;;40979:9;;;;:5;:9;;;;;;;;:14;;;-1:-1:-1;;;;;40953:14:0;;;;;:5;:14;;;;;:23;;;;;;;;;;;:40;40678:326;41018:9;;;;:5;:9;;;;;:14;;;:19;41014:197;;41110:21;41116:9;;;41110:5;41116:9;;;;;;:14;;;41110:21;;;;:26;:32;;41102:41;;;;;;41186:9;;;;:5;:9;;;;;;:14;;41163;;;;;41157:21;;;;:43;41014:197;-1:-1:-1;;;;;41221:14:0;;;;;;;:5;:14;;;;;;;;:23;;;;;;;;;;;;:25;;-1:-1:-1;;41221:25:0;;;41256:9;;;:5;:9;;;;;;41273:12;41256:14;;;;:29;-1:-1:-1;;;40259:1084:0:o;11217:726::-;11321:12;11279:2;17952:12;17961:2;17952:8;:12::i;:::-;17944:70;;;;-1:-1:-1;;;17944:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18045:10;:8;:10::i;:::-;:40;;;;18073:12;18082:2;18073:8;:12::i;:::-;-1:-1:-1;;;;;18059:26:0;:10;-1:-1:-1;;;;;18059:26:0;;18045:40;:56;;;;18095:6;;18089:2;:12;18045:56;18024:219;;;;-1:-1:-1;;;18024:219:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7094:6;;;;7093:7;7085:16;;;;;;7111:6;:13;;-1:-1:-1;;7111:13:0;7120:4;7111:13;;;11442:22;;:::i;:::-;11467:6;:10;11474:2;11467:10;;;;;;;;;;;11442:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;-1:-1:-1;;;;;11442:35:0;;;;;;;11494:6;:10;11501:2;11494:10;;;;;;;;;;;;11487:17;;;;;;;;;;;;;;;-1:-1:-1;;;;;11487:17:0;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11487:17:0;;;;;;;;;;;;;;-1:-1:-1;;;;;11487:17:0;;;;;;;;;;;;;;-1:-1:-1;;;;;11487:17:0;;;;;;;11523:5;:13;;;-1:-1:-1;;;;;11523:22:0;;11546:5;:11;;;11559:5;:13;;;11523:50;;;;;;;;;;;;;-1:-1:-1;;;;;11523:50:0;-1:-1:-1;;;;;11523:50:0;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11523:50:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11523:50:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11523:50:0;11515:59;;;;;;11590:17;;;;;;;;;;;;;;;;;11739:11;;;;11695:13;;;;;;11710;;;;;;11678:46;;;-1:-1:-1;;;;;;11678:46:0;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;11678:46:0;;;;;;11668:57;;;;;;;11764:13;;11791;;11826;;11862;;;;-1:-1:-1;;;;;11622:289:0;;;;;;;;;;;;;-1:-1:-1;;;;;11622:289:0;;;;;;;;;;;;;;-1:-1:-1;;;;;11897:3:0;11622:289;;;;;;;;;;;11668:57;;11651:2;;11622:289;;;;;;;;;;-1:-1:-1;;7145:6:0;:14;;-1:-1:-1;;7145:14:0;;;-1:-1:-1;11932:4:0;;11217:726;-1:-1:-1;11217:726:0:o;8591:2484::-;8707:4;8665:2;14502:12;14511:2;14502:8;:12::i;:::-;14494:21;;;;;;14534:10;:8;:10::i;:::-;14533:11;14525:20;;;;;;7094:6;;;;7093:7;7085:16;;;;;;7111:6;:13;;-1:-1:-1;;7111:13:0;7120:4;7111:13;;;8727:22;;:::i;:::-;-1:-1:-1;8752:10:0;;;;:6;:10;;;;;;;;8727:35;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8727:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8727:35:0;;;-1:-1:-1;;;;;8727:35:0;;;;;;;8752:10;8727:35;8788:28;;8792:8;;8788:3;:28::i;:::-;:44;;;;;;8772:60;;8869:5;8859;-1:-1:-1;;;;;8851:23:0;;8843:55;;;;;-1:-1:-1;;;8843:55:0;;;;;;;;;;;;-1:-1:-1;;;8843:55:0;;;;;;;;;;;;;;;8937:8;8924;-1:-1:-1;;;;;8916:29:0;;8908:64;;;;;-1:-1:-1;;;8908:64:0;;;;;;;;;;;;-1:-1:-1;;;8908:64:0;;;;;;;;;;;;;;;9054:13;;;:39;;-1:-1:-1;9083:10:0;;9054:39;:79;;;-1:-1:-1;9120:13:0;;9109:24;;9054:79;:116;;;;9157:5;:13;;;9149:5;:21;9054:116;9037:181;;;9202:5;9195:12;;;;;;9037:181;9426:11;9461:5;9440:18;9444:5;9451:6;;9440:3;:18::i;:::-;:26;;;;;9497:13;;;;9536:5;;9497:50;;;-1:-1:-1;;;9497:50:0;;9524:10;9497:50;;;;-1:-1:-1;;;;;9536:5:0;;;9497:50;;;;9440:26;;;;9497:50;;;;;;;;9440:26;;-1:-1:-1;9497:26:0;;;;:50;;;;;;;;;;;;;;9536:5;9497:26;:50;;;5:2:-1;;;;30:1;27;20:12;5:2;9497:50:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9497:50:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9497:50:0;9476:128;;;;;-1:-1:-1;;;9476:128:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;9640:13;;9636:28;;9655:8;9636:3;:28::i;:::-;9615:10;;;;:6;:10;;;;;;;:49;;;;9699:13;;;9695:25;;9714:5;9695:3;:25::i;:::-;9674:10;;;;:6;:10;;;;;;;;:18;;;:46;;;;9751:13;;;;9790:11;;;;9751:58;;-1:-1:-1;;;9751:58:0;;9778:10;9751:58;;;;-1:-1:-1;;;;;9751:58:0;;;;;;;;;;;;;;;:26;;;;;:58;;;;;9674:10;;9751:58;;;;;;;;:26;:58;;;5:2:-1;;;;30:1;27;20:12;5:2;9751:58:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9751:58:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9751:58:0;9730:203;;;;-1:-1:-1;;;9730:203:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9964:13;;;;;:44;;;-1:-1:-1;;;9964:44:0;;9987:10;9964:44;;;;;;;;;;;;-1:-1:-1;;;;;9964:22:0;;;;;;:44;;;;;;;;;;-1:-1:-1;9964:22:0;:44;;;5:2:-1;;;;30:1;27;20:12;5:2;9964:44:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9964:44:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9964:44:0;9943:142;;;;-1:-1:-1;;;9943:142:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10101:17;;;;;;;;;;;;;;;;;10250:11;;;;10206:13;;;;;;10221;;;;;;10189:46;;;-1:-1:-1;;;;;;10189:46:0;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;10189:46:0;;;;;;10179:57;;;;;;;10275:13;;10302;;10133:300;;;;-1:-1:-1;;;;;10133:300:0;;;;;;;;;;;;;;-1:-1:-1;;;;;10133:300:0;;;;;;;;;;;;;-1:-1:-1;;;;;10419:3:0;10133:300;;;;;;10329:10;;10133:300;;;;;;;;;;;;;10565:11;;;;10521:13;;;;;;10536;;;;;;10504:46;;;-1:-1:-1;;;;;;10504:46:0;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;10504:46:0;;;;;;10494:57;;;;;;;10590:13;;10617;;10744:5;;10448:336;;;;-1:-1:-1;;;;;10448:336:0;;;;;;;;;;;;;-1:-1:-1;;;;;10448:336:0;;;;;;;;;;;;;;;;;;;10744:5;;;10448:336;;;;-1:-1:-1;;;;;10770:3:0;10448:336;;;;;;10644:10;;10448:336;;;;;;;;;;;;;10906:5;:13;;;-1:-1:-1;;;;;10799:131:0;10851:5;:13;;;-1:-1:-1;;;;;10799:131:0;;10821:8;10879:5;10799:131;;;;;;;;;;;;;;;;;;;;;;;;10945:10;;;;:6;:10;;;;;:18;10941:106;;10991:10;;;;:6;:10;;;;;;;;10984:17;;;;;;;;-1:-1:-1;;;;;;10984:17:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;10984:17:0;;;11020:16;;;;;;;;;;;;;;;;;;10941:106;11064:4;11057:11;;;;;7134:1;-1:-1:-1;7145:6:0;:14;;-1:-1:-1;;7145:14:0;;;8591:2484;;-1:-1:-1;;8591:2484:0:o;32599:726::-;32684:10;;32660:4;;-1:-1:-1;;;32684:10:0;;;;32676:19;;;;;;32719:10;;;;:6;:10;;;;;:18;32709:28;;32705:263;;;32757:17;32771:2;32757:13;:17::i;:::-;32753:205;;;32884:11;32892:2;32884:7;:11::i;:::-;;32753:205;;;32934:9;32940:2;32934:5;:9::i;:::-;;32753:205;32986:21;32996:2;33000:6;32986:9;:21::i;:::-;32978:30;;;;;;33097:12;33106:2;33097:8;:12::i;:::-;:83;;;;-1:-1:-1;33146:34:0;33160:10;;;:6;:10;;;;;;;;:18;;;;-1:-1:-1;;;;;33160:18:0;33146:34;;:5;:34;;;;;;33125:10;;;;;;;:18;:55;33097:83;33080:218;;;33205:6;:11;;;33277:10;33214:2;33277:6;:10::i;:::-;;33080:218;-1:-1:-1;33314:4:0;32599:726;;;;:::o;35593:2538::-;35919:10;35941:21;35991;36049:17;36119;36252:1536;-1:-1:-1;;;;;36259:25:0;;;36307:1;36259:25;;;:5;:25;;;;;;;;:45;;;;;;;;;;:49;36252:1536;;-1:-1:-1;;;;;;;36340:25:0;;;;;;;:5;:25;;;;;;;;:45;;;;;;;;;;;;36411:21;;;:6;:21;;;;;;;;:29;;;;36466;;36340:45;;-1:-1:-1;36411:29:0;37096:8;:116;;37211:1;37096:116;;;37171:9;37159;37147;37135;:21;:33;:45;37096:116;37022:25;37026:9;37037;37022:3;:25::i;:::-;:212;36978:25;36982:9;36993;36978:3;:25::i;:::-;:256;36957:330;;;37267:5;;36957:330;37411:45;37415:13;37430:25;37434:9;37445;37430:3;:25::i;:::-;37411:3;:45::i;:::-;;37475:39;37484:2;37488:25;37492:9;37503;37488:3;:25::i;:::-;37475:39;;;;;;;;;;;;;;;;;;;;;;37544:9;37528:25;;37579:41;37583:9;37594:25;37598:9;37609;37594:3;:25::i;:::-;37579:3;:41::i;:::-;37567:53;;37674:13;37646:25;37650:9;37661;37646:3;:25::i;:::-;:41;;;;;;;-1:-1:-1;37706:14:0;;;:32;;-1:-1:-1;37724:14:0;;37706:32;37702:76;;;37758:5;;37702:76;36252:1536;;;37827:1;37815:9;:13;:42;;;;;37856:1;37844:9;:13;37815:42;:96;;;;-1:-1:-1;;;;;;37886:25:0;;;;;;:5;:25;;;;;;37873:38;;;37815:96;37798:327;;;37983:55;37995:9;38006;38017;38028;37983:11;:55::i;:::-;37978:60;;38100:14;38106:2;38110:3;38100:5;:14::i;:::-;35593:2538;;;;;;;;;;;;:::o;12359:1181::-;12589:10;14369;:8;:10::i;:::-;14368:11;14360:20;;;;;;7094:6;;;;7093:7;7085:16;;;;;;7111:6;:13;;-1:-1:-1;;7111:13:0;7120:4;7111:13;;;12554:7;12563;7245:31;12554:7;7245:13;:31::i;:::-;7237:40;;;;;;7295:31;7317:7;7295:13;:31::i;:::-;7287:40;;;;;;12643:7;12631;-1:-1:-1;;;;;12623:27:0;;12615:36;;;;;;12689:7;12677;-1:-1:-1;;;;;12669:27:0;;12661:36;;;;;;12725:1;12715:7;:11;12707:20;;;;;;-1:-1:-1;;;;;12745:21:0;;12737:30;;;;;;12795:1;12785:7;:11;12777:20;;;;;;-1:-1:-1;;;;;12815:21:0;;12807:30;;;;;;12866:7;-1:-1:-1;;;;;12855:18:0;:7;-1:-1:-1;;;;;12855:18:0;;;12847:27;;;;;;12885:21;;:::i;:::-;12916:22;;;-1:-1:-1;;;;;12948:22:0;;;:12;;;:22;12980:12;;;:22;;;13012;;:12;;;:22;13057:10;13044;;;:23;-1:-1:-1;;;;;13101:3:0;13077:28;:14;;;:28;13120:10;:8;:10::i;:::-;13140;;;;:6;:10;;;;;;;;:17;;;;;;;;;;;;;-1:-1:-1;;;;;13140:17:0;;;-1:-1:-1;;;;;;13140:17:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13140:17:0;-1:-1:-1;;;13140:17:0;-1:-1:-1;;;;13140:17:0;;;;;;;;;;;;;;;;;;;13176:56;;-1:-1:-1;;;13176:56:0;;13197:10;13176:56;;;;;;;13217:4;13176:56;;;;;;;;;;;;13115:15;;-1:-1:-1;13176:20:0;;;;;;:56;;;;;;;;;;;;:20;:56;;;5:2:-1;;;;30:1;27;20:12;5:2;13176:56:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13176:56:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13176:56:0;13168:65;;;;;;13249:17;;;;;;;;;;;;;;;;;13337:34;;;-1:-1:-1;;;;;;13337:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;13337:34:0;;;;;;13327:45;;;;;;;-1:-1:-1;;;;;13337:34:0;;;13281:252;;;13337:34;;;13281:252;;;;-1:-1:-1;;;;;13281:252:0;;;;;;;;;;;;;-1:-1:-1;;;;;13519:3:0;13281:252;;;;;;;13386:10;;13327:45;13310:2;;13281:252;;;;;;;;;-1:-1:-1;;7145:6:0;:14;;-1:-1:-1;;7145:14:0;;;-1:-1:-1;12359:1181:0;;-1:-1:-1;;;;12359:1181:0:o;38330:469::-;-1:-1:-1;;;;;38613:23:0;;38583:10;38613:23;;;:5;:23;;;;;;:34;-1:-1:-1;38613:34:0;38605:43;;;;;;38663:47;38675:7;38684;38693;38702;38663:11;:47::i;:::-;38732:5;;;38720:9;;;;:5;:9;;;;;;;;;:17;;;;38747:10;;;;38772:20;;;;;;;38658:52;;-1:-1:-1;38772:20:0;;;;;;;;;38330:469;;;;;;:::o;1385:149::-;1443:9;1472:6;;;:30;;-1:-1:-1;;1487:5:0;;;1501:1;1496;1487:5;1496:1;1482:15;;;;;:20;1472:30;1464:63;;;;;-1:-1:-1;;;1464:63:0;;;;;;;;;;;;-1:-1:-1;;;1464:63:0;;;;;;;;;;;;;;33961:1097;34027:7;34059:1;34054:2;:6;34046:15;;;;;;34116:8;;;;;:26;;;34129:13;34138:3;34129:8;:13::i;:::-;34128:14;34116:26;34109:81;;;34164:10;;;;:5;:10;;;;;;:15;;;;34109:81;;;34204:8;34200:852;;34308:9;34314:2;34308:5;:9::i;:::-;34301:16;;;;34200:852;34458:24;34474:2;34478:3;34458:15;:24::i;:::-;34454:588;;;34502:15;34642:142;34649:8;;;;;:36;;;34661:24;34677:2;34681:3;34661:15;:24::i;:::-;34642:142;;;-1:-1:-1;34750:10:0;;;;:5;:10;;;;;:15;;;;34642:142;;34454:588;34899:8;;;;;:37;;;34912:24;34928:2;34932:3;34912:15;:24::i;:::-;34911:25;34899:37;34892:108;;;34966:10;;;;:5;:10;;;;;;:15;;34892:108;;;-1:-1:-1;35024:3:0;35017:10;;33391:504;33441:7;33473:1;33468:2;:6;33460:15;;;;;;33486;33512:10;;;:6;:10;;;;;;;;:18;;;;;33567;;;;-1:-1:-1;;;;;33567:18:0;;;33610:14;;;:5;:14;;;;;33512:18;;;;33610:23;;;;;;;;;33512:18;;33567;;33610:23;33747:118;33754:8;;;;;:36;;;33766:24;33782:2;33786:3;33766:15;:24::i;:::-;33747:118;;;-1:-1:-1;33839:10:0;;;;:5;:10;;;;;:15;;;;33747:118;;1540:107;1598:9;1631:1;1626;:6;;:14;;1639:1;1626:14;;;-1:-1:-1;1635:1:0;;1619:21;-1:-1:-1;1540:107:0:o;13888:109::-;-1:-1:-1;;;;;13973:17:0;13950:4;13973:17;;;:9;:17;;;;;;;;;13888:109::o;13667:::-;13724:13;:15;;;;;;;;13667:109;:::o;35139:300::-;35289:4;35390:12;;;:6;:12;;;;;;;;:20;;;;35412:11;;;;;;:19;35386:46;;35390:20;35386:3;:46::i;:::-;35328:11;;;;:6;:11;;;;;;;;:19;;;;35349:12;;;;;:20;35324:46;;35328:19;35324:3;:46::i;:::-;:108;;;35139:300;-1:-1:-1;;;35139:300:0:o;16170:27189::-;;;;;;;;;-1:-1:-1;16170:27189:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3075600",
            "executionCost": "24257",
            "totalCost": "3099857"
          },
          "external": {
            "AqueductAddress()": "1104",
            "AqueductDistributionLive()": "1161",
            "_best(address,address)": "1306",
            "_dust(address)": "1236",
            "_near(uint256)": "1217",
            "_rank(uint256)": "2845",
            "_span(address,address)": "1329",
            "addToWhitelist(address)": "infinite",
            "bump(bytes32)": "9074",
            "buy(uint256,uint256)": "infinite",
            "buyAllAmount(address,uint256,address,uint256)": "infinite",
            "buyEnabled()": "1137",
            "cancel(uint256)": "infinite",
            "del_rank(uint256)": "20422",
            "dustId()": "1132",
            "getBestOffer(address,address)": "1321",
            "getBetterOffer(uint256)": "1196",
            "getBuyAmount(address,address,uint256)": "infinite",
            "getFirstUnsortedOffer()": "1132",
            "getMinSell(address)": "1232",
            "getNextUnsortedOffer(uint256)": "1196",
            "getOffer(uint256)": "4955",
            "getOfferCount(address,address)": "1319",
            "getOwner(uint256)": "1240",
            "getPayAmount(address,address,uint256)": "infinite",
            "getTime()": "330",
            "getWorseOffer(uint256)": "1179",
            "initialize(bool,address)": "105658",
            "initialized()": "1118",
            "insert(uint256,uint256)": "infinite",
            "isActive(uint256)": "1272",
            "isClosed()": "316",
            "isOfferSorted(uint256)": "4801",
            "kill(bytes32)": "infinite",
            "last_offer_id()": "1088",
            "make(address,address,uint128,uint128)": "infinite",
            "matchingEnabled()": "1074",
            "offer(uint256,address,uint256,address)": "infinite",
            "offer(uint256,address,uint256,address,uint256)": "infinite",
            "offer(uint256,address,uint256,address,uint256,bool)": "infinite",
            "offers(uint256)": "4695",
            "owner()": "1105",
            "removeFromWhitelist(address)": "infinite",
            "sellAllAmount(address,uint256,address,uint256)": "infinite",
            "setAqueductAddress(address)": "infinite",
            "setAqueductDistributionLive(bool)": "infinite",
            "setBuyEnabled(bool)": "infinite",
            "setFeeBPS(uint256)": "infinite",
            "setFeeTo(address)": "infinite",
            "setMatchingEnabled(bool)": "infinite",
            "setMinSell(address,uint256)": "infinite",
            "setOwner(address)": "infinite",
            "stop()": "infinite",
            "stopped()": "1138",
            "take(bytes32,uint128)": "infinite"
          },
          "internal": {
            "_buys(uint256,uint256)": "infinite",
            "_find(uint256)": "infinite",
            "_findpos(uint256,uint256)": "infinite",
            "_hide(uint256)": "infinite",
            "_isPricedLtOrEq(uint256,uint256)": "infinite",
            "_matcho(uint256,contract ERC20,uint256,contract ERC20,uint256,bool)": "infinite",
            "_offeru(uint256,contract ERC20,uint256,contract ERC20)": "infinite",
            "_sort(uint256,uint256)": "infinite",
            "_unsort(uint256)": "98040"
          }
        },
        "methodIdentifiers": {
          "AqueductAddress()": "6b9d8c4b",
          "AqueductDistributionLive()": "2f90a6fc",
          "_best(address,address)": "74c1d7d3",
          "_dust(address)": "91be90c8",
          "_near(uint256)": "a78d4316",
          "_rank(uint256)": "c2d526aa",
          "_span(address,address)": "677170e1",
          "addToWhitelist(address)": "e43252d7",
          "bump(bytes32)": "779997c3",
          "buy(uint256,uint256)": "d6febde8",
          "buyAllAmount(address,uint256,address,uint256)": "8185402b",
          "buyEnabled()": "f582d293",
          "cancel(uint256)": "40e58ee5",
          "del_rank(uint256)": "467f0b7b",
          "dustId()": "56ad8764",
          "getBestOffer(address,address)": "0374fc6f",
          "getBetterOffer(uint256)": "911550f4",
          "getBuyAmount(address,address,uint256)": "144a2752",
          "getFirstUnsortedOffer()": "8af82a2e",
          "getMinSell(address)": "511fa487",
          "getNextUnsortedOffer(uint256)": "61f54a79",
          "getOffer(uint256)": "4579268a",
          "getOfferCount(address,address)": "7ca9429a",
          "getOwner(uint256)": "c41a360a",
          "getPayAmount(address,address,uint256)": "ff1fd974",
          "getTime()": "557ed1ba",
          "getWorseOffer(uint256)": "943911bc",
          "initialize(bool,address)": "85ee7ba6",
          "initialized()": "158ef93e",
          "insert(uint256,uint256)": "1d834a1b",
          "isActive(uint256)": "82afd23b",
          "isClosed()": "c2b6b58c",
          "isOfferSorted(uint256)": "d2b420ce",
          "kill(bytes32)": "b4f9b6c8",
          "last_offer_id()": "232cae0b",
          "make(address,address,uint128,uint128)": "093f5198",
          "matchingEnabled()": "01492a0b",
          "offer(uint256,address,uint256,address)": "f09ea2a6",
          "offer(uint256,address,uint256,address,uint256)": "1b33d412",
          "offer(uint256,address,uint256,address,uint256,bool)": "e1a6f014",
          "offers(uint256)": "8a72ea6a",
          "owner()": "8da5cb5b",
          "removeFromWhitelist(address)": "8ab1d681",
          "sellAllAmount(address,uint256,address,uint256)": "0621b4f6",
          "setAqueductAddress(address)": "be71f5ce",
          "setAqueductDistributionLive(bool)": "a128171b",
          "setBuyEnabled(bool)": "d6f15469",
          "setFeeBPS(uint256)": "604b6a9c",
          "setFeeTo(address)": "f46901ed",
          "setMatchingEnabled(bool)": "2aed1905",
          "setMinSell(address,uint256)": "bf7c734e",
          "setOwner(address)": "13af4035",
          "stop()": "07da68f5",
          "stopped()": "75f12b21",
          "take(bytes32,uint128)": "49606455"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"FeeTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogBump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogBuyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogInsert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"LogInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogItemUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogMake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogMatchingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"LogMinSell\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogSortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogUnsortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OfferDeleted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"AqueductAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AqueductDistributionLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_best\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_near\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_span\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addition\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id_\",\"type\":\"bytes32\"}],\"name\":\"bump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_fill_amount\",\"type\":\"uint256\"}],\"name\":\"buyAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"del_rank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dustId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"sell_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getBestOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetterOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstUnsortedOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"}],\"name\":\"getMinSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextUnsortedOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"sell_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"}],\"name\":\"getPayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorseOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"RBCNDist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOfferSorted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_offer_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"buy_amt\",\"type\":\"uint128\"}],\"name\":\"make\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"matchingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matching\",\"type\":\"bool\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"remove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"buy_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min_fill_amount\",\"type\":\"uint256\"}],\"name\":\"sellAllAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Aqueduct\",\"type\":\"address\"}],\"name\":\"setAqueductAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"setAqueductDistributionLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buyEnabled_\",\"type\":\"bool\"}],\"name\":\"setBuyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeBPS\",\"type\":\"uint256\"}],\"name\":\"setFeeBPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"matchingEnabled_\",\"type\":\"bool\"}],\"name\":\"setMatchingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"pay_gem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"maxTakeAmount\",\"type\":\"uint128\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits the key trading functionality from SimpleMarket\",\"methods\":{}},\"userdoc\":{\"methods\":{\"bump(bytes32)\":{\"notice\":\"Below are the main public entrypoints\"}},\"notice\":\"The core Rubicon Market smart contractThis contract is based on the original open-source work done by OasisDEX under the Apache License 2.0\"}},\"settings\":{\"compilationTarget\":{\"contracts/RubiconMarket.sol\":\"RubiconMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RubiconMarket.sol\":{\"content\":\"/// @title RubiconMarket.sol\\n/// @notice Please see the repository for this code at https://github.com/RubiconDeFi/rubicon_protocol\\n\\npragma solidity 0.5.16;\\n\\n/// @notice DSAuth events for authentication schema\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\n/// @notice DSAuth library for setting owner of the contract\\n/// @dev Provides the auth modifier for authenticated function calls\\ncontract DSAuth is DSAuthEvents {\\n    address public owner;\\n\\n    function setOwner(address owner_) external auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\n/// @notice DSMath library for safe math without integer overflow/underflow\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\\n/// @notice ERC-20 interface as derived from EIP-20\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address guy) public view returns (uint256);\\n\\n    function allowance(address src, address guy) public view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) public returns (bool);\\n\\n    function transfer(address dst, uint256 wad) public returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool);\\n}\\n\\n/// @notice Events contract for logging trade activity on Rubicon Market\\n/// @dev Provides the key event logs that are used in all core functionality of exchanging on the Rubicon Market\\ncontract EventfulMarket {\\n    event LogItemUpdate(uint256 id);\\n    event LogTrade(\\n        uint256 pay_amt,\\n        address indexed pay_gem,\\n        uint256 buy_amt,\\n        address indexed buy_gem\\n    );\\n\\n    event LogMake(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogBump(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogKill(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogInt(string lol, uint256 input);\\n\\n    event FeeTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint256 feeAmt,\\n        address feeTo,\\n        uint64 timestamp\\n    );\\n\\n    event OfferDeleted(uint256 id);\\n}\\n\\n/// @notice Core trading logic for ERC-20 pairs, an orderbook, and transacting of tokens\\n/// @dev This contract holds the core ERC-20 / ERC-20 offer, buy, and cancel logic\\ncontract SimpleMarket is EventfulMarket, DSMath {\\n    uint256 public last_offer_id;\\n\\n    /// @dev The mapping that makes up the core orderbook of the exchange\\n    mapping(uint256 => OfferInfo) public offers;\\n\\n    mapping(address => bool) internal whitelist;\\n\\n    bool locked;\\n\\n    /// @notice This parameter provides the ability for a protocol fee on taker trades\\n    /// @dev This parameter is in basis points\\n    uint256 internal feeBPS;\\n\\n    /// @notice This parameter provides the address to which fees are sent\\n    address internal feeTo;\\n\\n    struct OfferInfo {\\n        uint256 pay_amt;\\n        ERC20 pay_gem;\\n        uint256 buy_amt;\\n        ERC20 buy_gem;\\n        address owner;\\n        uint64 timestamp;\\n    }\\n\\n    /// @notice Modifier that insures an order exists and is properly in the orderbook\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        _;\\n    }\\n\\n    /// @notice Modifier that checks the user to make sure they own the offer and its valid before they attempt to cancel it\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require(getOwner(id) == msg.sender);\\n        _;\\n    }\\n\\n    modifier can_offer {\\n        _;\\n    }\\n\\n    modifier synchronized {\\n        require(!locked);\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyWhitelisted(ERC20 pay_gem, ERC20 buy_gem) {\\n        require(isWhitelisted(address(pay_gem)));\\n        require(isWhitelisted(address(buy_gem)));\\n        _;\\n    }\\n\\n    function isActive(uint256 id) public view returns (bool active) {\\n        return offers[id].timestamp > 0;\\n    }\\n\\n    function getOwner(uint256 id) public view returns (address owner) {\\n        return offers[id].owner;\\n    }\\n\\n    function getOffer(uint256 id)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            ERC20,\\n            uint256,\\n            ERC20\\n        )\\n    {\\n        OfferInfo memory offer = offers[id];\\n        return (offer.pay_amt, offer.pay_gem, offer.buy_amt, offer.buy_gem);\\n    }\\n\\n    /// @notice Below are the main public entrypoints\\n\\n    function bump(bytes32 id_) external can_buy(uint256(id_)) {\\n        uint256 id = uint256(id_);\\n        emit LogBump(\\n            id_,\\n            keccak256(abi.encodePacked(offers[id].pay_gem, offers[id].buy_gem)),\\n            offers[id].owner,\\n            offers[id].pay_gem,\\n            offers[id].buy_gem,\\n            uint128(offers[id].pay_amt),\\n            uint128(offers[id].buy_amt),\\n            offers[id].timestamp\\n        );\\n    }\\n\\n    /// @notice Accept a given `quantity` of an offer. Transfers funds from caller/taker to offer maker, and from market to caller/taker.\\n    /// @notice The fee for taker trades is paid in this function.\\n    function buy(uint256 id, uint256 quantity)\\n        public\\n        can_buy(id)\\n        synchronized\\n        returns (bool)\\n    {\\n        OfferInfo memory offer = offers[id];\\n        uint256 spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\\n\\n        require(uint128(spend) == spend, \\\"spend is not an int\\\");\\n        require(uint128(quantity) == quantity, \\\"quantity is not an int\\\");\\n\\n        ///@dev For backwards semantic compatibility.\\n        if (\\n            quantity == 0 ||\\n            spend == 0 ||\\n            quantity > offer.pay_amt ||\\n            spend > offer.buy_amt\\n        ) {\\n            return false;\\n        }\\n\\n        ///@dev Below is the basis point math logic for calculating the fee on a given trade\\n        ///@notice The fee is paid in the asset that the caller (taker) is market buying or selling with\\n        uint256 fee = mul(spend, feeBPS) / 10000;\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, feeTo, fee),\\n            \\\"Insufficient funds to cover fee\\\"\\n        );\\n\\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, offer.owner, spend),\\n            \\\"offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) failed - check that you can pay the fee\\\"\\n        );\\n        require(\\n            offer.pay_gem.transfer(msg.sender, quantity),\\n            \\\"offer.pay_gem.transfer(msg.sender, quantity) failed\\\"\\n        );\\n\\n        emit LogItemUpdate(id);\\n        emit LogTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            uint64(now)\\n        );\\n        emit FeeTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            fee,\\n            feeTo,\\n            uint64(now)\\n        );\\n        emit LogTrade(\\n            quantity,\\n            address(offer.pay_gem),\\n            spend,\\n            address(offer.buy_gem)\\n        );\\n\\n        if (offers[id].pay_amt == 0) {\\n            delete offers[id];\\n            emit OfferDeleted(id);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Allows the caller to cancel the offer if it is their own.\\n    /// @notice This function refunds the offer to the maker.\\n    function cancel(uint256 id)\\n        public\\n        can_cancel(id)\\n        synchronized\\n        returns (bool success)\\n    {\\n        /// @dev This is a read-only offer. Modify an offer by directly accessing offers[id]\\n        OfferInfo memory offer = offers[id];\\n        delete offers[id];\\n\\n        require(offer.pay_gem.transfer(offer.owner, offer.pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogKill(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            uint128(offer.pay_amt),\\n            uint128(offer.buy_amt),\\n            uint64(now)\\n        );\\n\\n        success = true;\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) external returns (bytes32 id) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    /// @notice Key function to make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt,\\n        ERC20 pay_gem,\\n        uint256 buy_amt,\\n        ERC20 buy_gem\\n    )\\n        public\\n        can_offer\\n        synchronized\\n        onlyWhitelisted(pay_gem, buy_gem)\\n        returns (uint256 id)\\n    {\\n        require(uint128(pay_amt) == pay_amt);\\n        require(uint128(buy_amt) == buy_amt);\\n        require(pay_amt > 0);\\n        require(pay_gem != ERC20(0x0));\\n        require(buy_amt > 0);\\n        require(buy_gem != ERC20(0x0));\\n        require(pay_gem != buy_gem);\\n\\n        OfferInfo memory info;\\n        info.pay_amt = pay_amt;\\n        info.pay_gem = pay_gem;\\n        info.buy_amt = buy_amt;\\n        info.buy_gem = buy_gem;\\n        info.owner = msg.sender;\\n        info.timestamp = uint64(now);\\n        id = _next_id();\\n        offers[id] = info;\\n\\n        require(pay_gem.transferFrom(msg.sender, address(this), pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogMake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(pay_gem, buy_gem)),\\n            msg.sender,\\n            pay_gem,\\n            buy_gem,\\n            uint128(pay_amt),\\n            uint128(buy_amt),\\n            uint64(now)\\n        );\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) external {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function _next_id() internal returns (uint256) {\\n        last_offer_id++;\\n        return last_offer_id;\\n    }\\n\\n    // Fee logic\\n    function getFeeBPS() internal view returns (uint256) {\\n        return feeBPS;\\n    }\\n\\n    function isWhitelisted(address target) internal view returns (bool) {\\n        return whitelist[target];\\n    }\\n}\\n\\n/// @notice Expiring market is a Simple Market with a market lifetime.\\n/// @dev When the close_time has been reached, offers can only be cancelled (offer and buy will throw).\\ncontract ExpiringMarket is DSAuth, SimpleMarket {\\n    bool public stopped;\\n\\n    /// @dev After close_time has been reached, no new offers are allowed.\\n    modifier can_offer {\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, no new buys are allowed.\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, anyone can cancel an offer.\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require((msg.sender == getOwner(id)) || isClosed());\\n        _;\\n    }\\n\\n    function isClosed() public pure returns (bool closed) {\\n        return false;\\n    }\\n\\n    function getTime() public view returns (uint64) {\\n        return uint64(now);\\n    }\\n\\n    function stop() external auth {\\n        stopped = true;\\n    }\\n}\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4 indexed sig,\\n        address indexed guy,\\n        bytes32 indexed foo,\\n        bytes32 indexed bar,\\n        uint256 wad,\\n        bytes fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n        uint256 wad;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n            wad := callvalue\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\\n\\n        _;\\n    }\\n}\\n\\ncontract MatchingEvents {\\n    event LogBuyEnabled(bool isEnabled);\\n    event LogMinSell(address pay_gem, uint256 min_amount);\\n    event LogMatchingEnabled(bool isEnabled);\\n    event LogUnsortedOffer(uint256 id);\\n    event LogSortedOffer(uint256 id);\\n    event LogInsert(address keeper, uint256 id);\\n    event LogDelete(address keeper, uint256 id);\\n    event LogMatch(uint256 id, uint256 amount);\\n}\\n\\n/// @notice The core Rubicon Market smart contract\\n/// @notice This contract is based on the original open-source work done by OasisDEX under the Apache License 2.0\\n/// @dev This contract inherits the key trading functionality from SimpleMarket\\ncontract RubiconMarket is MatchingEvents, ExpiringMarket, DSNote {\\n    bool public buyEnabled = true; //buy enabled\\n    bool public matchingEnabled = true; //true: enable matching,\\n    //false: revert to expiring market\\n    struct sortInfo {\\n        uint256 next; //points to id of next higher offer\\n        uint256 prev; //points to id of previous lower offer\\n        uint256 delb; //the blocknumber where this entry was marked for delete\\n    }\\n    mapping(uint256 => sortInfo) public _rank; //doubly linked lists of sorted offer ids\\n    mapping(address => mapping(address => uint256)) public _best; //id of the highest offer for a token pair\\n    mapping(address => mapping(address => uint256)) public _span; //number of offers stored for token pair in sorted orderbook\\n    mapping(address => uint256) public _dust; //minimum sell amount for a token to avoid dust offers\\n    mapping(uint256 => uint256) public _near; //next unsorted offer id\\n    uint256 _head; //first unsorted offer id\\n    uint256 public dustId; // id of the latest offer marked as dust\\n    address public AqueductAddress;\\n    bool public AqueductDistributionLive;\\n\\n    /// @dev Below is variable to allow for a proxy-friendly constructor\\n    bool public initialized;\\n\\n    function initialize(bool RBCNDist, address _feeTo) public {\\n        // require(msg.sender == ___deployer____);\\n        require(!initialized, \\\"contract is already initialized\\\");\\n        AqueductDistributionLive = RBCNDist;\\n        feeTo = _feeTo;\\n\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n\\n        /// @notice The starting fee on taker trades in basis points\\n        feeBPS = 20;\\n        initialized = true;\\n    }\\n\\n    // After close, anyone can cancel an offer\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id), \\\"Offer was deleted or taken, or never existed.\\\");\\n        require(\\n            isClosed() || msg.sender == getOwner(id) || id == dustId,\\n            \\\"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---- Public entrypoints ---- //\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) public returns (bytes32) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) public {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    //\\n    // If matching is enabled:\\n    //     * creates new offer without putting it in\\n    //       the sorted list.\\n    //     * available to authorized contracts only!\\n    //     * keepers should call insert(id,pos)\\n    //       to put offer in the sorted list.\\n    //\\n    // If matching is disabled:\\n    //     * calls expiring market's offer().\\n    //     * available to everyone without authorization.\\n    //     * no sorting is done.\\n    //\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //taker (ask) buy how much\\n        ERC20 buy_gem //taker (ask) buy which token\\n    ) public returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        function(uint256, ERC20, uint256, ERC20) returns (uint256) fn =\\n            matchingEnabled ? _offeru : super.offer;\\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos //position to insert offer, 0 should be used if unknown\\n    ) external can_offer returns (uint256) {\\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, true);\\n    }\\n\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos, //position to insert offer, 0 should be used if unknown\\n        bool matching //match \\\"close enough\\\" orders?\\n    ) public can_offer returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n\\n        if (matchingEnabled) {\\n            return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, matching);\\n        }\\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    //Transfers funds from caller to offer maker, and from market to caller.\\n    function buy(uint256 id, uint256 amount) public can_buy(id) returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n\\n        //RBCN distribution on the trade\\n        if (AqueductDistributionLive) {\\n            IAqueduct(AqueductAddress).distributeToMakerAndTaker(\\n                getOwner(id),\\n                msg.sender\\n            );\\n        }\\n        function(uint256, uint256) returns (bool) fn =\\n            matchingEnabled ? _buys : super.buy;\\n\\n        return fn(id, amount);\\n    }\\n\\n    // Cancel an offer. Refunds offer maker.\\n    function cancel(uint256 id) public can_cancel(id) returns (bool success) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        if (matchingEnabled) {\\n            if (isOfferSorted(id)) {\\n                require(_unsort(id));\\n            } else {\\n                require(_hide(id));\\n            }\\n        }\\n        return super.cancel(id); //delete the offer.\\n    }\\n\\n    //insert offer into the sorted list\\n    //keepers need to use this function\\n    function insert(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) public returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(!isOfferSorted(id)); //make sure offers[id] is not yet sorted\\n        require(isActive(id)); //make sure offers[id] is active\\n\\n        _hide(id); //remove offer from unsorted offers list\\n        _sort(id, pos); //put offer into the sorted offers list\\n        emit LogInsert(msg.sender, id);\\n        return true;\\n    }\\n\\n    //deletes _rank [id]\\n    //  Function should be called by keepers.\\n    function del_rank(uint256 id) external returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(\\n            !isActive(id) &&\\n                _rank[id].delb != 0 &&\\n                _rank[id].delb < block.number - 10\\n        );\\n        delete _rank[id];\\n        emit LogDelete(msg.sender, id);\\n        return true;\\n    }\\n\\n    //set the minimum sell amount for a token\\n    //    Function is used to avoid \\\"dust offers\\\" that have\\n    //    very small amount of tokens to sell, and it would\\n    //    cost more gas to accept the offer, than the value\\n    //    of tokens received.\\n    function setMinSell(\\n        ERC20 pay_gem, //token to assign minimum sell amount to\\n        uint256 dust //maker (ask) minimum sell amount\\n    ) external auth note returns (bool) {\\n        _dust[address(pay_gem)] = dust;\\n        emit LogMinSell(address(pay_gem), dust);\\n        return true;\\n    }\\n\\n    //returns the minimum sell amount for an offer\\n    function getMinSell(\\n        ERC20 pay_gem //token for which minimum sell amount is queried\\n    ) external view returns (uint256) {\\n        return _dust[address(pay_gem)];\\n    }\\n\\n    //set buy functionality enabled/disabled\\n    function setBuyEnabled(bool buyEnabled_) external auth returns (bool) {\\n        buyEnabled = buyEnabled_;\\n        emit LogBuyEnabled(buyEnabled);\\n        return true;\\n    }\\n\\n    //set matching enabled/disabled\\n    //    If matchingEnabled true(default), then inserted offers are matched.\\n    //    Except the ones inserted by contracts, because those end up\\n    //    in the unsorted list of offers, that must be later sorted by\\n    //    keepers using insert().\\n    //    If matchingEnabled is false then RubiconMarket is reverted to ExpiringMarket,\\n    //    and matching is not done, and sorted lists are disabled.\\n    function setMatchingEnabled(bool matchingEnabled_)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        matchingEnabled = matchingEnabled_;\\n        emit LogMatchingEnabled(matchingEnabled);\\n        return true;\\n    }\\n\\n    //return the best offer for a token pair\\n    //      the best offer is the lowest one if it's an ask,\\n    //      and highest one if it's a bid offer\\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _best[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //return the next worse offer in the sorted list\\n    //      the worse offer is the higher one if its an ask,\\n    //      a lower one if its a bid offer,\\n    //      and in both cases the newer one if they're equal.\\n    function getWorseOffer(uint256 id) public view returns (uint256) {\\n        return _rank[id].prev;\\n    }\\n\\n    //return the next better offer in the sorted list\\n    //      the better offer is in the lower priced one if its an ask,\\n    //      the next higher priced one if its a bid offer\\n    //      and in both cases the older one if they're equal.\\n    function getBetterOffer(uint256 id) external view returns (uint256) {\\n        return _rank[id].next;\\n    }\\n\\n    //return the amount of better offers for a token pair\\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _span[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //get the first unsorted offer that was inserted by a contract\\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\\n    //      Their offers get put in the unsorted list of offers.\\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\\n    function getFirstUnsortedOffer() public view returns (uint256) {\\n        return _head;\\n    }\\n\\n    //get the next unsorted offer\\n    //      Can be used to cycle through all the unsorted offers.\\n    function getNextUnsortedOffer(uint256 id) public view returns (uint256) {\\n        return _near[id];\\n    }\\n\\n    function isOfferSorted(uint256 id) public view returns (bool) {\\n        return\\n            _rank[id].next != 0 ||\\n            _rank[id].prev != 0 ||\\n            _best[address(offers[id].pay_gem)][address(offers[id].buy_gem)] ==\\n            id;\\n    }\\n\\n    function sellAllAmount(\\n        ERC20 pay_gem,\\n        uint256 pay_amt,\\n        ERC20 buy_gem,\\n        uint256 min_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (pay_amt > 0) {\\n            //while there is amount to sell\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0); //Fails if there are not more offers\\n\\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\\n            if (\\n                pay_amt * 1 ether <\\n                wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (pay_amt >= offers[offerId].buy_amt) {\\n                //If amount to sell is higher or equal than current offer amount to buy\\n                fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount bought to acumulator\\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to sell\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                // if lower\\n                uint256 baux =\\n                    rmul(\\n                        pay_amt * 10**9,\\n                        rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n                    ) / 10**9;\\n                fill_amt = add(fill_amt, baux); //Add amount bought to acumulator\\n                take(bytes32(offerId), uint128(baux)); //We take the portion of the offer that we need\\n                pay_amt = 0; //All amount is sold\\n            }\\n        }\\n        require(fill_amt >= min_fill_amount);\\n    }\\n\\n    function buyAllAmount(\\n        ERC20 buy_gem,\\n        uint256 buy_amt,\\n        ERC20 pay_gem,\\n        uint256 max_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (buy_amt > 0) {\\n            //Meanwhile there is amount to buy\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0);\\n\\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\\n            if (\\n                buy_amt * 1 ether <\\n                wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (buy_amt >= offers[offerId].pay_amt) {\\n                //If amount to buy is higher or equal than current offer amount to sell\\n                fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount sold to acumulator\\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                //if lower\\n                fill_amt = add(\\n                    fill_amt,\\n                    rmul(\\n                        buy_amt * 10**9,\\n                        rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n                    ) / 10**9\\n                ); //Add amount sold to acumulator\\n                take(bytes32(offerId), uint128(buy_amt)); //We take the portion of the offer that we need\\n                buy_amt = 0; //All amount is bought\\n            }\\n        }\\n        require(fill_amt <= max_fill_amount);\\n    }\\n\\n    function getBuyAmount(\\n        ERC20 buy_gem,\\n        ERC20 pay_gem,\\n        uint256 pay_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (pay_amt > offers[offerId].buy_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount to buy accumulator\\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to pay\\n            if (pay_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                pay_amt * 10**9,\\n                rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to buy accumulator\\n    }\\n\\n    function getPayAmount(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint256 buy_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (buy_amt > offers[offerId].pay_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount to pay accumulator\\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n            if (buy_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                buy_amt * 10**9,\\n                rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to pay accumulator\\n    }\\n\\n    // ---- Internal Functions ---- //\\n\\n    function _buys(uint256 id, uint256 amount) internal returns (bool) {\\n        require(buyEnabled);\\n        if (amount == offers[id].pay_amt) {\\n            if (isOfferSorted(id)) {\\n                //offers[id] must be removed from sorted list because all of it is bought\\n                _unsort(id);\\n            } else {\\n                _hide(id);\\n            }\\n        }\\n\\n        require(super.buy(id, amount));\\n\\n        // If offer has become dust during buy, we cancel it\\n        if (\\n            isActive(id) &&\\n            offers[id].pay_amt < _dust[address(offers[id].pay_gem)]\\n        ) {\\n            dustId = id; //enable current msg.sender to call cancel(id)\\n            cancel(id);\\n        }\\n        return true;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _find(uint256 id) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        uint256 top = _best[pay_gem][buy_gem];\\n        uint256 old_top = 0;\\n\\n        // Find the larger-than-id order whose successor is less-than-id.\\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\\n            old_top = top;\\n            top = _rank[top].prev;\\n        }\\n        return old_top;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _findpos(uint256 id, uint256 pos) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        // Look for an active order.\\n        while (pos != 0 && !isActive(pos)) {\\n            pos = _rank[pos].prev;\\n        }\\n\\n        if (pos == 0) {\\n            //if we got to the end of list without a single active offer\\n            return _find(id);\\n        } else {\\n            // if we did find a nearby active offer\\n            // Walk the order book down from there...\\n            if (_isPricedLtOrEq(id, pos)) {\\n                uint256 old_pos;\\n\\n                // Guaranteed to run at least once because of\\n                // the prior if statements.\\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\\n                    old_pos = pos;\\n                    pos = _rank[pos].prev;\\n                }\\n                return old_pos;\\n\\n                // ...or walk it up.\\n            } else {\\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\\n                    pos = _rank[pos].next;\\n                }\\n                return pos;\\n            }\\n        }\\n    }\\n\\n    //return true if offers[low] priced less than or equal to offers[high]\\n    function _isPricedLtOrEq(\\n        uint256 low, //lower priced offer's id\\n        uint256 high //higher priced offer's id\\n    ) internal view returns (bool) {\\n        return\\n            mul(offers[low].buy_amt, offers[high].pay_amt) >=\\n            mul(offers[high].buy_amt, offers[low].pay_amt);\\n    }\\n\\n    //these variables are global only because of solidity local variable limit\\n\\n    //match offers with taker offer, and execute token transactions\\n    function _matcho(\\n        uint256 t_pay_amt, //taker sell how much\\n        ERC20 t_pay_gem, //taker sell which token\\n        uint256 t_buy_amt, //taker buy how much\\n        ERC20 t_buy_gem, //taker buy which token\\n        uint256 pos, //position id\\n        bool rounding //match \\\"close enough\\\" orders?\\n    ) internal returns (uint256 id) {\\n        uint256 best_maker_id; //highest maker id\\n        uint256 t_buy_amt_old; //taker buy how much saved\\n        uint256 m_buy_amt; //maker offer wants to buy this much token\\n        uint256 m_pay_amt; //maker offer wants to sell this much token\\n\\n        // there is at least one offer stored for token pair\\n        while (_best[address(t_buy_gem)][address(t_pay_gem)] > 0) {\\n            best_maker_id = _best[address(t_buy_gem)][address(t_pay_gem)];\\n            m_buy_amt = offers[best_maker_id].buy_amt;\\n            m_pay_amt = offers[best_maker_id].pay_amt;\\n\\n            // Ugly hack to work around rounding errors. Based on the idea that\\n            // the furthest the amounts can stray from their \\\"true\\\" values is 1.\\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\\n            // their \\\"correct\\\" values and m_buy_amt and t_buy_amt at -1.\\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\\n            // c * d > a * b + a + b + c + d, we write...\\n            if (\\n                mul(m_buy_amt, t_buy_amt) >\\n                mul(t_pay_amt, m_pay_amt) +\\n                    (\\n                        rounding\\n                            ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt\\n                            : 0\\n                    )\\n            ) {\\n                break;\\n            }\\n            // ^ The `rounding` parameter is a compromise borne of a couple days\\n            // of discussion.\\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\\n            emit LogMatch(id, min(m_pay_amt, t_buy_amt));\\n            t_buy_amt_old = t_buy_amt;\\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\\n\\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\\n                break;\\n            }\\n        }\\n\\n        if (\\n            t_buy_amt > 0 &&\\n            t_pay_amt > 0 &&\\n            t_pay_amt >= _dust[address(t_pay_gem)]\\n        ) {\\n            //new offer should be created\\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\\n            //insert offer into the sorted list\\n            _sort(id, pos);\\n        }\\n    }\\n\\n    // Make a new offer without putting it in the sorted list.\\n    // Takes funds from the caller into market escrow.\\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\\n    function _offeru(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem //maker (ask) buy which token\\n    ) internal returns (uint256 id) {\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n        _near[id] = _head;\\n        _head = id;\\n        emit LogUnsortedOffer(id);\\n    }\\n\\n    //put offer into the sorted list\\n    function _sort(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) internal {\\n        require(isActive(id));\\n\\n        ERC20 buy_gem = offers[id].buy_gem;\\n        ERC20 pay_gem = offers[id].pay_gem;\\n        uint256 prev_id; //maker (ask) id\\n\\n        pos = pos == 0 ||\\n            offers[pos].pay_gem != pay_gem ||\\n            offers[pos].buy_gem != buy_gem ||\\n            !isOfferSorted(pos)\\n            ? _find(id)\\n            : _findpos(id, pos);\\n\\n        if (pos != 0) {\\n            //offers[id] is not the highest offer\\n            //requirement below is satisfied by statements above\\n            //require(_isPricedLtOrEq(id, pos));\\n            prev_id = _rank[pos].prev;\\n            _rank[pos].prev = id;\\n            _rank[id].next = pos;\\n        } else {\\n            //offers[id] is the highest offer\\n            prev_id = _best[address(pay_gem)][address(buy_gem)];\\n            _best[address(pay_gem)][address(buy_gem)] = id;\\n        }\\n\\n        if (prev_id != 0) {\\n            //if lower offer does exist\\n            //requirement below is satisfied by statements above\\n            //require(!_isPricedLtOrEq(id, prev_id));\\n            _rank[prev_id].next = id;\\n            _rank[id].prev = prev_id;\\n        }\\n\\n        _span[address(pay_gem)][address(buy_gem)]++;\\n        emit LogSortedOffer(id);\\n    }\\n\\n    // Remove offer from the sorted list (does not cancel offer)\\n    function _unsort(\\n        uint256 id //id of maker (ask) offer to remove from sorted list\\n    ) internal returns (bool) {\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        require(_span[pay_gem][buy_gem] > 0);\\n\\n        require(\\n            _rank[id].delb == 0 && //assert id is in the sorted list\\n                isOfferSorted(id)\\n        );\\n\\n        if (id != _best[pay_gem][buy_gem]) {\\n            // offers[id] is not the highest offer\\n            require(_rank[_rank[id].next].prev == id);\\n            _rank[_rank[id].next].prev = _rank[id].prev;\\n        } else {\\n            //offers[id] is the highest offer\\n            _best[pay_gem][buy_gem] = _rank[id].prev;\\n        }\\n\\n        if (_rank[id].prev != 0) {\\n            //offers[id] is not the lowest offer\\n            require(_rank[_rank[id].prev].next == id);\\n            _rank[_rank[id].prev].next = _rank[id].next;\\n        }\\n\\n        _span[pay_gem][buy_gem]--;\\n        _rank[id].delb = block.number; //mark _rank[id] for deletion\\n        return true;\\n    }\\n\\n    //Hide offer from the unsorted order book (does not cancel offer)\\n    function _hide(\\n        uint256 id //id of maker offer to remove from unsorted list\\n    ) internal returns (bool) {\\n        uint256 uid = _head; //id of an offer in unsorted offers list\\n        uint256 pre = uid; //id of previous offer in unsorted offers list\\n\\n        require(!isOfferSorted(id)); //make sure offer id is not in sorted offers list\\n\\n        if (_head == id) {\\n            //check if offer is first offer in unsorted offers list\\n            _head = _near[id]; //set head to new first unsorted offer\\n            _near[id] = 0; //delete order from unsorted order list\\n            return true;\\n        }\\n        while (uid > 0 && uid != id) {\\n            //find offer in unsorted order list\\n            pre = uid;\\n            uid = _near[uid];\\n        }\\n        if (uid != id) {\\n            //did not find offer id in unsorted offers list\\n            return false;\\n        }\\n        _near[pre] = _near[id]; //set previous unsorted offer to point to offer after offer id\\n        _near[id] = 0; //delete order from unsorted order list\\n        return true;\\n    }\\n\\n    function setFeeBPS(uint256 _newFeeBPS) external auth returns (bool) {\\n        feeBPS = _newFeeBPS;\\n        return true;\\n    }\\n\\n    // Adding to token whitelist entrypoint\\n    function addToWhitelist(address addition) external auth {\\n        whitelist[addition] = true;\\n    }\\n\\n    function removeFromWhitelist(address remove) external auth {\\n        whitelist[remove] = false;\\n    }\\n\\n    function setAqueductDistributionLive(bool live)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductDistributionLive = live;\\n        return true;\\n    }\\n\\n    function setAqueductAddress(address _Aqueduct)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductAddress = _Aqueduct;\\n        return true;\\n    }\\n\\n    function setFeeTo(address newFeeTo) external auth returns (bool) {\\n        feeTo = newFeeTo;\\n        return true;\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\\ninterface IAqueduct {\\n    function distributeToMakerAndTaker(address maker, address taker)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xbd4be65c66735b84767b8b4df3fe7d922608c2ef4306b26ed035a04b962bfe1c\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 14,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 552,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "last_offer_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 556,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "offers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(OfferInfo)579_storage)"
          },
          {
            "astId": 560,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "whitelist",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 562,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "locked",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 564,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "feeBPS",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 566,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "feeTo",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1351,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "stopped",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1524,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "buyEnabled",
            "offset": 21,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1527,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "matchingEnabled",
            "offset": 22,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1538,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_rank",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(sortInfo)1534_storage)"
          },
          {
            "astId": 1544,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_best",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1550,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_span",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1554,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_dust",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1558,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_near",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 1560,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "_head",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 1562,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "dustId",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 1564,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "AqueductAddress",
            "offset": 0,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 1566,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "AqueductDistributionLive",
            "offset": 20,
            "slot": "14",
            "type": "t_bool"
          },
          {
            "astId": 1568,
            "contract": "contracts/RubiconMarket.sol:RubiconMarket",
            "label": "initialized",
            "offset": 21,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ERC20)423": {
            "encoding": "inplace",
            "label": "contract ERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_struct(OfferInfo)579_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct SimpleMarket.OfferInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(OfferInfo)579_storage"
          },
          "t_mapping(t_uint256,t_struct(sortInfo)1534_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct RubiconMarket.sortInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(sortInfo)1534_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(OfferInfo)579_storage": {
            "encoding": "inplace",
            "label": "struct SimpleMarket.OfferInfo",
            "members": [
              {
                "astId": 568,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "pay_amt",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 570,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "pay_gem",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(ERC20)423"
              },
              {
                "astId": 572,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "buy_amt",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 574,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "buy_gem",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(ERC20)423"
              },
              {
                "astId": 576,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "owner",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
              },
              {
                "astId": 578,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "timestamp",
                "offset": 20,
                "slot": "4",
                "type": "t_uint64"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(sortInfo)1534_storage": {
            "encoding": "inplace",
            "label": "struct RubiconMarket.sortInfo",
            "members": [
              {
                "astId": 1529,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "next",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 1531,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "prev",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 1533,
                "contract": "contracts/RubiconMarket.sol:RubiconMarket",
                "label": "delb",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          }
        }
      },
      "userdoc": {
        "methods": {
          "bump(bytes32)": {
            "notice": "Below are the main public entrypoints"
          }
        },
        "notice": "The core Rubicon Market smart contractThis contract is based on the original open-source work done by OasisDEX under the Apache License 2.0"
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/interfaces/IBathToken.sol\": {\n      \"content\": \"pragma solidity >=0.5.16;\\n\\ninterface IBathToken {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    //deposit and withdraw:\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 shares) external;\\n\\n    // function placeOffer() external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/rubiconPoolsv0/BathToken.sol\": {\n      \"content\": \"/// @author Benjamin Hughes - Rubicon\\n/// @notice This contract represents a single-asset liquidity pool for Rubicon Pools\\n/// @notice Any user can deposit assets into this pool and earn yield from successful strategist market making with their liquidity\\n/// @notice This contract looks to both BathPairs and the BathHouse as its admin\\n\\npragma solidity =0.5.16;\\n\\nimport \\\"../interfaces/IBathToken.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n// import \\\"../peripheral_contracts/SafeMath.sol\\\";\\nimport \\\"../RubiconMarket.sol\\\";\\nimport \\\"./PairsTrade.sol\\\";\\nimport \\\"./BathHouse.sol\\\";\\n\\ncontract BathToken is IBathToken {\\n    // using SafeERC20 for IERC20;\\n    // using Address for address;\\n    using SafeMath for uint256;\\n\\n    string public symbol;\\n    IERC20 public underlyingToken;\\n    address public RubiconMarketAddress;\\n\\n    // admin\\n    address public bathHouse;\\n\\n    string public constant name = \\\"BathToken v1\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n\\n    // This maps a user's address to cumulative pool yield at the time of deposit\\n    mapping(address => uint256) public diveInTheBath;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    // This tracks cumulative yield over time [amount, timestmap]\\n    // amount should be token being passed from another bathToken to this one (pair) - market price at the time\\n    uint256[2][] public yieldTracker;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n    bool public initialized;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event LogTrade(\\n        uint256 pay_amt,\\n        ERC20 pay_gem,\\n        uint256 buy_amt,\\n        ERC20 buy_gem\\n    );\\n    event LogYield(uint256 yield);\\n\\n    function initialize(\\n        string memory bathName,\\n        IERC20 token,\\n        address market,\\n        address _bathHouse\\n    ) public {\\n        require(!initialized);\\n        symbol = bathName;\\n        underlyingToken = token;\\n        RubiconMarketAddress = market;\\n        bathHouse = _bathHouse;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n\\n        // Add infinite approval of Rubicon Market for this asset\\n        uint256 MAX_INT = 2**256 - 1;\\n        IERC20(address(token)).approve(RubiconMarketAddress, MAX_INT);\\n\\n        initialized = true;\\n    }\\n\\n    modifier onlyPair {\\n        require(\\n            BathHouse(bathHouse).isApprovedPair(msg.sender) == true,\\n            \\\"not an approved pair - bathToken\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyApprovedStrategy() {\\n        require(\\n            BathHouse(bathHouse).isApprovedStrat(msg.sender) == true,\\n            \\\"not an approved strategy - bathToken\\\"\\n        );\\n        _;\\n    }\\n\\n    function cancel(uint256 id) external onlyPair {\\n        RubiconMarket(RubiconMarketAddress).cancel(id);\\n    }\\n\\n    // function that places a bid/ask in the orderbook for a given pair\\n    function placeOffer(\\n        uint256 pay_amt,\\n        ERC20 pay_gem,\\n        uint256 buy_amt,\\n        ERC20 buy_gem\\n    ) external onlyApprovedStrategy returns (uint256) {\\n        // Place an offer in RubiconMarket\\n        // The below ensures that the order does not automatically match/become a taker trade **enforceNoAutoFills**\\n        // while also ensuring that the order is placed in the sorted list\\n        uint256 id =\\n            RubiconMarket(RubiconMarketAddress).offer(\\n                pay_amt,\\n                pay_gem,\\n                buy_amt,\\n                buy_gem,\\n                0,\\n                false\\n            );\\n        emit LogTrade(pay_amt, pay_gem, buy_amt, buy_gem);\\n        return (id);\\n    }\\n\\n    // https://github.com/yearn/yearn-protocol/blob/develop/contracts/vaults/yVault.sol - shoutout yEarn homies\\n    function deposit(uint256 _amount) public {\\n        uint256 _pool = IERC20(underlyingToken).balanceOf(address(this));\\n        uint256 _before = underlyingToken.balanceOf(address(this));\\n        underlyingToken.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _after = underlyingToken.balanceOf(address(this));\\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\\n        uint256 shares = 0;\\n        if (totalSupply == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = (_amount.mul(totalSupply)).div(_pool);\\n        }\\n        _mint(msg.sender, shares);\\n    }\\n\\n    // No rebalance implementation for lower fees and faster swaps\\n    function withdraw(uint256 _shares) public {\\n        uint256 r =\\n            (IERC20(underlyingToken).balanceOf(address(this)).mul(_shares)).div(\\n                totalSupply\\n            );\\n        _burn(msg.sender, _shares);\\n\\n        underlyingToken.transfer(msg.sender, r);\\n    }\\n\\n    // This function returns filled orders to the correct liquidity pool and sends strategist rewards to the Pair\\n    function rebalance(\\n        address sisterBath,\\n        address underlying, /* sister asset */\\n        uint256 stratProportion\\n    ) external onlyPair {\\n        require(stratProportion > 0 && stratProportion < 20);\\n        uint256 stratReward =\\n            (stratProportion * (IERC20(underlying).balanceOf(address(this)))) /\\n                100;\\n        IERC20(underlying).transfer(\\n            sisterBath,\\n            IERC20(underlying).balanceOf(address(this)) - stratReward\\n        );\\n        IERC20(underlying).transfer(msg.sender, stratReward);\\n    }\\n\\n    // *** Internal Functions ***\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"UniswapV2: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"contracts/RubiconMarket.sol\": {\n      \"content\": \"/// @title RubiconMarket.sol\\n/// @notice Please see the repository for this code at https://github.com/RubiconDeFi/rubicon_protocol\\n\\npragma solidity 0.5.16;\\n\\n/// @notice DSAuth events for authentication schema\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\n/// @notice DSAuth library for setting owner of the contract\\n/// @dev Provides the auth modifier for authenticated function calls\\ncontract DSAuth is DSAuthEvents {\\n    address public owner;\\n\\n    function setOwner(address owner_) external auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\n/// @notice DSMath library for safe math without integer overflow/underflow\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\\n/// @notice ERC-20 interface as derived from EIP-20\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address guy) public view returns (uint256);\\n\\n    function allowance(address src, address guy) public view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) public returns (bool);\\n\\n    function transfer(address dst, uint256 wad) public returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool);\\n}\\n\\n/// @notice Events contract for logging trade activity on Rubicon Market\\n/// @dev Provides the key event logs that are used in all core functionality of exchanging on the Rubicon Market\\ncontract EventfulMarket {\\n    event LogItemUpdate(uint256 id);\\n    event LogTrade(\\n        uint256 pay_amt,\\n        address indexed pay_gem,\\n        uint256 buy_amt,\\n        address indexed buy_gem\\n    );\\n\\n    event LogMake(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogBump(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogKill(\\n        bytes32 indexed id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt,\\n        uint64 timestamp\\n    );\\n\\n    event LogInt(string lol, uint256 input);\\n\\n    event FeeTake(\\n        bytes32 id,\\n        bytes32 indexed pair,\\n        address indexed maker,\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        address indexed taker,\\n        uint128 take_amt,\\n        uint128 give_amt,\\n        uint256 feeAmt,\\n        address feeTo,\\n        uint64 timestamp\\n    );\\n\\n    event OfferDeleted(uint256 id);\\n}\\n\\n/// @notice Core trading logic for ERC-20 pairs, an orderbook, and transacting of tokens\\n/// @dev This contract holds the core ERC-20 / ERC-20 offer, buy, and cancel logic\\ncontract SimpleMarket is EventfulMarket, DSMath {\\n    uint256 public last_offer_id;\\n\\n    /// @dev The mapping that makes up the core orderbook of the exchange\\n    mapping(uint256 => OfferInfo) public offers;\\n\\n    mapping(address => bool) internal whitelist;\\n\\n    bool locked;\\n\\n    /// @notice This parameter provides the ability for a protocol fee on taker trades\\n    /// @dev This parameter is in basis points\\n    uint256 internal feeBPS;\\n\\n    /// @notice This parameter provides the address to which fees are sent\\n    address internal feeTo;\\n\\n    struct OfferInfo {\\n        uint256 pay_amt;\\n        ERC20 pay_gem;\\n        uint256 buy_amt;\\n        ERC20 buy_gem;\\n        address owner;\\n        uint64 timestamp;\\n    }\\n\\n    /// @notice Modifier that insures an order exists and is properly in the orderbook\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        _;\\n    }\\n\\n    /// @notice Modifier that checks the user to make sure they own the offer and its valid before they attempt to cancel it\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require(getOwner(id) == msg.sender);\\n        _;\\n    }\\n\\n    modifier can_offer {\\n        _;\\n    }\\n\\n    modifier synchronized {\\n        require(!locked);\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyWhitelisted(ERC20 pay_gem, ERC20 buy_gem) {\\n        require(isWhitelisted(address(pay_gem)));\\n        require(isWhitelisted(address(buy_gem)));\\n        _;\\n    }\\n\\n    function isActive(uint256 id) public view returns (bool active) {\\n        return offers[id].timestamp > 0;\\n    }\\n\\n    function getOwner(uint256 id) public view returns (address owner) {\\n        return offers[id].owner;\\n    }\\n\\n    function getOffer(uint256 id)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            ERC20,\\n            uint256,\\n            ERC20\\n        )\\n    {\\n        OfferInfo memory offer = offers[id];\\n        return (offer.pay_amt, offer.pay_gem, offer.buy_amt, offer.buy_gem);\\n    }\\n\\n    /// @notice Below are the main public entrypoints\\n\\n    function bump(bytes32 id_) external can_buy(uint256(id_)) {\\n        uint256 id = uint256(id_);\\n        emit LogBump(\\n            id_,\\n            keccak256(abi.encodePacked(offers[id].pay_gem, offers[id].buy_gem)),\\n            offers[id].owner,\\n            offers[id].pay_gem,\\n            offers[id].buy_gem,\\n            uint128(offers[id].pay_amt),\\n            uint128(offers[id].buy_amt),\\n            offers[id].timestamp\\n        );\\n    }\\n\\n    /// @notice Accept a given `quantity` of an offer. Transfers funds from caller/taker to offer maker, and from market to caller/taker.\\n    /// @notice The fee for taker trades is paid in this function.\\n    function buy(uint256 id, uint256 quantity)\\n        public\\n        can_buy(id)\\n        synchronized\\n        returns (bool)\\n    {\\n        OfferInfo memory offer = offers[id];\\n        uint256 spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\\n\\n        require(uint128(spend) == spend, \\\"spend is not an int\\\");\\n        require(uint128(quantity) == quantity, \\\"quantity is not an int\\\");\\n\\n        ///@dev For backwards semantic compatibility.\\n        if (\\n            quantity == 0 ||\\n            spend == 0 ||\\n            quantity > offer.pay_amt ||\\n            spend > offer.buy_amt\\n        ) {\\n            return false;\\n        }\\n\\n        ///@dev Below is the basis point math logic for calculating the fee on a given trade\\n        ///@notice The fee is paid in the asset that the caller (taker) is market buying or selling with\\n        uint256 fee = mul(spend, feeBPS) / 10000;\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, feeTo, fee),\\n            \\\"Insufficient funds to cover fee\\\"\\n        );\\n\\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\\n        require(\\n            offer.buy_gem.transferFrom(msg.sender, offer.owner, spend),\\n            \\\"offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) failed - check that you can pay the fee\\\"\\n        );\\n        require(\\n            offer.pay_gem.transfer(msg.sender, quantity),\\n            \\\"offer.pay_gem.transfer(msg.sender, quantity) failed\\\"\\n        );\\n\\n        emit LogItemUpdate(id);\\n        emit LogTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            uint64(now)\\n        );\\n        emit FeeTake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            msg.sender,\\n            uint128(quantity),\\n            uint128(spend),\\n            fee,\\n            feeTo,\\n            uint64(now)\\n        );\\n        emit LogTrade(\\n            quantity,\\n            address(offer.pay_gem),\\n            spend,\\n            address(offer.buy_gem)\\n        );\\n\\n        if (offers[id].pay_amt == 0) {\\n            delete offers[id];\\n            emit OfferDeleted(id);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Allows the caller to cancel the offer if it is their own.\\n    /// @notice This function refunds the offer to the maker.\\n    function cancel(uint256 id)\\n        public\\n        can_cancel(id)\\n        synchronized\\n        returns (bool success)\\n    {\\n        /// @dev This is a read-only offer. Modify an offer by directly accessing offers[id]\\n        OfferInfo memory offer = offers[id];\\n        delete offers[id];\\n\\n        require(offer.pay_gem.transfer(offer.owner, offer.pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogKill(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(offer.pay_gem, offer.buy_gem)),\\n            offer.owner,\\n            offer.pay_gem,\\n            offer.buy_gem,\\n            uint128(offer.pay_amt),\\n            uint128(offer.buy_amt),\\n            uint64(now)\\n        );\\n\\n        success = true;\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) external returns (bytes32 id) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    /// @notice Key function to make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt,\\n        ERC20 pay_gem,\\n        uint256 buy_amt,\\n        ERC20 buy_gem\\n    )\\n        public\\n        can_offer\\n        synchronized\\n        onlyWhitelisted(pay_gem, buy_gem)\\n        returns (uint256 id)\\n    {\\n        require(uint128(pay_amt) == pay_amt);\\n        require(uint128(buy_amt) == buy_amt);\\n        require(pay_amt > 0);\\n        require(pay_gem != ERC20(0x0));\\n        require(buy_amt > 0);\\n        require(buy_gem != ERC20(0x0));\\n        require(pay_gem != buy_gem);\\n\\n        OfferInfo memory info;\\n        info.pay_amt = pay_amt;\\n        info.pay_gem = pay_gem;\\n        info.buy_amt = buy_amt;\\n        info.buy_gem = buy_gem;\\n        info.owner = msg.sender;\\n        info.timestamp = uint64(now);\\n        id = _next_id();\\n        offers[id] = info;\\n\\n        require(pay_gem.transferFrom(msg.sender, address(this), pay_amt));\\n\\n        emit LogItemUpdate(id);\\n        emit LogMake(\\n            bytes32(id),\\n            keccak256(abi.encodePacked(pay_gem, buy_gem)),\\n            msg.sender,\\n            pay_gem,\\n            buy_gem,\\n            uint128(pay_amt),\\n            uint128(buy_amt),\\n            uint64(now)\\n        );\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) external {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function _next_id() internal returns (uint256) {\\n        last_offer_id++;\\n        return last_offer_id;\\n    }\\n\\n    // Fee logic\\n    function getFeeBPS() internal view returns (uint256) {\\n        return feeBPS;\\n    }\\n\\n    function isWhitelisted(address target) internal view returns (bool) {\\n        return whitelist[target];\\n    }\\n}\\n\\n/// @notice Expiring market is a Simple Market with a market lifetime.\\n/// @dev When the close_time has been reached, offers can only be cancelled (offer and buy will throw).\\ncontract ExpiringMarket is DSAuth, SimpleMarket {\\n    bool public stopped;\\n\\n    /// @dev After close_time has been reached, no new offers are allowed.\\n    modifier can_offer {\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, no new buys are allowed.\\n    modifier can_buy(uint256 id) {\\n        require(isActive(id));\\n        require(!isClosed());\\n        _;\\n    }\\n\\n    /// @dev After close, anyone can cancel an offer.\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id));\\n        require((msg.sender == getOwner(id)) || isClosed());\\n        _;\\n    }\\n\\n    function isClosed() public pure returns (bool closed) {\\n        return false;\\n    }\\n\\n    function getTime() public view returns (uint64) {\\n        return uint64(now);\\n    }\\n\\n    function stop() external auth {\\n        stopped = true;\\n    }\\n}\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4 indexed sig,\\n        address indexed guy,\\n        bytes32 indexed foo,\\n        bytes32 indexed bar,\\n        uint256 wad,\\n        bytes fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n        uint256 wad;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n            wad := callvalue\\n        }\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\\n\\n        _;\\n    }\\n}\\n\\ncontract MatchingEvents {\\n    event LogBuyEnabled(bool isEnabled);\\n    event LogMinSell(address pay_gem, uint256 min_amount);\\n    event LogMatchingEnabled(bool isEnabled);\\n    event LogUnsortedOffer(uint256 id);\\n    event LogSortedOffer(uint256 id);\\n    event LogInsert(address keeper, uint256 id);\\n    event LogDelete(address keeper, uint256 id);\\n    event LogMatch(uint256 id, uint256 amount);\\n}\\n\\n/// @notice The core Rubicon Market smart contract\\n/// @notice This contract is based on the original open-source work done by OasisDEX under the Apache License 2.0\\n/// @dev This contract inherits the key trading functionality from SimpleMarket\\ncontract RubiconMarket is MatchingEvents, ExpiringMarket, DSNote {\\n    bool public buyEnabled = true; //buy enabled\\n    bool public matchingEnabled = true; //true: enable matching,\\n    //false: revert to expiring market\\n    struct sortInfo {\\n        uint256 next; //points to id of next higher offer\\n        uint256 prev; //points to id of previous lower offer\\n        uint256 delb; //the blocknumber where this entry was marked for delete\\n    }\\n    mapping(uint256 => sortInfo) public _rank; //doubly linked lists of sorted offer ids\\n    mapping(address => mapping(address => uint256)) public _best; //id of the highest offer for a token pair\\n    mapping(address => mapping(address => uint256)) public _span; //number of offers stored for token pair in sorted orderbook\\n    mapping(address => uint256) public _dust; //minimum sell amount for a token to avoid dust offers\\n    mapping(uint256 => uint256) public _near; //next unsorted offer id\\n    uint256 _head; //first unsorted offer id\\n    uint256 public dustId; // id of the latest offer marked as dust\\n    address public AqueductAddress;\\n    bool public AqueductDistributionLive;\\n\\n    /// @dev Below is variable to allow for a proxy-friendly constructor\\n    bool public initialized;\\n\\n    function initialize(bool RBCNDist, address _feeTo) public {\\n        // require(msg.sender == ___deployer____);\\n        require(!initialized, \\\"contract is already initialized\\\");\\n        AqueductDistributionLive = RBCNDist;\\n        feeTo = _feeTo;\\n\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n\\n        /// @notice The starting fee on taker trades in basis points\\n        feeBPS = 20;\\n        initialized = true;\\n    }\\n\\n    // After close, anyone can cancel an offer\\n    modifier can_cancel(uint256 id) {\\n        require(isActive(id), \\\"Offer was deleted or taken, or never existed.\\\");\\n        require(\\n            isClosed() || msg.sender == getOwner(id) || id == dustId,\\n            \\\"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---- Public entrypoints ---- //\\n\\n    function make(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint128 pay_amt,\\n        uint128 buy_amt\\n    ) public returns (bytes32) {\\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\\n    }\\n\\n    function take(bytes32 id, uint128 maxTakeAmount) public {\\n        require(buy(uint256(id), maxTakeAmount));\\n    }\\n\\n    function kill(bytes32 id) external {\\n        require(cancel(uint256(id)));\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    //\\n    // If matching is enabled:\\n    //     * creates new offer without putting it in\\n    //       the sorted list.\\n    //     * available to authorized contracts only!\\n    //     * keepers should call insert(id,pos)\\n    //       to put offer in the sorted list.\\n    //\\n    // If matching is disabled:\\n    //     * calls expiring market's offer().\\n    //     * available to everyone without authorization.\\n    //     * no sorting is done.\\n    //\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //taker (ask) buy how much\\n        ERC20 buy_gem //taker (ask) buy which token\\n    ) public returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        function(uint256, ERC20, uint256, ERC20) returns (uint256) fn =\\n            matchingEnabled ? _offeru : super.offer;\\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    // Make a new offer. Takes funds from the caller into market escrow.\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos //position to insert offer, 0 should be used if unknown\\n    ) external can_offer returns (uint256) {\\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, true);\\n    }\\n\\n    function offer(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem, //maker (ask) buy which token\\n        uint256 pos, //position to insert offer, 0 should be used if unknown\\n        bool matching //match \\\"close enough\\\" orders?\\n    ) public can_offer returns (uint256) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n\\n        if (matchingEnabled) {\\n            return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, matching);\\n        }\\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n    }\\n\\n    //Transfers funds from caller to offer maker, and from market to caller.\\n    function buy(uint256 id, uint256 amount) public can_buy(id) returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n\\n        //RBCN distribution on the trade\\n        if (AqueductDistributionLive) {\\n            IAqueduct(AqueductAddress).distributeToMakerAndTaker(\\n                getOwner(id),\\n                msg.sender\\n            );\\n        }\\n        function(uint256, uint256) returns (bool) fn =\\n            matchingEnabled ? _buys : super.buy;\\n\\n        return fn(id, amount);\\n    }\\n\\n    // Cancel an offer. Refunds offer maker.\\n    function cancel(uint256 id) public can_cancel(id) returns (bool success) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        if (matchingEnabled) {\\n            if (isOfferSorted(id)) {\\n                require(_unsort(id));\\n            } else {\\n                require(_hide(id));\\n            }\\n        }\\n        return super.cancel(id); //delete the offer.\\n    }\\n\\n    //insert offer into the sorted list\\n    //keepers need to use this function\\n    function insert(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) public returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(!isOfferSorted(id)); //make sure offers[id] is not yet sorted\\n        require(isActive(id)); //make sure offers[id] is active\\n\\n        _hide(id); //remove offer from unsorted offers list\\n        _sort(id, pos); //put offer into the sorted offers list\\n        emit LogInsert(msg.sender, id);\\n        return true;\\n    }\\n\\n    //deletes _rank [id]\\n    //  Function should be called by keepers.\\n    function del_rank(uint256 id) external returns (bool) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        require(\\n            !isActive(id) &&\\n                _rank[id].delb != 0 &&\\n                _rank[id].delb < block.number - 10\\n        );\\n        delete _rank[id];\\n        emit LogDelete(msg.sender, id);\\n        return true;\\n    }\\n\\n    //set the minimum sell amount for a token\\n    //    Function is used to avoid \\\"dust offers\\\" that have\\n    //    very small amount of tokens to sell, and it would\\n    //    cost more gas to accept the offer, than the value\\n    //    of tokens received.\\n    function setMinSell(\\n        ERC20 pay_gem, //token to assign minimum sell amount to\\n        uint256 dust //maker (ask) minimum sell amount\\n    ) external auth note returns (bool) {\\n        _dust[address(pay_gem)] = dust;\\n        emit LogMinSell(address(pay_gem), dust);\\n        return true;\\n    }\\n\\n    //returns the minimum sell amount for an offer\\n    function getMinSell(\\n        ERC20 pay_gem //token for which minimum sell amount is queried\\n    ) external view returns (uint256) {\\n        return _dust[address(pay_gem)];\\n    }\\n\\n    //set buy functionality enabled/disabled\\n    function setBuyEnabled(bool buyEnabled_) external auth returns (bool) {\\n        buyEnabled = buyEnabled_;\\n        emit LogBuyEnabled(buyEnabled);\\n        return true;\\n    }\\n\\n    //set matching enabled/disabled\\n    //    If matchingEnabled true(default), then inserted offers are matched.\\n    //    Except the ones inserted by contracts, because those end up\\n    //    in the unsorted list of offers, that must be later sorted by\\n    //    keepers using insert().\\n    //    If matchingEnabled is false then RubiconMarket is reverted to ExpiringMarket,\\n    //    and matching is not done, and sorted lists are disabled.\\n    function setMatchingEnabled(bool matchingEnabled_)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        matchingEnabled = matchingEnabled_;\\n        emit LogMatchingEnabled(matchingEnabled);\\n        return true;\\n    }\\n\\n    //return the best offer for a token pair\\n    //      the best offer is the lowest one if it's an ask,\\n    //      and highest one if it's a bid offer\\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _best[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //return the next worse offer in the sorted list\\n    //      the worse offer is the higher one if its an ask,\\n    //      a lower one if its a bid offer,\\n    //      and in both cases the newer one if they're equal.\\n    function getWorseOffer(uint256 id) public view returns (uint256) {\\n        return _rank[id].prev;\\n    }\\n\\n    //return the next better offer in the sorted list\\n    //      the better offer is in the lower priced one if its an ask,\\n    //      the next higher priced one if its a bid offer\\n    //      and in both cases the older one if they're equal.\\n    function getBetterOffer(uint256 id) external view returns (uint256) {\\n        return _rank[id].next;\\n    }\\n\\n    //return the amount of better offers for a token pair\\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _span[address(sell_gem)][address(buy_gem)];\\n    }\\n\\n    //get the first unsorted offer that was inserted by a contract\\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\\n    //      Their offers get put in the unsorted list of offers.\\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\\n    function getFirstUnsortedOffer() public view returns (uint256) {\\n        return _head;\\n    }\\n\\n    //get the next unsorted offer\\n    //      Can be used to cycle through all the unsorted offers.\\n    function getNextUnsortedOffer(uint256 id) public view returns (uint256) {\\n        return _near[id];\\n    }\\n\\n    function isOfferSorted(uint256 id) public view returns (bool) {\\n        return\\n            _rank[id].next != 0 ||\\n            _rank[id].prev != 0 ||\\n            _best[address(offers[id].pay_gem)][address(offers[id].buy_gem)] ==\\n            id;\\n    }\\n\\n    function sellAllAmount(\\n        ERC20 pay_gem,\\n        uint256 pay_amt,\\n        ERC20 buy_gem,\\n        uint256 min_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (pay_amt > 0) {\\n            //while there is amount to sell\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0); //Fails if there are not more offers\\n\\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\\n            if (\\n                pay_amt * 1 ether <\\n                wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (pay_amt >= offers[offerId].buy_amt) {\\n                //If amount to sell is higher or equal than current offer amount to buy\\n                fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount bought to acumulator\\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to sell\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                // if lower\\n                uint256 baux =\\n                    rmul(\\n                        pay_amt * 10**9,\\n                        rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n                    ) / 10**9;\\n                fill_amt = add(fill_amt, baux); //Add amount bought to acumulator\\n                take(bytes32(offerId), uint128(baux)); //We take the portion of the offer that we need\\n                pay_amt = 0; //All amount is sold\\n            }\\n        }\\n        require(fill_amt >= min_fill_amount);\\n    }\\n\\n    function buyAllAmount(\\n        ERC20 buy_gem,\\n        uint256 buy_amt,\\n        ERC20 pay_gem,\\n        uint256 max_fill_amount\\n    ) external returns (uint256 fill_amt) {\\n        require(!locked, \\\"Reentrancy attempt\\\");\\n        uint256 offerId;\\n        while (buy_amt > 0) {\\n            //Meanwhile there is amount to buy\\n            offerId = getBestOffer(buy_gem, pay_gem); //Get the best offer for the token pair\\n            require(offerId != 0);\\n\\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\\n            if (\\n                buy_amt * 1 ether <\\n                wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) {\\n                break; //We consider that all amount is sold\\n            }\\n            if (buy_amt >= offers[offerId].pay_amt) {\\n                //If amount to buy is higher or equal than current offer amount to sell\\n                fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount sold to acumulator\\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt)); //We take the whole offer\\n            } else {\\n                //if lower\\n                fill_amt = add(\\n                    fill_amt,\\n                    rmul(\\n                        buy_amt * 10**9,\\n                        rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n                    ) / 10**9\\n                ); //Add amount sold to acumulator\\n                take(bytes32(offerId), uint128(buy_amt)); //We take the portion of the offer that we need\\n                buy_amt = 0; //All amount is bought\\n            }\\n        }\\n        require(fill_amt <= max_fill_amount);\\n    }\\n\\n    function getBuyAmount(\\n        ERC20 buy_gem,\\n        ERC20 pay_gem,\\n        uint256 pay_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (pay_amt > offers[offerId].buy_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].pay_amt); //Add amount to buy accumulator\\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt); //Decrease amount to pay\\n            if (pay_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                pay_amt * 10**9,\\n                rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to buy accumulator\\n    }\\n\\n    function getPayAmount(\\n        ERC20 pay_gem,\\n        ERC20 buy_gem,\\n        uint256 buy_amt\\n    ) external view returns (uint256 fill_amt) {\\n        uint256 offerId = getBestOffer(buy_gem, pay_gem); //Get best offer for the token pair\\n        while (buy_amt > offers[offerId].pay_amt) {\\n            fill_amt = add(fill_amt, offers[offerId].buy_amt); //Add amount to pay accumulator\\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt); //Decrease amount to buy\\n            if (buy_amt > 0) {\\n                //If we still need more offers\\n                offerId = getWorseOffer(offerId); //We look for the next best offer\\n                require(offerId != 0); //Fails if there are not enough offers to complete\\n            }\\n        }\\n        fill_amt = add(\\n            fill_amt,\\n            rmul(\\n                buy_amt * 10**9,\\n                rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)\\n            ) / 10**9\\n        ); //Add proportional amount of last offer to pay accumulator\\n    }\\n\\n    // ---- Internal Functions ---- //\\n\\n    function _buys(uint256 id, uint256 amount) internal returns (bool) {\\n        require(buyEnabled);\\n        if (amount == offers[id].pay_amt) {\\n            if (isOfferSorted(id)) {\\n                //offers[id] must be removed from sorted list because all of it is bought\\n                _unsort(id);\\n            } else {\\n                _hide(id);\\n            }\\n        }\\n\\n        require(super.buy(id, amount));\\n\\n        // If offer has become dust during buy, we cancel it\\n        if (\\n            isActive(id) &&\\n            offers[id].pay_amt < _dust[address(offers[id].pay_gem)]\\n        ) {\\n            dustId = id; //enable current msg.sender to call cancel(id)\\n            cancel(id);\\n        }\\n        return true;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _find(uint256 id) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        uint256 top = _best[pay_gem][buy_gem];\\n        uint256 old_top = 0;\\n\\n        // Find the larger-than-id order whose successor is less-than-id.\\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\\n            old_top = top;\\n            top = _rank[top].prev;\\n        }\\n        return old_top;\\n    }\\n\\n    //find the id of the next higher offer after offers[id]\\n    function _findpos(uint256 id, uint256 pos) internal view returns (uint256) {\\n        require(id > 0);\\n\\n        // Look for an active order.\\n        while (pos != 0 && !isActive(pos)) {\\n            pos = _rank[pos].prev;\\n        }\\n\\n        if (pos == 0) {\\n            //if we got to the end of list without a single active offer\\n            return _find(id);\\n        } else {\\n            // if we did find a nearby active offer\\n            // Walk the order book down from there...\\n            if (_isPricedLtOrEq(id, pos)) {\\n                uint256 old_pos;\\n\\n                // Guaranteed to run at least once because of\\n                // the prior if statements.\\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\\n                    old_pos = pos;\\n                    pos = _rank[pos].prev;\\n                }\\n                return old_pos;\\n\\n                // ...or walk it up.\\n            } else {\\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\\n                    pos = _rank[pos].next;\\n                }\\n                return pos;\\n            }\\n        }\\n    }\\n\\n    //return true if offers[low] priced less than or equal to offers[high]\\n    function _isPricedLtOrEq(\\n        uint256 low, //lower priced offer's id\\n        uint256 high //higher priced offer's id\\n    ) internal view returns (bool) {\\n        return\\n            mul(offers[low].buy_amt, offers[high].pay_amt) >=\\n            mul(offers[high].buy_amt, offers[low].pay_amt);\\n    }\\n\\n    //these variables are global only because of solidity local variable limit\\n\\n    //match offers with taker offer, and execute token transactions\\n    function _matcho(\\n        uint256 t_pay_amt, //taker sell how much\\n        ERC20 t_pay_gem, //taker sell which token\\n        uint256 t_buy_amt, //taker buy how much\\n        ERC20 t_buy_gem, //taker buy which token\\n        uint256 pos, //position id\\n        bool rounding //match \\\"close enough\\\" orders?\\n    ) internal returns (uint256 id) {\\n        uint256 best_maker_id; //highest maker id\\n        uint256 t_buy_amt_old; //taker buy how much saved\\n        uint256 m_buy_amt; //maker offer wants to buy this much token\\n        uint256 m_pay_amt; //maker offer wants to sell this much token\\n\\n        // there is at least one offer stored for token pair\\n        while (_best[address(t_buy_gem)][address(t_pay_gem)] > 0) {\\n            best_maker_id = _best[address(t_buy_gem)][address(t_pay_gem)];\\n            m_buy_amt = offers[best_maker_id].buy_amt;\\n            m_pay_amt = offers[best_maker_id].pay_amt;\\n\\n            // Ugly hack to work around rounding errors. Based on the idea that\\n            // the furthest the amounts can stray from their \\\"true\\\" values is 1.\\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\\n            // their \\\"correct\\\" values and m_buy_amt and t_buy_amt at -1.\\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\\n            // c * d > a * b + a + b + c + d, we write...\\n            if (\\n                mul(m_buy_amt, t_buy_amt) >\\n                mul(t_pay_amt, m_pay_amt) +\\n                    (\\n                        rounding\\n                            ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt\\n                            : 0\\n                    )\\n            ) {\\n                break;\\n            }\\n            // ^ The `rounding` parameter is a compromise borne of a couple days\\n            // of discussion.\\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\\n            emit LogMatch(id, min(m_pay_amt, t_buy_amt));\\n            t_buy_amt_old = t_buy_amt;\\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\\n\\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\\n                break;\\n            }\\n        }\\n\\n        if (\\n            t_buy_amt > 0 &&\\n            t_pay_amt > 0 &&\\n            t_pay_amt >= _dust[address(t_pay_gem)]\\n        ) {\\n            //new offer should be created\\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\\n            //insert offer into the sorted list\\n            _sort(id, pos);\\n        }\\n    }\\n\\n    // Make a new offer without putting it in the sorted list.\\n    // Takes funds from the caller into market escrow.\\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\\n    function _offeru(\\n        uint256 pay_amt, //maker (ask) sell how much\\n        ERC20 pay_gem, //maker (ask) sell which token\\n        uint256 buy_amt, //maker (ask) buy how much\\n        ERC20 buy_gem //maker (ask) buy which token\\n    ) internal returns (uint256 id) {\\n        require(_dust[address(pay_gem)] <= pay_amt);\\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\\n        _near[id] = _head;\\n        _head = id;\\n        emit LogUnsortedOffer(id);\\n    }\\n\\n    //put offer into the sorted list\\n    function _sort(\\n        uint256 id, //maker (ask) id\\n        uint256 pos //position to insert into\\n    ) internal {\\n        require(isActive(id));\\n\\n        ERC20 buy_gem = offers[id].buy_gem;\\n        ERC20 pay_gem = offers[id].pay_gem;\\n        uint256 prev_id; //maker (ask) id\\n\\n        pos = pos == 0 ||\\n            offers[pos].pay_gem != pay_gem ||\\n            offers[pos].buy_gem != buy_gem ||\\n            !isOfferSorted(pos)\\n            ? _find(id)\\n            : _findpos(id, pos);\\n\\n        if (pos != 0) {\\n            //offers[id] is not the highest offer\\n            //requirement below is satisfied by statements above\\n            //require(_isPricedLtOrEq(id, pos));\\n            prev_id = _rank[pos].prev;\\n            _rank[pos].prev = id;\\n            _rank[id].next = pos;\\n        } else {\\n            //offers[id] is the highest offer\\n            prev_id = _best[address(pay_gem)][address(buy_gem)];\\n            _best[address(pay_gem)][address(buy_gem)] = id;\\n        }\\n\\n        if (prev_id != 0) {\\n            //if lower offer does exist\\n            //requirement below is satisfied by statements above\\n            //require(!_isPricedLtOrEq(id, prev_id));\\n            _rank[prev_id].next = id;\\n            _rank[id].prev = prev_id;\\n        }\\n\\n        _span[address(pay_gem)][address(buy_gem)]++;\\n        emit LogSortedOffer(id);\\n    }\\n\\n    // Remove offer from the sorted list (does not cancel offer)\\n    function _unsort(\\n        uint256 id //id of maker (ask) offer to remove from sorted list\\n    ) internal returns (bool) {\\n        address buy_gem = address(offers[id].buy_gem);\\n        address pay_gem = address(offers[id].pay_gem);\\n        require(_span[pay_gem][buy_gem] > 0);\\n\\n        require(\\n            _rank[id].delb == 0 && //assert id is in the sorted list\\n                isOfferSorted(id)\\n        );\\n\\n        if (id != _best[pay_gem][buy_gem]) {\\n            // offers[id] is not the highest offer\\n            require(_rank[_rank[id].next].prev == id);\\n            _rank[_rank[id].next].prev = _rank[id].prev;\\n        } else {\\n            //offers[id] is the highest offer\\n            _best[pay_gem][buy_gem] = _rank[id].prev;\\n        }\\n\\n        if (_rank[id].prev != 0) {\\n            //offers[id] is not the lowest offer\\n            require(_rank[_rank[id].prev].next == id);\\n            _rank[_rank[id].prev].next = _rank[id].next;\\n        }\\n\\n        _span[pay_gem][buy_gem]--;\\n        _rank[id].delb = block.number; //mark _rank[id] for deletion\\n        return true;\\n    }\\n\\n    //Hide offer from the unsorted order book (does not cancel offer)\\n    function _hide(\\n        uint256 id //id of maker offer to remove from unsorted list\\n    ) internal returns (bool) {\\n        uint256 uid = _head; //id of an offer in unsorted offers list\\n        uint256 pre = uid; //id of previous offer in unsorted offers list\\n\\n        require(!isOfferSorted(id)); //make sure offer id is not in sorted offers list\\n\\n        if (_head == id) {\\n            //check if offer is first offer in unsorted offers list\\n            _head = _near[id]; //set head to new first unsorted offer\\n            _near[id] = 0; //delete order from unsorted order list\\n            return true;\\n        }\\n        while (uid > 0 && uid != id) {\\n            //find offer in unsorted order list\\n            pre = uid;\\n            uid = _near[uid];\\n        }\\n        if (uid != id) {\\n            //did not find offer id in unsorted offers list\\n            return false;\\n        }\\n        _near[pre] = _near[id]; //set previous unsorted offer to point to offer after offer id\\n        _near[id] = 0; //delete order from unsorted order list\\n        return true;\\n    }\\n\\n    function setFeeBPS(uint256 _newFeeBPS) external auth returns (bool) {\\n        feeBPS = _newFeeBPS;\\n        return true;\\n    }\\n\\n    // Adding to token whitelist entrypoint\\n    function addToWhitelist(address addition) external auth {\\n        whitelist[addition] = true;\\n    }\\n\\n    function removeFromWhitelist(address remove) external auth {\\n        whitelist[remove] = false;\\n    }\\n\\n    function setAqueductDistributionLive(bool live)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductDistributionLive = live;\\n        return true;\\n    }\\n\\n    function setAqueductAddress(address _Aqueduct)\\n        external\\n        auth\\n        returns (bool)\\n    {\\n        AqueductAddress = _Aqueduct;\\n        return true;\\n    }\\n\\n    function setFeeTo(address newFeeTo) external auth returns (bool) {\\n        feeTo = newFeeTo;\\n        return true;\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\\ninterface IAqueduct {\\n    function distributeToMakerAndTaker(address maker, address taker)\\n        external\\n        returns (bool);\\n}\\n\"\n    },\n    \"contracts/rubiconPoolsv0/PairsTrade.sol\": {\n      \"content\": \"/// @author Benjamin Hughes - Rubicon\\n/// @notice This contract allows strategists to run off-chain market making strategies\\n/// @notice Yield from successful market making strategies are passed to LPs\\n/// @notice This contract is effectively the entrypoint for a strategist's pair trade\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BathToken.sol\\\";\\nimport \\\"../RubiconMarket.sol\\\";\\nimport \\\"./BathHouse.sol\\\";\\nimport \\\"./BathPair.sol\\\";\\n\\ncontract PairsTrade {\\n    string public name;\\n\\n    address public bathHouse;\\n\\n    address public RubiconMarketAddress;\\n\\n    mapping(address => uint256[]) addressToHoldings;\\n\\n    // security mapping to ensure only Pairs\\n    mapping(address => bool) approvedPairs;\\n\\n    uint256[] public outstandingAskIDs;\\n    uint256[] public outstandingBidIDs;\\n    uint256[2][] public outstandingPairIDs;\\n\\n    event LogTrade(uint256, ERC20, uint256, ERC20);\\n    event LogNote(string, uint256);\\n    event LogAddress(string, ERC20);\\n    event LogNote128(string, int128);\\n    event BothFilled();\\n\\n    struct order {\\n        uint256 pay_amt;\\n        ERC20 pay_gem;\\n        uint256 buy_amt;\\n        ERC20 buy_gem;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _bathHouse,\\n        address _rubiconMarket\\n    ) public {\\n        name = _name;\\n        bathHouse = _bathHouse;\\n        RubiconMarketAddress = _rubiconMarket;\\n    }\\n\\n    modifier onlyPairs {\\n        require(\\n            BathHouse(bathHouse).isApprovedPair(msg.sender) == true,\\n            \\\"not an approved pair\\\"\\n        );\\n        _;\\n    }\\n\\n    function placePairsTrade(\\n        address underlyingAsset,\\n        address bathAssetAddress,\\n        address underlyingQuote,\\n        address bathQuoteAddress,\\n        uint256 askNumerator,\\n        uint256 askDenomenator,\\n        uint256 bidNumerator,\\n        uint256 bidDenomenator\\n    ) internal {\\n        // 1. Calculate new bid and ask\\n        (order memory ask, order memory bid) =\\n            getNewOrders(\\n                underlyingAsset,\\n                underlyingQuote,\\n                askNumerator,\\n                askDenomenator,\\n                bidNumerator,\\n                bidDenomenator\\n            );\\n\\n        // 2. place new bid and ask\\n        placeTrades(\\n            bathAssetAddress,\\n            bathQuoteAddress,\\n            ask,\\n            bid,\\n            underlyingAsset,\\n            underlyingQuote\\n        );\\n    }\\n\\n    function getNewOrders(\\n        address underlyingAsset,\\n        address underlyingQuote,\\n        uint256 askNumerator,\\n        uint256 askDenominator,\\n        uint256 bidNumerator,\\n        uint256 bidDenominator\\n    ) internal pure returns (order memory, order memory) {\\n        ERC20 ERC20underlyingAsset = ERC20(underlyingAsset);\\n        ERC20 ERC20underlyingQuote = ERC20(underlyingQuote);\\n\\n        order memory newAsk =\\n            order(\\n                askNumerator,\\n                ERC20underlyingAsset,\\n                askDenominator,\\n                ERC20underlyingQuote\\n            );\\n        order memory newBid =\\n            order(\\n                (bidNumerator),\\n                ERC20underlyingQuote,\\n                bidDenominator,\\n                ERC20underlyingAsset\\n            );\\n        return (newAsk, newBid);\\n    }\\n\\n    // Calls offer (a,b,c,d, 0, false) on Rubicon Market to ensure to autofills\\n    function placeTrades(\\n        address bathAssetAddress,\\n        address bathQuoteAddress,\\n        order memory ask,\\n        order memory bid,\\n        address asset,\\n        address quote\\n    ) internal returns (bool) {\\n        uint256 newAskID =\\n            BathToken(bathAssetAddress).placeOffer(\\n                ask.pay_amt,\\n                ask.pay_gem,\\n                ask.buy_amt,\\n                ask.buy_gem\\n            );\\n        emit LogTrade(ask.pay_amt, ask.pay_gem, ask.buy_amt, ask.buy_gem);\\n\\n        uint256 newBidID =\\n            BathToken(bathQuoteAddress).placeOffer(\\n                bid.pay_amt,\\n                bid.pay_gem,\\n                bid.buy_amt,\\n                bid.buy_gem\\n            );\\n        emit LogTrade(bid.pay_amt, bid.pay_gem, bid.buy_amt, bid.buy_gem);\\n\\n        address pair = BathHouse(bathHouse).getBathPair(asset, quote);\\n        BathPair(pair).addOutstandingPair([newAskID, newBidID, now]);\\n    }\\n\\n    function execute(\\n        address underlyingAsset,\\n        address bathAssetAddress,\\n        address underlyingQuote,\\n        address bathQuoteAddress,\\n        uint256 askNumerator,\\n        uint256 askDenominator,\\n        uint256 bidNumerator,\\n        uint256 bidDenominator\\n    ) external onlyPairs returns (uint256, uint256) {\\n        // main function to chain the actions of a single strategic market making transaction (pairs trade w/ bid and ask)\\n        require(askNumerator > 0);\\n        require(askDenominator > 0);\\n        require(bidNumerator > 0);\\n        require(bidDenominator > 0);\\n\\n        // Place pairs trade according to input\\n        placePairsTrade(\\n            underlyingAsset,\\n            bathAssetAddress,\\n            underlyingQuote,\\n            bathQuoteAddress,\\n            askNumerator,\\n            askDenominator,\\n            bidNumerator,\\n            bidDenominator\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/rubiconPoolsv0/BathHouse.sol\": {\n      \"content\": \"/// @author Benjamin Hughes - Rubicon\\n/// @notice This contract acts as the admin for the Rubicon Pools system\\n/// @notice The BathHouse approves strategist contracts and initializes bathPairs\\n\\npragma solidity =0.5.16;\\n\\nimport \\\"./BathPair.sol\\\";\\n\\ncontract BathHouse {\\n    string public name = \\\"Rubicon Bath House\\\";\\n\\n    address[] public allBathPairs;\\n    mapping(address => mapping(address => address)) public getPair;\\n\\n    address public admin;\\n    address public RubiconMarketAddress;\\n\\n    // List of approved strategies\\n    mapping(address => bool) approvedStrategies;\\n    mapping(address => bool) approvedPairs;\\n    mapping(address => bool) bathQuoteExists;\\n    mapping(address => address) quoteToBathQuote;\\n\\n    bool public initialized;\\n\\n    function initialize(address market) public {\\n        require(!initialized);\\n        admin = msg.sender;\\n        RubiconMarketAddress = market;\\n        initialized = true;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin);\\n        _;\\n    }\\n\\n    function initBathPair(\\n        address asset,\\n        string calldata assetName,\\n        address quote,\\n        string calldata quoteName,\\n        uint256 _reserveRatio,\\n        uint256 _timeDelay,\\n        uint256 _maxOutstandingPairCount\\n    ) external onlyAdmin returns (address newPair) {\\n        //calls initialize on two Bath Tokens and spins them up\\n        require(asset != quote);\\n        require(asset != address(0));\\n        require(quote != address(0));\\n        require(getPair[asset][quote] == address(0));\\n        require(_reserveRatio < 100);\\n        require(_reserveRatio > 60);\\n        BathPair pair =\\n            new BathPair(\\n                asset,\\n                assetName,\\n                quote,\\n                quoteName,\\n                RubiconMarketAddress,\\n                _reserveRatio,\\n                _timeDelay,\\n                _maxOutstandingPairCount\\n            );\\n        allBathPairs.push(address(pair));\\n\\n        getPair[asset][quote] = address(pair);\\n\\n        approvePair(address(pair));\\n        addQuote(quote, address(pair.bathQuoteAddress));\\n        return address(pair);\\n    }\\n\\n    function getBathPair(address asset, address quote)\\n        public\\n        view\\n        returns (address pair)\\n    {\\n        return getPair[asset][quote];\\n    }\\n\\n    function isApprovedStrat(address strategy) external view returns (bool) {\\n        if (approvedStrategies[strategy] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function approveStrategy(address strategy)\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        approvedStrategies[strategy] = true;\\n    }\\n\\n    function isApprovedPair(address pair) external view returns (bool) {\\n        if (approvedPairs[pair] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function approvePair(address pair) internal {\\n        approvedPairs[pair] = true;\\n    }\\n\\n    function addQuote(address quote, address bathQuote) internal {\\n        if (bathQuoteExists[quote]) {\\n            return;\\n        } else {\\n            bathQuoteExists[quote] = true;\\n            quoteToBathQuote[quote] = bathQuote;\\n        }\\n    }\\n\\n    function doesQuoteExist(address quote) public view returns (bool) {\\n        return bathQuoteExists[quote];\\n    }\\n\\n    function quoteToBathQuoteCheck(address quote)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return quoteToBathQuote[quote];\\n    }\\n\\n    function setCancelTimeDelay(address bathPair, uint256 value)\\n        external\\n        onlyAdmin\\n    {\\n        BathPair(bathPair).setCancelTimeDelay(value);\\n    }\\n\\n    function setMaxOutstandingPairCount(address bathPair, uint256 value)\\n        external\\n        onlyAdmin\\n    {\\n        BathPair(bathPair).setMaxOutstandingPairCount(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/rubiconPoolsv0/BathPair.sol\": {\n      \"content\": \"/// @author Benjamin Hughes - Rubicon\\n/// @notice This contract allows a strategist to use user funds in order to market make for a Rubicon pair\\n/// @notice The BathPair is the admin for the pair's liquidity and has many security checks in place\\n/// @notice This contract is also where strategists claim rewards for successful market making\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BathToken.sol\\\";\\nimport \\\"./BathHouse.sol\\\";\\nimport \\\"../RubiconMarket.sol\\\";\\nimport \\\"../peripheral_contracts/SafeMathE.sol\\\";\\nimport \\\"../interfaces/IPairsTrade.sol\\\";\\nimport \\\"../peripheral_contracts/ABDKMath64x64.sol\\\";\\n\\ncontract BathPair {\\n    address public bathHouse;\\n    address public underlyingAsset;\\n    address public underlyingQuote;\\n\\n    address public bathAssetAddress;\\n    address public bathQuoteAddress;\\n\\n    address public RubiconMarketAddress;\\n\\n    // askID, bidID, timestamp\\n    uint256[3][] public outstandingPairIDs;\\n\\n    // Risk Parameters\\n    uint256 public reserveRatio; // proportion of the pool that must remain present in the pair\\n    uint256 public maximumOrderSize; // max order size that can be places in a single order\\n\\n    event LogTrade(uint256, ERC20, uint256, ERC20);\\n    event LogNote(string, uint256);\\n    event LogNoteI(string, int128);\\n    event Cancel(uint256, ERC20, uint256);\\n    event LogOffer(string, order);\\n    event LogGrossYield(address, uint256);\\n\\n    // bool public initialized;\\n\\n    // The delay after which unfilled orders are cancelled\\n    uint256 public timeDelay;\\n\\n    // Constraint variable for the max amount of outstanding market making pairs at a time\\n    uint256 public maxOutstandingPairCount;\\n\\n    // Maps a trade ID to each of their strategists\\n    mapping(uint256 => address) public ID2strategist;\\n    mapping(address => uint256) public strategist2FillsAsset;\\n    mapping(address => uint256) public strategist2FillsQuote;\\n    StrategistTrade[] public strategistRecord;\\n    uint256 internal totalAssetFills;\\n    uint256 internal totalQuoteFills;\\n\\n    struct StrategistTrade {\\n        address underlyingAsset;\\n        address bathAssetAddress;\\n        address underlyingQuote;\\n        address bathQuoteAddress;\\n        uint256 askNumerator;\\n        uint256 askDenominator;\\n        uint256 bidNumerator;\\n        uint256 bidDenominator;\\n        address strategist;\\n        uint256 timestamp;\\n        uint256[3] tradeIDs;\\n    }\\n\\n    struct order {\\n        uint256 pay_amt;\\n        ERC20 pay_gem;\\n        uint256 buy_amt;\\n        ERC20 buy_gem;\\n    }\\n\\n    function setCancelTimeDelay(uint256 value) public onlyBathHouse {\\n        timeDelay = value;\\n    }\\n\\n    function setMaxOutstandingPairCount(uint256 value) public onlyBathHouse {\\n        maxOutstandingPairCount = value;\\n    }\\n\\n    modifier onlyBathHouse {\\n        require(msg.sender == bathHouse);\\n        _;\\n    }\\n\\n    modifier onlyApprovedStrategy(address targetStrategy) {\\n        require(\\n            BathHouse(bathHouse).isApprovedStrat(targetStrategy) == true,\\n            \\\"not an approved strategy - bathPair\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier enforceReserveRatio {\\n        require(\\n            (BathToken(bathAssetAddress).totalSupply() * reserveRatio) / 100 <=\\n                IERC20(underlyingAsset).balanceOf(bathAssetAddress)\\n        );\\n        require(\\n            (BathToken(bathQuoteAddress).totalSupply() * reserveRatio) / 100 <=\\n                IERC20(underlyingQuote).balanceOf(bathQuoteAddress)\\n        );\\n        _;\\n        require(\\n            (BathToken(bathAssetAddress).totalSupply() * reserveRatio) / 100 <=\\n                IERC20(underlyingAsset).balanceOf(bathAssetAddress)\\n        );\\n        require(\\n            (BathToken(bathQuoteAddress).totalSupply() * reserveRatio) / 100 <=\\n                IERC20(underlyingQuote).balanceOf(bathQuoteAddress)\\n        );\\n    }\\n\\n    // TODO: enforce oracle sanity check to avoid order book manipulation before permissionless strategists\\n    function getMidpointPrice() internal returns (int128) {\\n        uint256 bestAskID =\\n            RubiconMarket(RubiconMarketAddress).getBestOffer(\\n                ERC20(underlyingAsset),\\n                ERC20(underlyingQuote)\\n            );\\n        uint256 bestBidID =\\n            RubiconMarket(RubiconMarketAddress).getBestOffer(\\n                ERC20(underlyingQuote),\\n                ERC20(underlyingAsset)\\n            );\\n\\n        order memory bestAsk = getOfferInfo(bestAskID);\\n        order memory bestBid = getOfferInfo(bestBidID);\\n        int128 midpoint =\\n            ABDKMath64x64.divu(\\n                ((bestAsk.buy_amt / bestAsk.pay_amt) +\\n                    (bestBid.pay_amt / bestBid.buy_amt)),\\n                2\\n            );\\n        // ((bestAsk.buy_amt / bestAsk.pay_amt) +\\n        //     (bestBid.pay_amt / bestBid.buy_amt)) / 2;\\n        emit LogNoteI(\\\"midpoint calculated:\\\", midpoint);\\n        return midpoint;\\n    }\\n\\n    // Takes the proposed bid and ask as a parameter - ensures that there is a spread and that ask price > best bid and\\n    // bid price > best ask\\n    function enforceSpread(\\n        uint256 askN,\\n        uint256 askD,\\n        uint256 bidN,\\n        uint256 bidD\\n    ) internal view {\\n        // A spread must exist: (askN / askD) < (bidN / bidD)\\n        require(\\n            (askN * bidD) < (bidN * askD),\\n            \\\"there is not a spread on strategist's pair trade\\\"\\n        );\\n        uint256 bestAskID =\\n            RubiconMarket(RubiconMarketAddress).getBestOffer(\\n                ERC20(underlyingAsset),\\n                ERC20(underlyingQuote)\\n            );\\n        uint256 bestBidID =\\n            RubiconMarket(RubiconMarketAddress).getBestOffer(\\n                ERC20(underlyingQuote),\\n                ERC20(underlyingAsset)\\n            );\\n\\n        order memory bestAsk = getOfferInfo(bestAskID);\\n        order memory bestBid = getOfferInfo(bestBidID);\\n\\n        // Goal is for (askNumerator / askDenominator) < (bestBid.buy_amt / bestBid.pay_amt)\\n        // Therefore: askNumerator * bestBid.pay_amt < bestBid.buy_amt * askDenominator\\n        require(\\n            (askN * bestBid.pay_amt) < (bestBid.buy_amt * askD),\\n            \\\"ask price is not greater than the best bid\\\"\\n        );\\n\\n        // Goal is for (bestAsk.pay_amt / bestAsk.buy_amt) < (bidNumerator / bidDenominator)\\n        // Therefore: bestAskNumerator * bidDenominator < bidNumerator * bestAskDenominator\\n        require(\\n            (bestAsk.pay_amt * bidD) < (bestAsk.buy_amt * bidN),\\n            \\\"bid price is not less than the best ask\\\"\\n        );\\n    }\\n\\n    // constructor called by the BathHouse to initialize a new Pair\\n    constructor(\\n        address asset,\\n        string memory assetName,\\n        address quote,\\n        string memory quoteName,\\n        address market,\\n        uint256 _reserveRatio,\\n        uint256 _timeDelay,\\n        uint256 _maxOutstandingPairCount\\n    ) public {\\n        bathHouse = msg.sender;\\n\\n        require(_reserveRatio <= 100);\\n        require(_reserveRatio > 0);\\n        reserveRatio = _reserveRatio;\\n\\n        timeDelay = _timeDelay;\\n\\n        maxOutstandingPairCount = _maxOutstandingPairCount;\\n\\n        underlyingAsset = asset;\\n        underlyingQuote = quote;\\n\\n        //deploy new BathTokens:\\n        BathToken bathAsset = new BathToken();\\n        bathAsset.initialize(\\n            string(abi.encodePacked(\\\"bath\\\", (assetName))),\\n            IERC20(asset),\\n            market,\\n            bathHouse\\n        );\\n        bathAssetAddress = address(bathAsset);\\n\\n        if (BathHouse(bathHouse).doesQuoteExist(quote)) {\\n            // don't deploy the new\\n            address bathQuote =\\n                BathHouse(bathHouse).quoteToBathQuoteCheck(quote);\\n            bathQuoteAddress = address(bathQuote);\\n        } else {\\n            // deploy a new bathQuote\\n            BathToken bathQuote = new BathToken();\\n            bathQuote.initialize(\\n                string(abi.encodePacked(\\\"bath\\\", (quoteName))),\\n                IERC20(quote),\\n                market,\\n                bathHouse\\n            );\\n            bathQuoteAddress = address(bathQuote);\\n        }\\n\\n        RubiconMarketAddress = market;\\n    }\\n\\n    // Returns filled liquidity to the correct bath pool\\n    function rebalancePair() internal {\\n        uint256 bathAssetYield =\\n            ERC20(underlyingQuote).balanceOf(bathAssetAddress);\\n        uint256 bathQuoteYield =\\n            ERC20(underlyingAsset).balanceOf(bathQuoteAddress);\\n\\n        if (bathAssetYield > 0) {\\n            BathToken(bathAssetAddress).rebalance(\\n                bathQuoteAddress,\\n                underlyingQuote,\\n                5\\n            );\\n            emit LogGrossYield(bathQuoteAddress, bathAssetYield);\\n        }\\n\\n        if (bathQuoteYield > 0) {\\n            BathToken(bathQuoteAddress).rebalance(\\n                bathAssetAddress,\\n                underlyingAsset,\\n                5\\n            );\\n            emit LogGrossYield(bathAssetAddress, bathQuoteYield);\\n        }\\n\\n        // Return settled trades to the appropriate bathToken\\n        require(\\n            IERC20(underlyingAsset).balanceOf(bathQuoteAddress) == 0,\\n            \\\"yield not correctly rebalanced\\\"\\n        );\\n        require(\\n            IERC20(underlyingQuote).balanceOf(bathAssetAddress) == 0,\\n            \\\"yield not correctly rebalanced\\\"\\n        );\\n    }\\n\\n    // function where strategists claim rewards proportional to their quantity of fills\\n    function strategistBootyClaim() external {\\n        uint256 fillCountA = strategist2FillsAsset[msg.sender];\\n        uint256 fillCountQ = strategist2FillsQuote[msg.sender];\\n        if (fillCountA > 0) {\\n            uint256 booty =\\n                (fillCountA * ERC20(underlyingAsset).balanceOf(address(this))) /\\n                    totalAssetFills;\\n            IERC20(underlyingAsset).transfer(msg.sender, booty);\\n            totalAssetFills -= fillCountA;\\n        }\\n        if (fillCountQ > 0) {\\n            uint256 booty =\\n                (fillCountQ * ERC20(underlyingQuote).balanceOf(address(this))) /\\n                    totalQuoteFills;\\n            IERC20(underlyingQuote).transfer(msg.sender, booty);\\n            totalQuoteFills -= fillCountQ;\\n        }\\n    }\\n\\n    function addOutstandingPair(uint256[3] calldata IDPair)\\n        external\\n        onlyApprovedStrategy(msg.sender)\\n    {\\n        require(IDPair.length == 3);\\n        outstandingPairIDs.push(IDPair);\\n    }\\n\\n    // orderID of the fill\\n    // only log fills for each strategist - needs to be asset specific\\n    // isAssetFill are *quotes* that result in asset yield\\n    function logFill(uint256 orderID, bool isAssetFill) internal {\\n        // Goal is to map a fill to a strategist\\n        address strategist = ID2strategist[orderID];\\n        if (isAssetFill) {\\n            strategist2FillsAsset[strategist] += 1;\\n            totalAssetFills += 1;\\n            emit LogNote(\\\"logFill asset\\\", totalAssetFills);\\n        } else {\\n            strategist2FillsQuote[strategist] += 1;\\n            totalQuoteFills += 1;\\n            emit LogNote(\\\"logFill quote\\\", totalQuoteFills);\\n        }\\n    }\\n\\n    function cancelPartialFills() internal {\\n        // ** Optimistically assume that any partialFill or totalFill resulted in yield **\\n        require(\\n            outstandingPairIDs.length < maxOutstandingPairCount,\\n            \\\"too many outstanding pairs\\\"\\n        );\\n\\n        for (uint256 x = 0; x < outstandingPairIDs.length; x++) {\\n            order memory offer1 = getOfferInfo(outstandingPairIDs[x][0]);\\n            order memory offer2 = getOfferInfo(outstandingPairIDs[x][1]);\\n\\n            if (\\n                (offer1.pay_amt == 0 &&\\n                    offer1.pay_gem == ERC20(0) &&\\n                    offer1.buy_amt == 0 &&\\n                    offer1.buy_gem == ERC20(0)) &&\\n                (offer2.pay_amt != 0 &&\\n                    offer2.pay_gem != ERC20(0) &&\\n                    offer2.buy_amt != 0 &&\\n                    offer2.buy_gem != ERC20(0))\\n            ) {\\n                // cancel offer2 and delete from outstandingPairsIDs as both orders are gone.\\n                BathToken(bathQuoteAddress).cancel(outstandingPairIDs[x][1]);\\n                emit Cancel(\\n                    outstandingPairIDs[x][1],\\n                    offer1.pay_gem,\\n                    offer1.pay_amt\\n                );\\n                delete outstandingPairIDs[x];\\n                // true if quote fills -> asset yield\\n                logFill(outstandingPairIDs[x][0], false);\\n                return;\\n            } else if (\\n                (offer1.pay_amt != 0 &&\\n                    offer1.pay_gem != ERC20(0) &&\\n                    offer1.buy_amt != 0 &&\\n                    offer1.pay_gem != ERC20(0)) &&\\n                (offer2.pay_amt == 0 &&\\n                    offer2.pay_gem == ERC20(0) &&\\n                    offer2.buy_amt == 0 &&\\n                    offer2.buy_gem == ERC20(0))\\n            ) {\\n                BathToken(bathAssetAddress).cancel(outstandingPairIDs[x][0]);\\n                emit Cancel(\\n                    outstandingPairIDs[x][0],\\n                    offer2.pay_gem,\\n                    offer2.pay_amt\\n                );\\n                delete outstandingPairIDs[x];\\n                logFill(outstandingPairIDs[x][1], true);\\n                return;\\n            } else if (\\n                (offer1.pay_amt != 0 &&\\n                    offer1.pay_gem != ERC20(0) &&\\n                    offer1.buy_amt != 0 &&\\n                    offer1.pay_gem != ERC20(0)) &&\\n                (offer2.pay_amt != 0 &&\\n                    offer2.pay_gem != ERC20(0) &&\\n                    offer2.buy_amt != 0 &&\\n                    offer2.buy_gem != ERC20(0))\\n            ) {\\n                // delete the offer if it is too old\\n                if (outstandingPairIDs[x][2] < (now - timeDelay)) {\\n                    BathToken(bathAssetAddress).cancel(\\n                        outstandingPairIDs[x][0]\\n                    );\\n                    emit Cancel(\\n                        outstandingPairIDs[x][0],\\n                        offer2.pay_gem,\\n                        offer2.pay_amt\\n                    );\\n                    BathToken(bathAssetAddress).cancel(\\n                        outstandingPairIDs[x][1]\\n                    );\\n                    emit Cancel(\\n                        outstandingPairIDs[x][1],\\n                        offer2.pay_gem,\\n                        offer2.pay_amt\\n                    );\\n                    delete outstandingPairIDs[x];\\n                } else {\\n                    logFill(outstandingPairIDs[x][1], false);\\n                    logFill(outstandingPairIDs[x][0], true);\\n                }\\n            }\\n        }\\n    }\\n\\n    // Get offer info from Rubicon Market\\n    function getOfferInfo(uint256 id) internal view returns (order memory) {\\n        (uint256 ask_amt, ERC20 ask_gem, uint256 bid_amt, ERC20 bid_gem) =\\n            RubiconMarket(RubiconMarketAddress).getOffer(id);\\n        order memory offerInfo = order(ask_amt, ask_gem, bid_amt, bid_gem);\\n        return offerInfo;\\n    }\\n\\n    function getMaxOrderSize(address asset, address bathTokenAddress)\\n        public\\n        returns (uint256)\\n    {\\n        require(asset == underlyingAsset || asset == underlyingQuote);\\n        uint256 maxOrderSizeProportion = 50; //in percentage points of underlying\\n        uint256 underlyingBalance = IERC20(asset).balanceOf(bathTokenAddress);\\n        emit LogNote(\\\"underlyingBalance\\\", underlyingBalance);\\n        emit LogNote(\\n            \\\"underlying other\\\",\\n            IERC20(underlyingQuote).balanceOf(bathQuoteAddress)\\n        );\\n        // Divide the below by 1000\\n        int128 shapeCoef = ABDKMath64x64.div(-5, 1000); // 5 / 1000\\n        emit LogNoteI(\\\"shapeCoef\\\", shapeCoef);\\n\\n        // if the asset/quote is overweighted: underlyingBalance / (Proportion of quote allocated to pair) * underlyingQuote balance\\n        if (asset == underlyingAsset) {\\n            // uint ratio = underlyingBalance / IERC20(underlyingQuote).balanceOf(bathQuoteAddress); //this ratio should equal price\\n            int128 ratio =\\n                ABDKMath64x64.divu(\\n                    underlyingBalance,\\n                    IERC20(underlyingQuote).balanceOf(bathQuoteAddress)\\n                );\\n            emit LogNoteI(\\\"ratio\\\", ratio); // this number divided by 2**64 is correct!\\n            if (ABDKMath64x64.mul(ratio, getMidpointPrice()) > (2**64)) {\\n                // bid at maxSize\\n                emit LogNote(\\n                    \\\"normal maxSize Asset\\\",\\n                    (maxOrderSizeProportion * underlyingBalance) / 100\\n                );\\n                return (maxOrderSizeProportion * underlyingBalance) / 100;\\n            } else {\\n                // return dynamic order size\\n                uint256 maxSize =\\n                    (maxOrderSizeProportion * underlyingBalance) / 100; // Correct!\\n                emit LogNote(\\\"raw maxSize\\\", maxSize);\\n                int128 e = ABDKMath64x64.divu(SafeMathE.eN(), SafeMathE.eD()); //Correct as a int128!\\n                emit LogNoteI(\\\"e\\\", e);\\n                int128 shapeFactor =\\n                    ABDKMath64x64.exp(ABDKMath64x64.mul(shapeCoef, ratio));\\n                emit LogNoteI(\\\"raised to the\\\", shapeFactor);\\n                uint256 dynamicSize = ABDKMath64x64.mulu(shapeFactor, maxSize);\\n                emit LogNote(\\\"dynamic maxSize Asset\\\", dynamicSize); //\\n                return dynamicSize;\\n            }\\n        } else if (asset == underlyingQuote) {\\n            int128 ratio =\\n                ABDKMath64x64.divu(\\n                    underlyingBalance,\\n                    IERC20(underlyingAsset).balanceOf(bathAssetAddress)\\n                );\\n            if (ABDKMath64x64.div(ratio, getMidpointPrice()) > (2**64)) {\\n                // bid at maxSize\\n                emit LogNote(\\n                    \\\"normal maxSize Quote\\\",\\n                    (maxOrderSizeProportion * underlyingBalance) / 100\\n                );\\n                return (maxOrderSizeProportion * underlyingBalance) / 100;\\n            } else {\\n                // return dynamic order size\\n                uint256 maxSize =\\n                    (maxOrderSizeProportion * underlyingBalance) / 100; // Correct! 48000000000000000000\\n                emit LogNote(\\\"raw maxSize\\\", maxSize);\\n                int128 e = ABDKMath64x64.divu(SafeMathE.eN(), SafeMathE.eD()); //Correct as a int128!\\n                emit LogNoteI(\\\"e\\\", e);\\n                int128 shapeFactor =\\n                    ABDKMath64x64.exp(ABDKMath64x64.mul(shapeCoef, ratio));\\n                emit LogNoteI(\\\"raised to the\\\", shapeFactor);\\n                uint256 dynamicSize = ABDKMath64x64.mulu(shapeFactor, maxSize);\\n                emit LogNote(\\\"dynamic maxSize Asset\\\", dynamicSize); // 45728245133630216043\\n                return dynamicSize;\\n            }\\n        }\\n\\n        // PseudoCode:\\n        // if ratio = (assetBalance / propotional quote balance) > 1:\\n        //      -Use dynamic order size for quote due to underweighting: n=-0.005 => MaxSize * e^(n*ratio)\\n        // maxQuoteSize * (eN / eD ) ** (n *ratio)\\n        // else:\\n        //      -Use dynamic order size for asset due to underweighting: ''\\n        // maxAssetSize * (eN / eD ) ** (n *ratio)\\n        // return orderSize;\\n    }\\n\\n    // Used to map a strategist to their orders\\n    function newTradeIDs() internal view returns (uint256[3] memory) {\\n        require(outstandingPairIDs[outstandingPairIDs.length - 1][2] == now);\\n        return outstandingPairIDs[outstandingPairIDs.length - 1];\\n    }\\n\\n    function executeStrategy(\\n        address targetStrategy,\\n        uint256 askNumerator, // Quote / Asset\\n        uint256 askDenominator, // Asset / Quote\\n        uint256 bidNumerator, // size in ASSET\\n        uint256 bidDenominator // size in QUOTES\\n    ) external onlyApprovedStrategy(targetStrategy) enforceReserveRatio {\\n        require(\\n            askNumerator > 0 &&\\n                askDenominator > 0 &&\\n                bidNumerator > 0 &&\\n                bidDenominator > 0\\n        );\\n\\n        // Enforce dynamic ordersizing and inventory management\\n        require(\\n            askNumerator <= getMaxOrderSize(underlyingAsset, bathAssetAddress),\\n            \\\"the ask is too large in size\\\"\\n        );\\n        require(\\n            bidNumerator <= getMaxOrderSize(underlyingQuote, bathQuoteAddress),\\n            \\\"the bid is too large in size\\\"\\n        );\\n\\n        // 1. Enforce that a spread exists and that the ask price > best bid price && bid price < best ask price\\n        enforceSpread(\\n            askNumerator,\\n            askDenominator,\\n            bidNumerator,\\n            bidDenominator\\n        );\\n\\n        // 2. Strategist executes a pair trade\\n        IPairsTrade(targetStrategy).execute(\\n            underlyingAsset,\\n            bathAssetAddress,\\n            underlyingQuote,\\n            bathQuoteAddress,\\n            askNumerator, // ask pay_amt\\n            askDenominator, // ask buy_amt\\n            bidNumerator, // bid pay_amt\\n            bidDenominator // bid buy_amt\\n        );\\n\\n        // 3. Strategist trade is recorded so they can get paid and the trade is logged for time\\n        // Need a mapping of trade ID that filled => strategist, timestamp, their price, bid or ask, midpoint price at that time\\n        strategistRecord.push(\\n            StrategistTrade(\\n                underlyingAsset,\\n                bathAssetAddress,\\n                underlyingQuote,\\n                bathQuoteAddress,\\n                askNumerator,\\n                askDenominator,\\n                bidNumerator,\\n                bidDenominator,\\n                msg.sender,\\n                now,\\n                newTradeIDs()\\n            )\\n        );\\n\\n        // 4. Cancel Outstanding Orders\\n        cancelPartialFills();\\n\\n        // 5. Return any filled yield to the appropriate bathToken/liquidity pool\\n        rebalancePair();\\n    }\\n}\\n\"\n    },\n    \"contracts/peripheral_contracts/SafeMathE.sol\": {\n      \"content\": \"pragma solidity =0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathE {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    // https://ethereum.stackexchange.com/questions/80642/how-can-i-use-the-mathematical-constant-e-in-solidity/80643\\n    // e represented as eN / eD\\n    // Careful of integer overflow here\\n    uint256 constant eNum = 271828;\\n    uint256 constant eDen = 100000;\\n\\n    // function eN constant returns\\n    function eN() internal pure returns (uint256) {\\n        return eNum;\\n    }\\n\\n    function eD() internal pure returns (uint256) {\\n        return eDen;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IPairsTrade.sol\": {\n      \"content\": \"// contract that employs user Bath liquidity to market make and pass yield to users\\n/// @author Benjamin Hughes\\n/// @notice This represents a Stoikov market-making model designed for Rubicon...\\npragma solidity ^0.5.16;\\n\\ninterface IPairsTrade {\\n    function execute(\\n        address underlyingAsset,\\n        address bathAssetAddress,\\n        address underlyingQuote,\\n        address bathQuoteAddress,\\n        uint256 askNumerator,\\n        uint256 askDenominator,\\n        uint256 bidNumerator,\\n        uint256 bidDenominator\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/peripheral_contracts/ABDKMath64x64.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity >=0.5.0; //<0.6.0-0||>=0.6.0 <0.7.0-0||>=0.7.0 <0.8.0-0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        return int64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        require(x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        require(x >= 0);\\n        return uint64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        int256 result = x >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        return int256(x) << 64;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) + y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) - y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = (int256(x) * y) >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        if (x == MIN_64x64) {\\n            require(\\n                y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                    y <= 0x1000000000000000000000000000000000000000000000000\\n            );\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu(x, uint256(y));\\n            if (negativeResult) {\\n                require(\\n                    absoluteResult <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    absoluteResult <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(absoluteResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) return 0;\\n\\n        require(x >= 0);\\n\\n        uint256 lo =\\n            (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256(x) * (y >> 128);\\n\\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require(\\n            hi <=\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n                    lo\\n        );\\n        return hi + lo;\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        require(y != 0);\\n        int256 result = (int256(x) << 64) / y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        require(y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        require(y != 0);\\n        uint128 result = divuu(x, y);\\n        require(result <= uint128(MAX_64x64));\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return -x;\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        require(x != 0);\\n        int256 result = int256(0x100000000000000000000000000000000) / x;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        return int128((int256(x) + int256(y)) >> 1);\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        int256 m = int256(x) * int256(y);\\n        require(m >= 0);\\n        require(\\n            m <\\n                0x4000000000000000000000000000000000000000000000000000000000000000\\n        );\\n        return int128(sqrtu(uint256(m)));\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        uint256 absoluteResult;\\n        bool negativeResult = false;\\n        if (x >= 0) {\\n            absoluteResult = powu(uint256(x) << 63, y);\\n        } else {\\n            // We rely on overflow behavior here\\n            absoluteResult = powu(uint256(uint128(-x)) << 63, y);\\n            negativeResult = y & 1 > 0;\\n        }\\n\\n        absoluteResult >>= 63;\\n\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        require(x >= 0);\\n        return int128(sqrtu(uint256(x) << 64));\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) {\\n            xc >>= 64;\\n            msb += 64;\\n        }\\n        if (xc >= 0x100000000) {\\n            xc >>= 32;\\n            msb += 32;\\n        }\\n        if (xc >= 0x10000) {\\n            xc >>= 16;\\n            msb += 16;\\n        }\\n        if (xc >= 0x100) {\\n            xc >>= 8;\\n            msb += 8;\\n        }\\n        if (xc >= 0x10) {\\n            xc >>= 4;\\n            msb += 4;\\n        }\\n        if (xc >= 0x4) {\\n            xc >>= 2;\\n            msb += 2;\\n        }\\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n        int256 result = (msb - 64) << 64;\\n        uint256 ux = uint256(x) << uint256(127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256(b);\\n        }\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        return\\n            int128(\\n                (uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n            );\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n        if (x & 0x8000000000000 > 0)\\n            result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n        if (x & 0x4000000000000 > 0)\\n            result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n        if (x & 0x2000000000000 > 0)\\n            result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n        if (x & 0x1000000000000 > 0)\\n            result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n        if (x & 0x800000000000 > 0)\\n            result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n        if (x & 0x400000000000 > 0)\\n            result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n        if (x & 0x200000000000 > 0)\\n            result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n        if (x & 0x100000000000 > 0)\\n            result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n        if (x & 0x80000000000 > 0)\\n            result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n        if (x & 0x40000000000 > 0)\\n            result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n        if (x & 0x20000000000 > 0)\\n            result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n        if (x & 0x10000000000 > 0)\\n            result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n        if (x & 0x8000000000 > 0)\\n            result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n        if (x & 0x4000000000 > 0)\\n            result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n        if (x & 0x2000000000 > 0)\\n            result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n        if (x & 0x1000000000 > 0)\\n            result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n        if (x & 0x800000000 > 0)\\n            result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n        if (x & 0x400000000 > 0)\\n            result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n        if (x & 0x200000000 > 0)\\n            result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n        if (x & 0x100000000 > 0)\\n            result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n        if (x & 0x80000000 > 0)\\n            result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n        if (x & 0x40000000 > 0)\\n            result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n        if (x & 0x20000000 > 0)\\n            result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n        if (x & 0x10000000 > 0)\\n            result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n        if (x & 0x8000000 > 0)\\n            result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n        if (x & 0x4000000 > 0)\\n            result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n        if (x & 0x2000000 > 0)\\n            result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n        if (x & 0x1000000 > 0)\\n            result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n        if (x & 0x800000 > 0)\\n            result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n        if (x & 0x400000 > 0)\\n            result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n        if (x & 0x200000 > 0)\\n            result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n        if (x & 0x100000 > 0)\\n            result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n        if (x & 0x80000 > 0)\\n            result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n        if (x & 0x40000 > 0)\\n            result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n        if (x & 0x20000 > 0)\\n            result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n        if (x & 0x10000 > 0)\\n            result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n        if (x & 0x8000 > 0)\\n            result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n        if (x & 0x4000 > 0)\\n            result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n        if (x & 0x2000 > 0)\\n            result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n        if (x & 0x1000 > 0)\\n            result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n        if (x & 0x800 > 0)\\n            result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n        if (x & 0x400 > 0)\\n            result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n        if (x & 0x200 > 0)\\n            result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n        if (x & 0x100 > 0)\\n            result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n        if (x & 0x80 > 0)\\n            result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n        if (x & 0x40 > 0)\\n            result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n        if (x & 0x20 > 0)\\n            result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n        if (x & 0x10 > 0)\\n            result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n        if (x & 0x8 > 0)\\n            result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n        if (x & 0x4 > 0)\\n            result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n        if (x & 0x2 > 0)\\n            result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n        if (x & 0x1 > 0)\\n            result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n        result >>= uint256(63 - (x >> 64));\\n        require(result <= uint256(MAX_64x64));\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return\\n            exp_2(\\n                int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128)\\n            );\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        require(y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert(xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128(result);\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n     * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x unsigned 129.127-bit fixed point number\\n     * @param y uint256 value\\n     * @return unsigned 129.127-bit fixed point number\\n     */\\n    function powu(uint256 x, uint256 y) private pure returns (uint256) {\\n        if (y == 0) return 0x80000000000000000000000000000000;\\n        else if (x == 0) return 0;\\n        else {\\n            int256 msb = 0;\\n            uint256 xc = x;\\n            if (xc >= 0x100000000000000000000000000000000) {\\n                xc >>= 128;\\n                msb += 128;\\n            }\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 xe = msb - 127;\\n            if (xe > 0) x >>= uint256(xe);\\n            else x <<= uint256(-xe);\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n            int256 re = 0;\\n\\n            while (y > 0) {\\n                if (y & 1 > 0) {\\n                    result = result * x;\\n                    y -= 1;\\n                    re += xe;\\n                    if (\\n                        result >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                    ) {\\n                        result >>= 128;\\n                        re += 1;\\n                    } else result >>= 127;\\n                    if (re < -127) return 0; // Underflow\\n                    require(re < 128); // Overflow\\n                } else {\\n                    x = x * x;\\n                    y >>= 1;\\n                    xe <<= 1;\\n                    if (\\n                        x >=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                    ) {\\n                        x >>= 128;\\n                        xe += 1;\\n                    } else x >>= 127;\\n                    if (xe < -127) return 0; // Underflow\\n                    require(xe < 128); // Overflow\\n                }\\n            }\\n\\n            if (re > 0) result <<= uint256(re);\\n            else if (re < 0) result >>= uint256(-re);\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) {\\n                xx >>= 128;\\n                r <<= 64;\\n            }\\n            if (xx >= 0x10000000000000000) {\\n                xx >>= 64;\\n                r <<= 32;\\n            }\\n            if (xx >= 0x100000000) {\\n                xx >>= 32;\\n                r <<= 16;\\n            }\\n            if (xx >= 0x10000) {\\n                xx >>= 16;\\n                r <<= 8;\\n            }\\n            if (xx >= 0x100) {\\n                xx >>= 8;\\n                r <<= 4;\\n            }\\n            if (xx >= 0x10) {\\n                xx >>= 4;\\n                r <<= 2;\\n            }\\n            if (xx >= 0x8) {\\n                r <<= 1;\\n            }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128(r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/peripheral_contracts/TokenVesting2.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title TokenVesting\\n * @notice The Rubicon team will vest tokens to team members based on this contract\\n * @dev A token holder contract that can release its token balance gradually like a\\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\\n * owner.\\n */\\ncontract TokenVesting2 is Ownable {\\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\\n    // cliff period of a year and a duration of four years, are safe to use.\\n    // solhint-disable not-rely-on-time\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event TokensReleased(address token, uint256 amount);\\n    event TokenVestingRevoked(address token);\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\\n    uint256 private _cliff;\\n    uint256 private _start;\\n    uint256 private _duration;\\n\\n    bool private _revocable;\\n\\n    mapping(address => uint256) private _released;\\n    mapping(address => bool) private _revoked;\\n\\n    /**\\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\\n     * of the balance will have vested.\\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\\n     * @param start the time (as Unix time) at which point vesting starts\\n     * @param duration duration in seconds of the period in which the tokens will vest\\n     * @param revocable whether the vesting is revocable or not\\n     */\\n    constructor(\\n        address beneficiary,\\n        uint256 start,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    ) public {\\n        require(\\n            beneficiary != address(0),\\n            \\\"TokenVesting: beneficiary is the zero address\\\"\\n        );\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            cliffDuration <= duration,\\n            \\\"TokenVesting: cliff is longer than duration\\\"\\n        );\\n        require(duration > 0, \\\"TokenVesting: duration is 0\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            start.add(duration) > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n\\n        _beneficiary = beneficiary;\\n        _revocable = revocable;\\n        _duration = duration;\\n        _cliff = start.add(cliffDuration);\\n        _start = start;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the cliff time of the token vesting.\\n     */\\n    function cliff() public view returns (uint256) {\\n        return _cliff;\\n    }\\n\\n    /**\\n     * @return the start time of the token vesting.\\n     */\\n    function start() public view returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @return the duration of the token vesting.\\n     */\\n    function duration() public view returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @return true if the vesting is revocable.\\n     */\\n    function revocable() public view returns (bool) {\\n        return _revocable;\\n    }\\n\\n    /**\\n     * @return the amount of the token released.\\n     */\\n    function released(address token) public view returns (uint256) {\\n        return _released[token];\\n    }\\n\\n    /**\\n     * @return true if the token is revoked.\\n     */\\n    function revoked(address token) public view returns (bool) {\\n        return _revoked[token];\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function release(IERC20 token) public {\\n        uint256 unreleased = _releasableAmount(token);\\n\\n        require(unreleased > 0, \\\"TokenVesting: no tokens are due\\\");\\n\\n        _released[address(token)] = _released[address(token)].add(unreleased);\\n\\n        token.safeTransfer(_beneficiary, unreleased);\\n\\n        emit TokensReleased(address(token), unreleased);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\\n     * remain in the contract, the rest are returned to the owner.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function revoke(IERC20 token) public onlyOwner {\\n        require(_revocable, \\\"TokenVesting: cannot revoke\\\");\\n        require(\\n            !_revoked[address(token)],\\n            \\\"TokenVesting: token already revoked\\\"\\n        );\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        uint256 unreleased = _releasableAmount(token);\\n        uint256 refund = balance.sub(unreleased);\\n\\n        _revoked[address(token)] = true;\\n\\n        token.safeTransfer(owner(), refund);\\n\\n        emit TokenVestingRevoked(address(token));\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\\n        return _vestedAmount(token).sub(_released[address(token)]);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\\n        uint256 currentBalance = token.balanceOf(address(this));\\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\\n\\n        if (block.timestamp < _cliff) {\\n            return 0;\\n        } else if (\\n            block.timestamp >= _start.add(_duration) || _revoked[address(token)]\\n        ) {\\n            return totalBalance;\\n        } else {\\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\\n        }\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripheral_contracts/TokenVesting1.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title TokenVesting\\n * @notice The Rubicon team will vest tokens to team members based on this contract\\n * @dev A token holder contract that can release its token balance gradually like a\\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\\n * owner.\\n */\\ncontract TokenVesting1 is Ownable {\\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\\n    // cliff period of a year and a duration of four years, are safe to use.\\n    // solhint-disable not-rely-on-time\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event TokensReleased(address token, uint256 amount);\\n    event TokenVestingRevoked(address token);\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\\n    uint256 private _cliff;\\n    uint256 private _start;\\n    uint256 private _duration;\\n\\n    bool private _revocable;\\n\\n    mapping(address => uint256) private _released;\\n    mapping(address => bool) private _revoked;\\n\\n    /**\\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\\n     * of the balance will have vested.\\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\\n     * @param start the time (as Unix time) at which point vesting starts\\n     * @param duration duration in seconds of the period in which the tokens will vest\\n     * @param revocable whether the vesting is revocable or not\\n     */\\n    constructor(\\n        address beneficiary,\\n        uint256 start,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    ) public {\\n        require(\\n            beneficiary != address(0),\\n            \\\"TokenVesting: beneficiary is the zero address\\\"\\n        );\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            cliffDuration <= duration,\\n            \\\"TokenVesting: cliff is longer than duration\\\"\\n        );\\n        require(duration > 0, \\\"TokenVesting: duration is 0\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            start.add(duration) > block.timestamp,\\n            \\\"TokenVesting: final time is before current time\\\"\\n        );\\n\\n        _beneficiary = beneficiary;\\n        _revocable = revocable;\\n        _duration = duration;\\n        _cliff = start.add(cliffDuration);\\n        _start = start;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the cliff time of the token vesting.\\n     */\\n    function cliff() public view returns (uint256) {\\n        return _cliff;\\n    }\\n\\n    /**\\n     * @return the start time of the token vesting.\\n     */\\n    function start() public view returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @return the duration of the token vesting.\\n     */\\n    function duration() public view returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @return true if the vesting is revocable.\\n     */\\n    function revocable() public view returns (bool) {\\n        return _revocable;\\n    }\\n\\n    /**\\n     * @return the amount of the token released.\\n     */\\n    function released(address token) public view returns (uint256) {\\n        return _released[token];\\n    }\\n\\n    /**\\n     * @return true if the token is revoked.\\n     */\\n    function revoked(address token) public view returns (bool) {\\n        return _revoked[token];\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function release(IERC20 token) public {\\n        uint256 unreleased = _releasableAmount(token);\\n\\n        require(unreleased > 0, \\\"TokenVesting: no tokens are due\\\");\\n\\n        _released[address(token)] = _released[address(token)].add(unreleased);\\n\\n        token.safeTransfer(_beneficiary, unreleased);\\n\\n        emit TokensReleased(address(token), unreleased);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\\n     * remain in the contract, the rest are returned to the owner.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function revoke(IERC20 token) public onlyOwner {\\n        require(_revocable, \\\"TokenVesting: cannot revoke\\\");\\n        require(\\n            !_revoked[address(token)],\\n            \\\"TokenVesting: token already revoked\\\"\\n        );\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        uint256 unreleased = _releasableAmount(token);\\n        uint256 refund = balance.sub(unreleased);\\n\\n        _revoked[address(token)] = true;\\n\\n        token.safeTransfer(owner(), refund);\\n\\n        emit TokenVestingRevoked(address(token));\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\\n        return _vestedAmount(token).sub(_released[address(token)]);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested.\\n     * @param token ERC20 token which is being vested\\n     */\\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\\n        uint256 currentBalance = token.balanceOf(address(this));\\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\\n\\n        if (block.timestamp < _cliff) {\\n            return 0;\\n        } else if (\\n            block.timestamp >= _start.add(_duration) || _revoked[address(token)]\\n        ) {\\n            return totalBalance;\\n        } else {\\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\\n        }\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\n    },\n    \"contracts/peripheral_contracts/EquityToken.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n// https://github.com/ethereum/eips/issues/1404\\n// contract ERC1404 is ERC20 {\\n//     function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\\n//     function messageForTransferRestriction (uint8 restrictionCode) public view returns (string memory);\\n// }\\n\\ncontract EquityToken is ERC20Detailed, ERC20 {\\n    constructor(address admin, uint256 initialSupply)\\n        public\\n        ERC20Detailed(\\\"Regulation A+ Equity\\\", \\\"EQT\\\", 18)\\n    {\\n        _mint(admin, initialSupply);\\n    }\\n}\\n\"\n    },\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\": {\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "c68f385ed264e1e1dfba383ca416d2a7",
      "transactionHash": "0xa1c8c02dea805d11476df4b826af83566e1daee618066f257b223c5d95d87b69",
      "args": []
    },
    "decoded": {
      "from": "0x75E7aBED3406df8f2fD4E036Cbb5f6830bce525d",
      "gasPrice": "0",
      "gasLimit": "8999999",
      "to": null,
      "value": "0",
      "nonce": 1,
      "data": "0x60806040526006805460ff60b01b1960ff60a81b19909116600160a81b1716600160b01b17905534801561003257600080fd5b50613c12806100426000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80637ca9429a116101d3578063be71f5ce11610104578063d6febde8116100a2578063f09ea2a61161007c578063f09ea2a614610aab578063f46901ed14610ae7578063f582d29314610b0d578063ff1fd97414610b155761035d565b8063d6febde814610a1a578063e1a6f01414610a3d578063e43252d714610a855761035d565b8063c2d526aa116100de578063c2d526aa14610986578063c41a360a146109c1578063d2b420ce146109de578063d6f15469146109fb5761035d565b8063be71f5ce1461092c578063bf7c734e14610952578063c2b6b58c1461097e5761035d565b80638da5cb5b11610171578063943911bc1161014b578063943911bc146108b6578063a128171b146108d3578063a78d4316146108f2578063b4f9b6c81461090f5761035d565b80638da5cb5b1461086b578063911550f41461087357806391be90c8146108905761035d565b806385ee7ba6116101ad57806385ee7ba6146107a95780638a72ea6a146107d75780638ab1d6811461083d5780638af82a2e146108635761035d565b80637ca9429a146107245780638185402b1461075257806382afd23b1461078c5761035d565b806340e58ee5116102ad578063604b6a9c1161024b5780636b9d8c4b116102255780636b9d8c4b146106ad57806374c1d7d3146106d157806375f12b21146106ff578063779997c3146107075761035d565b8063604b6a9c1461064557806361f54a7914610662578063677170e11461067f5761035d565b8063496064551161028757806349606455146105c7578063511fa487146105f3578063557ed1ba1461061957806356ad87641461063d5761035d565b806340e58ee51461053f5780634579268a1461055c578063467f0b7b146105aa5761035d565b8063144a27521161031a5780631d834a1b116102f45780631d834a1b146104ed578063232cae0b146105105780632aed1905146105185780632f90a6fc146105375761035d565b8063144a27521461046f578063158ef93e146104a55780631b33d412146104ad5761035d565b806301492a0b146103625780630374fc6f1461037e5780630621b4f6146103be57806307da68f5146103f8578063093f51981461040257806313af403514610449575b600080fd5b61036a610b4b565b604080519115158252519081900360200190f35b6103ac6004803603604081101561039457600080fd5b506001600160a01b0381358116916020013516610b5b565b60408051918252519081900360200190f35b6103ac600480360360808110156103d457600080fd5b506001600160a01b0381358116916020810135916040820135169060600135610b88565b610400610d17565b005b6103ac6004803603608081101561041857600080fd5b506001600160a01b0381358116916020810135909116906001600160801b0360408201358116916060013516610d74565b6104006004803603602081101561045f57600080fd5b50356001600160a01b0316610d9d565b6103ac6004803603606081101561048557600080fd5b506001600160a01b03813581169160208101359091169060400135610e31565b61036a610ef9565b6103ac600480360360a08110156104c357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060800135610f09565b61036a6004803603604081101561050357600080fd5b5080359060200135610f36565b6103ac611003565b61036a6004803603602081101561052e57600080fd5b50351515611009565b61036a6110b7565b61036a6004803603602081101561055557600080fd5b50356110c7565b6105796004803603602081101561057257600080fd5b5035611227565b604080519485526001600160a01b039384166020860152848101929092529091166060830152519081900360800190f35b61036a600480360360208110156105c057600080fd5b50356112b4565b610400600480360360408110156105dd57600080fd5b50803590602001356001600160801b03166113b5565b6103ac6004803603602081101561060957600080fd5b50356001600160a01b03166113d5565b6106216113f0565b604080516001600160401b039092168252519081900360200190f35b6103ac6113f4565b61036a6004803603602081101561065b57600080fd5b50356113fa565b6103ac6004803603602081101561067857600080fd5b503561144d565b6103ac6004803603604081101561069557600080fd5b506001600160a01b038135811691602001351661145f565b6106b561147c565b604080516001600160a01b039092168252519081900360200190f35b6103ac600480360360408110156106e757600080fd5b506001600160a01b038135811691602001351661148b565b61036a6114a8565b6104006004803603602081101561071d57600080fd5b50356114b8565b6103ac6004803603604081101561073a57600080fd5b506001600160a01b03813581169160200135166115c5565b6103ac6004803603608081101561076857600080fd5b506001600160a01b03813581169160208101359160408201351690606001356115f0565b61036a600480360360208110156107a257600080fd5b5035611760565b610400600480360360408110156107bf57600080fd5b508035151590602001356001600160a01b0316611787565b6107f4600480360360208110156107ed57600080fd5b5035611869565b604080519687526001600160a01b03958616602088015286810194909452918416606086015290921660808401526001600160401b0390911660a0830152519081900360c00190f35b6104006004803603602081101561085357600080fd5b50356001600160a01b03166118bb565b6103ac611924565b6106b561192a565b6103ac6004803603602081101561088957600080fd5b5035611939565b6103ac600480360360208110156108a657600080fd5b50356001600160a01b031661194b565b6103ac600480360360208110156108cc57600080fd5b503561195d565b61036a600480360360208110156108e957600080fd5b50351515611972565b6103ac6004803603602081101561090857600080fd5b50356119dd565b6104006004803603602081101561092557600080fd5b50356119ef565b61036a6004803603602081101561094257600080fd5b50356001600160a01b0316611a04565b61036a6004803603604081101561096857600080fd5b506001600160a01b038135169060200135611a73565b61036a611b82565b6109a36004803603602081101561099c57600080fd5b5035611b87565b60408051938452602084019290925282820152519081900360600190f35b6106b5600480360360208110156109d757600080fd5b5035611ba8565b61036a600480360360208110156109f457600080fd5b5035611bc6565b61036a60048036036020811015610a1157600080fd5b50351515611c36565b61036a60048036036040811015610a3057600080fd5b5080359060200135611ce3565b6103ac600480360360c0811015610a5357600080fd5b508035906001600160a01b0360208201358116916040810135916060820135169060808101359060a001351515611e2e565b61040060048036036020811015610a9b57600080fd5b50356001600160a01b0316611ef2565b6103ac60048036036080811015610ac157600080fd5b508035906001600160a01b03602082013581169160408101359160609091013516611f5e565b61036a60048036036020811015610afd57600080fd5b50356001600160a01b0316611fe1565b61036a612050565b6103ac60048036036060811015610b2b57600080fd5b506001600160a01b03813581169160208101359091169060400135612060565b600654600160b01b900460ff1681565b6001600160a01b038083166000908152600860209081526040808320938516835292905220545b92915050565b60045460009060ff1615610bd8576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415610d0157610beb8487610b5b565b905080610bf757600080fd5b6000818152600260208190526040909120908101549054610c189190612119565b85670de0b6b3a7640000021015610c2e57610d01565b600081815260026020819052604090912001548510610ca557600081815260026020526040902054610c61908390612148565b9150610c83856002600084815260200190815260200160002060020154612197565b600082815260026020526040902054909550610ca09082906113b5565b610cfc565b600081815260026020819052604082208054910154633b9aca0091610cd69189840291610cd1916121e7565b612203565b81610cdd57fe5b049050610cea8382612148565b9250610cf682826113b5565b60009550505b610bdb565b82821015610d0e57600080fd5b50949350505050565b610d2033612233565b610d5f576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b179055565b6000610d94836001600160801b031686846001600160801b031687611f5e565b95945050505050565b610da633612233565b610de5576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9491a250565b600080610e3e8585610b5b565b90505b60008181526002602081905260409091200154831115610eb957600081815260026020526040902054610e75908390612148565b9150610e97836002600084815260200190815260200160002060020154612197565b92508215610eb457610ea88161195d565b905080610eb457600080fd5b610e41565b60008181526002602081905260409091208054910154610d94918491633b9aca0091610eec9188840291610cd1916121e7565b81610ef357fe5b04612148565b600e54600160a81b900460ff1681565b6000610f13611b82565b15610f1d57600080fd5b610f2c86868686866001611e2e565b9695505050505050565b60045460009060ff1615610f86576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b610f8f83611bc6565b15610f9957600080fd5b610fa283611760565b610fab57600080fd5b610fb483612274565b50610fbf838361231e565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60015481565b600061101433612233565b611053576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160b01b90810260ff60b01b199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a15060015b919050565b600e54600160a01b900460ff1681565b6000816110d381611760565b61110e5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b611116611b82565b8061113a575061112581611ba8565b6001600160a01b0316336001600160a01b0316145b806111465750600d5481145b6111815760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff16156111ce576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654600160b01b900460ff1615611217576111e983611bc6565b15611205576111f7836124bd565b61120057600080fd5b611217565b61120e83612274565b61121757600080fd5b61122083612678565b9392505050565b600080600080611235613a50565b5050506000928352505060026020818152604092839020835160c081018552815480825260018301546001600160a01b039081169483018590529483015495820186905260038301548516606083018190526004909301549485166080830152600160a01b9094046001600160401b031660a090910152919390929190565b60045460009060ff1615611304576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b61130d82611760565b15801561132a575060008281526007602052604090206002015415155b801561134a57506000828152600760205260409020600201546009194301115b61135357600080fd5b60008281526007602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b6113c8826001600160801b038316611ce3565b6113d157600080fd5b5050565b6001600160a01b03166000908152600a602052604090205490565b4290565b600d5481565b600061140533612233565b611444576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600555600190565b6000908152600b602052604090205490565b600960209081526000928352604080842090915290825290205481565b600e546001600160a01b031681565b600860209081526000928352604080842090915290825290205481565b600654600160a01b900460ff1681565b806114c281611760565b6114cb57600080fd5b6114d3611b82565b156114dd57600080fd5b600082815260026020818152604080842060048101546001820154600383015484516001600160601b0319606084811b8216838a015283901b1660348201528551602881830301815260488201808852815191890191909120998c905296889052845494909701546001600160a01b03928316909652811660688701526001600160801b0392831660888701529190931660a88501526001600160401b03600160a01b84041660c8850152905186949190921692909184917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360e80190a4505050565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b60045460009060ff1615611640576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b60005b8415611753576116538685610b5b565b90508061165f57600080fd5b6000818152600260208190526040909120805491015461167f9190612119565b85670de0b6b3a764000002101561169557611753565b6000818152600260205260409020548510611709576116ca826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506116e7908690612197565b6000828152600260205260409020549095506117049082906113b5565b61174e565b600081815260026020819052604090912090810154905461173d918491633b9aca0091610eec918a840291610cd1916121e7565b915061174981866113b5565b600094505b611643565b82821115610d0e57600080fd5b600090815260026020526040902060040154600160a01b90046001600160401b0316151590565b600e54600160a81b900460ff16156117e6576040805162461bcd60e51b815260206004820152601f60248201527f636f6e747261637420697320616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600e805460ff60a01b1916600160a01b84151502179055600680546001600160a01b03199081166001600160a01b0384161790915560008054339216821781556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed949190a250506014600555600e805460ff60a81b1916600160a81b179055565b60026020819052600091825260409091208054600182015492820154600383015460049093015491936001600160a01b039081169391929181169190811690600160a01b90046001600160401b031686565b6118c433612233565b611903576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19169055565b600c5490565b6000546001600160a01b031681565b60009081526007602052604090205490565b600a6020526000908152604090205481565b60009081526007602052604090206001015490565b600061197d33612233565b6119bc576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e8054821515600160a01b0260ff60a01b199091161790556001919050565b600b6020526000908152604090205481565b6119f8816110c7565b611a0157600080fd5b50565b6000611a0f33612233565b611a4e576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600e80546001600160a01b0383166001600160a01b03199091161790556001919050565b6000611a7e33612233565b611abd576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b604080513480825260208201838152369383018490526004359360243593849286923392600080356001600160e01b03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a46001600160a01b0386166000818152600a60209081526040918290208890558151928352820187905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a150600195945050505050565b600090565b60076020526000908152604090208054600182015460029092015490919083565b6000908152600260205260409020600401546001600160a01b031690565b600081815260076020526040812054151580611bf2575060008281526007602052604090206001015415155b80610b82575050600081815260026020908152604080832060018101546001600160a01b039081168552600884528285206003909201541684529091529020541490565b6000611c4133612233565b611c80576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b60068054831515600160a81b90810260ff60a81b199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b600082611cef81611760565b611cf857600080fd5b611d00611b82565b15611d0a57600080fd5b60045460ff1615611d57576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600e54600160a01b900460ff1615611dfd57600e546001600160a01b031663b30ed7b3611d8386611ba8565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301523360248301525160448083019260209291908290030181600087803b158015611dd057600080fd5b505af1158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b50505b600654613a8590600160b01b900460ff16611e1a57612a86611e1e565b6131cc5b9050610d9485858363ffffffff16565b6000611e38611b82565b15611e4257600080fd5b60045460ff1615611e8f576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b6001600160a01b0386166000908152600a6020526040902054871015611eb457600080fd5b600654600160b01b900460ff1615611edb57611ed4878787878787613297565b9050610f2c565b611ee78787878761343e565b979650505050505050565b611efb33612233565b611f3a576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b60045460009060ff1615611fae576040805162461bcd60e51b81526020600482015260126024820152711499595b9d1c985b98de48185d1d195b5c1d60721b604482015290519081900360640190fd5b600654613a8590600160b01b900460ff16611fcb5761343e611fcf565b6137775b9050610f2c868686868563ffffffff16565b6000611fec33612233565b61202b576040805162461bcd60e51b81526020600482015260146024820152600080516020613bbe833981519152604482015290519081900360640190fd5b50600680546001600160a01b0383166001600160a01b03199091161790556001919050565b600654600160a81b900460ff1681565b60008061206d8486610b5b565b90505b6000818152600260205260409020548311156120e5576120a6826002600084815260200190815260200160002060020154612148565b6000828152600260205260409020549092506120c3908490612197565b925082156120e0576120d48161195d565b9050806120e057600080fd5b612070565b6000818152600260208190526040909120908101549054610d94918491633b9aca0091610eec9188840291610cd1916121e7565b60008161213961213185670de0b6b3a7640000613801565b600285610ef3565b8161214057fe5b049392505050565b80820182811015610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610b82576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b600081612139612131856b033b2e3c9fd0803ce8000000613801565b60006b033b2e3c9fd0803ce800000061213961221f8585613801565b60026b033b2e3c9fd0803ce8000000610ef3565b60006001600160a01b03821630141561224e575060016110b2565b6000546001600160a01b038381169116141561226c575060016110b2565b5060006110b2565b600c546000908061228484611bc6565b1561228e57600080fd5b83600c5414156122b6575050506000818152600b602052604081208054600c555560016110b2565b5b6000821180156122c75750838214155b156122e257506000818152600b6020526040902054906122b7565b8382146122f4576000925050506110b2565b6000848152600b602052604080822080549383529082209290925584815290555060019050919050565b61232782611760565b61233057600080fd5b600082815260026020526040812060038101546001909101546001600160a01b039182169291169083158061238257506000848152600260205260409020600101546001600160a01b03838116911614155b806123aa57506000848152600260205260409020600301546001600160a01b03848116911614155b806123bb57506123b984611bc6565b155b6123ce576123c98585613864565b6123d7565b6123d785613936565b9350831561240557506000838152600760205260408082206001018054908790558683529120849055612432565b506001600160a01b0381811660009081526008602090815260408083209386168352929052208054908590555b80156124565760008181526007602052604080822087905586825290206001018190555b6001600160a01b03808316600090815260096020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260026020908152604080832060038101546001909101546001600160a01b03908116808652600985528386209190921680865293529083205461250457600080fd5b600084815260076020526040902060020154158015612527575061252784611bc6565b61253057600080fd5b6001600160a01b0380821660009081526008602090815260408083209386168352929052205484146125a357600084815260076020526040808220548252902060010154841461257f57600080fd5b600084815260076020526040808220600180820154915484529190922001556125d9565b6000848152600760209081526040808320600101546001600160a01b038086168552600884528285209087168552909252909120555b6000848152600760205260409020600101541561263057600084815260076020526040808220600101548252902054841461261357600080fd5b600084815260076020526040808220805460019091015483529120555b6001600160a01b039081166000908152600960209081526040808320949093168252928352818120805460001901905593845260079091529091204360029091015550600190565b60008161268481611760565b6126bf5760405162461bcd60e51b815260040180806020018281038252602d815260200180613abb602d913960400191505060405180910390fd5b6126c7611b82565b806126eb57506126d681611ba8565b6001600160a01b0316336001600160a01b0316145b806126f75750600d5481145b6127325760405162461bcd60e51b8152600401808060200182810382526074815260200180613ae86074913960800191505060405180910390fd5b60045460ff161561274257600080fd5b6004805460ff19166001179055612757613a50565b600260008581526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a90046001600160401b03166001600160401b03166001600160401b0316815250509050600260008581526020019081526020016000206000808201600090556001820160006101000a8154906001600160a01b03021916905560028201600090556003820160006101000a8154906001600160a01b0302191690556004820160006101000a8154906001600160a01b0302191690556004820160146101000a8154906001600160401b030219169055505080602001516001600160a01b031663a9059cbb826080015183600001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561294157600080fd5b505af1158015612955573d6000803e3d6000fd5b505050506040513d602081101561296b57600080fd5b505161297657600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808101516020808301805160608086018051604080516001600160601b031995851b8616818901529190931b9093166034840152815160288185030181526048840180845281519190960120935190518751838901516001600160a01b0393841690975290821660688501526001600160801b03908116608885015290941660a88301526001600160401b03421660c8830152519290931692909187917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b4819995919081900360e80190a450506004805460ff19169055506001919050565b600082612a9281611760565b612a9b57600080fd5b612aa3611b82565b15612aad57600080fd5b60045460ff1615612abd57600080fd5b6004805460ff19166001179055612ad2613a50565b506000848152600260208181526040808420815160c081018352815480825260018301546001600160a01b0390811695830195909552948201549281018390526003820154841660608201526004909101549283166080820152600160a01b9092046001600160401b031660a083015290929190612b51908790613801565b81612b5857fe5b04905080816001600160801b031614612bae576040805162461bcd60e51b81526020600482015260136024820152721cdc195b99081a5cc81b9bdd08185b881a5b9d606a1b604482015290519081900360640190fd5b84856001600160801b031614612c04576040805162461bcd60e51b81526020600482015260166024820152751c5d585b9d1a5d1e481a5cc81b9bdd08185b881a5b9d60521b604482015290519081900360640190fd5b841580612c0f575080155b80612c1a5750815185115b80612c285750816040015181115b15612c38576000935050506131bb565b6000612710612c4983600554613801565b81612c5057fe5b6060850151600654604080516323b872dd60e01b81523360048201526001600160a01b0392831660248201529490930460448501819052925192945016916323b872dd9160648083019260209291908290030181600087803b158015612cb557600080fd5b505af1158015612cc9573d6000803e3d6000fd5b505050506040513d6020811015612cdf57600080fd5b5051612d32576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742066756e647320746f20636f7665722066656500604482015290519081900360640190fd5b8251612d3e9087612197565b6000888152600260205260409081902091909155830151612d5f9083612197565b6000888152600260208181526040808420909201939093556060860151608087015182516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810188905292519116936323b872dd936064808501949293928390030190829087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b5051612e3b5760405162461bcd60e51b8152600401808060200182810382526062815260200180613b5c6062913960800191505060405180910390fd5b6020808401516040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169263a9059cbb926044808401938290030181600087803b158015612e8c57600080fd5b505af1158015612ea0573d6000803e3d6000fd5b505050506040513d6020811015612eb657600080fd5b5051612ef35760405162461bcd60e51b8152600401808060200182810382526033815260200180613a886033913960400191505060405180910390fd5b6040805188815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a160808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051948d90526001600160a01b03908116606884015293841660888301526001600160801b03808c1660a8840152871660c88301526001600160401b03421660e8830152513394909316927f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f918190036101080190a460808301516020808501805160608088018051604080516001600160601b031995851b8616818901529190931b909316603484015281516028818503018152604884018084528151919096012093519051600654958e90526001600160a01b039182166068850152811660888401526001600160801b03808d1660a8850152881660c884015260e883018790529384166101088301526001600160401b034216610128830152513394909316927f0ae463beeed705bdba735cc0f80a21bc43e39fa85611fbceb6e509ca190cc6e2918190036101480190a482606001516001600160a01b031683602001516001600160a01b03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758885604051808381526020018281526020019250505060405180910390a36000878152600260205260409020546131b35760008781526002602081815260408084208481556001810180546001600160a01b031990811690915593810194909455600384018054909316909255600490920180546001600160e01b0319169055805189815290517f88686b85d6f2c3ab9a04e4f15a22fcfa025ffd97226dcf0a67cdf682def55676929181900390910190a15b600194505050505b506004805460ff1916905592915050565b600654600090600160a81b900460ff166131e557600080fd5b6000838152600260205260409020548214156132235761320483611bc6565b1561321857613212836124bd565b50613223565b61322183612274565b505b61322d8383612a86565b61323657600080fd5b61323f83611760565b80156132795750600083815260026020818152604080842060018101546001600160a01b03168552600a8352908420549387905291905254105b1561328e57600d83905561328c836110c7565b505b50600192915050565b60008060008060005b6001600160a01b038089166000908152600860209081526040808320938e1683529290522054156133df5750506001600160a01b038087166000908152600860209081526040808320938c16835292815282822054808352600291829052929091209081015490549193509085613318576000613320565b808b8a840101015b61332a8c83613801565b01613335838b613801565b1115613340576133df565b6133538461334e838c6139ba565b611ce3565b507f3156f1facedd2c8392e4de7babf62e19484c1ac8f306f3a857c46a1bf39013b985613380838c6139ba565b6040805192835260208301919091528051918290030190a18892506133ae896133a9838c6139ba565b612197565b9850826133bb8a8d613801565b816133c257fe5b049a508a15806133d0575088155b156133da576133df565b6132a0565b6000891180156133ef575060008b115b801561341357506001600160a01b038a166000908152600a60205260409020548b10155b15613430576134248b8b8b8b61343e565b9450613430858861231e565b505050509695505050505050565b6000613448611b82565b1561345257600080fd5b60045460ff161561346257600080fd5b6004805460ff19166001179055838261347a826139d1565b61348357600080fd5b61348c816139d1565b61349557600080fd5b86876001600160801b0316146134aa57600080fd5b84856001600160801b0316146134bf57600080fd5b600087116134cc57600080fd5b6001600160a01b0386166134df57600080fd5b600085116134ec57600080fd5b6001600160a01b0384166134ff57600080fd5b836001600160a01b0316866001600160a01b0316141561351e57600080fd5b613526613a50565b8781526001600160a01b03808816602083015260408201879052851660608201523360808201526001600160401b03421660a08201526135646139ef565b600081815260026020818152604080842086518155828701516001820180546001600160a01b039283166001600160a01b0319918216179091558389015195830195909555606088015160038301805491831691871691909117905560808801516004928301805460a08b01516001600160401b0316600160a01b0267ffffffffffffffff60a01b199385169190981617919091169590951790945581516323b872dd60e01b81523391810191909152306024820152604481018e90529051949850918b16936323b872dd936064808501948390030190829087803b15801561364c57600080fd5b505af1158015613660573d6000803e3d6000fd5b505050506040513d602081101561367657600080fd5b505161368157600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516001600160601b031960608a811b82166020808501919091529089901b90911660348301528251602881840301815260488301808552815191909201206001600160a01b038b811690925290881660688301526001600160801b03808c166088840152891660a88301526001600160401b03421660c8830152915133929187917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360e80190a450506004805460ff1916905550949350505050565b6001600160a01b0383166000908152600a602052604081205485101561379c57600080fd5b6137a88585858561343e565b600c80546000838152600b60209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b600081158061381c5750508082028282828161381957fe5b04145b610b82576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b600080831161387257600080fd5b8115801590613887575061388582611760565b155b156138a5576000918252600760205260409091206001015490613872565b816138ba576138b383613936565b9050610b82565b6138c483836139fc565b156138fe5760005b82158015906138e057506138e084846139fc565b156138b35750600082815260076020526040902060010154916138cc565b8115801590613914575061391283836139fc565b155b1561392f5760009182526007602052604090912054906138fe565b5080610b82565b600080821161394457600080fd5b600082815260026020908152604080832060038101546001909101546001600160a01b03908116808652600885528386209190921680865293529083205491929091905b811580159061399c575061399c86836139fc565b15610d94575060008181526007602052604090206001015490613988565b6000818311156139ca5781611220565b5090919050565b6001600160a01b031660009081526003602052604090205460ff1690565b6001805481019081905590565b60008181526002602081905260408083209091015484835290822054613a229190613801565b600084815260026020819052604080832090910154858352912054613a479190613801565b10159392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565bfefe6f666665722e7061795f67656d2e7472616e73666572286d73672e73656e6465722c207175616e7469747929206661696c65644f66666572207761732064656c65746564206f722074616b656e2c206f72206e6576657220657869737465642e4f666665722063616e206e6f742062652063616e63656c6c656420626563617573652075736572206973206e6f74206f776e65722c20616e64206d61726b6574206973206f70656e2c20616e64206f666665722073656c6c7320726571756972656420616d6f756e74206f6620746f6b656e732e6f666665722e6275795f67656d2e7472616e7366657246726f6d286d73672e73656e6465722c206f666665722e6f776e65722c207370656e6429206661696c6564202d20636865636b207468617420796f752063616e20706179207468652066656564732d617574682d756e617574686f72697a6564000000000000000000000000a265627a7a723158207cc6f2603dc9d00f41b6466de743bd658e2563482ccb9f3cf861701ec4d595d664736f6c63430005100032",
      "r": "0x4c80eef5432f456e73d30564a3a863efb6fd7c7a628b08cd2ef1367bb685f8fe",
      "s": "0x607c596af34a4c0d2113fdc116701e41b07eeff592fb1dda1d7743c50e1af911",
      "v": 174,
      "chainId": 69
    }
  }
}